---
toc-title: "Chapter 1"
---

# Introduction: What's the Difference?

::: {.content-visible when-format="html"}
{{< include style/macros-html.md >}}
{{< include style/macros.md >}}
:::

Have you ever looked at two program descriptions and wondered *how equivalent they are*
---or, conversely: how they can be distinguished?

I have run into this problem often, for instance when analyzing models of distributed algorithms or when devising examples for teaching.
But obviously, the question already occurs every time one rewrites a program part and hopes for it to still do its job.

::: {#fig-ltbts2-paper .column-margin}
![](img/ltbts2.png){.lightbox}

The linear-time–branching-time spectrum with silent moves as depicted in @glabbeek1993ltbt.
(`Do not try to read this small figure! Its role here is that of a symbol.`{=latex} This thesis will use a simpler version in @fig-weak-spectrum.)
:::

The first time I formally faced the question has been when working as a student research assistant:
I was tasked with implementing a translation from the process algebra Timed CSP to Timed Automata.^[
    The aim was to bridge between the tools FDR2 and UPPAAL for Göthel's dissertation [-@goethel12mechanicalVerificationRTS].
    The previous work I was to base the translations on had serious flaws:
    One approach introduced spurious deadlocks to the model, the other was unable to handle nesting of choices and parallel composition.
    Clearly, we had to change the encoding!]
… How to tell whether the translation would properly honor the semantics of the two formalisms?
Did it translate CSP terms to automata *with the same meaning*?
Even the definition of the question is tricky, as there are different notions of what counts as “same meaning” in the semantics of programs.

I then took my very first look into seminal work on the landscape of process equivalences, the “linear-time–branching-time spectrum” by van Glabbeek [-@glabbeek1990ltbt1; -@glabbeek1993ltbt; -@glabbeek2001ltbtsiReport with a combined 2500 citations on Google Scholar].
Their central figure, reproduced in @fig-ltbts2-paper, mesmerized me.
So many equivalences!
But, how to find out for a given pair of processes which of the many equivalences apply?
Over the years, I have learned that others, too, have run into this not-quite-straightforward problem:
For instance, @nestmann1996decoding thinking about process algebra encodings and @bell2013certifiably verifying compiler optimizations.

{{< paragraph_heading "The problem" >}} can abstractly be summarized as follows:

\vspace*{-\medskipamount}
> How does one conveniently decide for a pair of systems which notions from a spectrum of behavioral equivalences equate the two?
\vspace*{-\medskipamount}

The above question will be the *research question of this thesis*.
We^[
    As you might have noticed, this text uses more personal pronouns than is common in much of computer science literature.
    Their meaning is the same as in a lecture:
    “I” = “The author”; “You” = “The audience”; “We” = “The asynchronous collective of author and readers,” or sometimes “The author together with coauthors.”
] want to enable future researchers to tap into the wisdom of the linear-time–branching-time spectrum and to easily determine what equivalences fit their models.

## Linear-Time–Branching-Time Spectroscopy {#sec-ltbt-spectroscopy-idea}

To illustrate the problem, let us look at an example that we will be able to solve via tool support at the end of the thesis in @sec-equivio-peterson.
It includes numerous concepts we will define and discuss more deeply on our way there.

:::{#exm-peterson-mutex}
#### Verifying Peterson's mutual exclusion

Many verification tasks can be understood along the lines of “how equivalent” two models are.
@fig-peterson-mutex replicates a standard example, known for instance from the textbook *Reactive Systems* [@ails2007reactiveSystems]:
A specification of mutual exclusion $\literal{Mx}$ as two users $\literal A$ and $\literal B$ entering their critical section $\literal{ec_A} / \literal{ec_B}$ and leaving $\literal{lc_A} / \literal{lc_B}$ before the other may enter;
and the transition system of Peterson's [-@peterson1981mythsMutex] mutual exclusion algorithm $\literal{Pe}$, with internal steps $\color{gray}\step{}$ due to the coordination that needs to happen.^[
  To fit on the page, $\literal{Pe}$ is minimized by a behavioral equivalence, that will be important later on: stability-respecting branching bisimilarity.
]
For $\literal{Pe}$ to faithfully implement mutual exclusion, it should behave somewhat similarly to $\literal{Mx}$.

::::{#fig-peterson-mutex fig-pos="ht"}
```tikz
\begin{tikzpicture}[scale=.9, transform shape,->,auto,node distance=1.7cm, rel/.style={dashed,font=\it, blue},
    ext/.style={line width=1pt},
    internal/.style={draw=gray}]
  \node (P0) {$\literal{Pe}$};
  \node (P1)[below left of=P0] {$\cdot$};
  \node (P2)[below right of=P0] {$\cdot$};
  \node (P1t3)[below left of=P1, node distance=.8cm] {$\cdot$};
  \node (P3)[below left of=P1] {$\cdot$};
  \node (P4)[below right of=P1] {$\cdot$};
  \node (P2t5)[below right of=P2, node distance=.8cm] {$\cdot$};
  \node (P5)[below right of=P2] {$\cdot$};
  \node (P6)[below left of=P4] {$\cdot$};
  \node (P7)[below right of=P4] {$\cdot$};
  \node (P8)[below left of=P3] {$\color{BrickRed}\circ$};
  \node (P9)[below of=P3, node distance=1.2cm] {$\cdot$};
  \node (P10)[below of=P5, node distance=1.2cm] {$\cdot$};
  \node (P11)[below right of=P5] {$\color{BlueViolet}\circ$};
  \node (P12)[below left of=P6] {$\color{BrickRed}\circ$};
  \node (P13)[below right of=P7] {$\color{BlueViolet}\circ$};
  \node (P14)[below left of=P9] {$\color{BrickRed}\circ$};
  \node (P15)[below right of=P10] {$\color{BlueViolet}\circ$};

  \path
  (P0) edge [internal] node {} (P1)
  (P0) edge [internal] node {} (P2)
  (P1) edge [internal] node {} (P1t3)
  (P1t3) edge [internal] node {} (P3)
  (P1t3) edge [internal] node {} (P6)
  (P1) edge [internal] node {} (P4)
  (P2) edge [internal] node {} (P4)
  (P2) edge [internal] node {} (P2t5)
  (P2t5) edge [internal] node {} (P5)
  (P2t5) edge [internal] node {} (P7)
  (P3) edge node[swap, pos=.3] {$\literal{ec_A}$} (P8)
  (P3) edge [internal] node {} (P9)
  %(P3) edge [internal] node {} (P6)
  (P4) edge [internal] node {} (P6)
  (P4) edge [internal] node {} (P7)
  %(P5) edge [internal] node {} (P7)
  (P5) edge [internal] node {} (P10)
  (P5) edge [pos=.3] node {$\literal{ec_B}$} (P11)
  (P6) edge node[swap, pos=.3] {$\literal{ec_A}$} (P12)
  (P7) edge [pos=.3] node {$\literal{ec_B}$} (P13)
  (P8) edge [internal] node {} (P14)
  (P8) edge [bend left=70] node {$\literal{lc_A}$} (P0)
  (P9) edge [swap,pos=.3] node {$\literal{ec_A}$} (P14)
  (P9) edge [internal] node {} (P6)
  (P10) edge [pos=.3] node {$\literal{ec_B}$} (P15)
  (P10) edge [internal] node {} (P7)
  (P11) edge [internal] node {} (P15)
  (P11) edge [bend right=70, swap] node {$\literal{lc_B}$} (P0)
  (P12) edge [bend right=5, swap, pos=.3] node {$\literal{lc_A}$} (P2t5)
  (P13) edge [bend left=5, pos=.3] node {$\literal{lc_B}$} (P1t3)
  (P14) edge [internal] node {} (P12)
  (P14) edge [bend left=85] node {$\literal{lc_A}$} (P2)
  (P15) edge [internal] node {} (P13)
  (P15) edge [bend right=100, swap] node {$\literal{lc_B}$} (P1)
  ;

  \node (M0)[left of=P0, node distance=6.5cm] {$\literal{Mx}$};
  \node (M1)[below left of=M0, node distance=2.5cm] {$\color{BrickRed}\circ$};
  \node (M2)[below right of=M0, node distance=2.5cm] {$\color{BlueViolet}\circ$};

  \path
  (M0) edge [bend left=15] node {$\literal{ec_A}$} (M1)
  (M0) edge [bend right=15, swap] node {$\literal{ec_B}$} (M2)
  (M1) edge [bend left=15] node {$\literal{lc_A}$} (M0)
  (M2) edge [bend right=15, swap] node {$\literal{lc_B}$} (M0)
  ;
\end{tikzpicture}
```

A specification of mutual exclusion $\literal{Mx}$, and Peterson's protocol $\literal{Pe}$, minimized with respect to stability-respecting branching bisimilarity.
::::

\noindent
Semantics in concurrent models must take nondeterminism and internal steps into account.
Setting the degree to which nondeterminism counts induces equivalence notions with subtle differences:
$\literal{Pe}$ and $\literal{Mx}$ *weakly simulate* each other, intuitively meaning that a tree of options passing over internal activity from one process can be matched by a similar tree of the other.
This implies that they have the same *weak traces*, that is, matching paths.
However, they are not weakly *bi-*similar, which would require a higher degree of symmetry than mutual similarity, namely, matching absence of options.
There are many more such notions, which can be incomparable in how they relate processes.
In our example, one might wonder:
Are there notions relating $\literal{Pe}$ and $\literal{Mx}$ *besides* mutual weak similarity?
:::

{{< paragraph_heading "State of the art." >}}
For many of the existing behavioral preorders and equivalences, there are various algorithms and implementations to decide whether processes are equivalent [see @gl2022eqChecking for a survey].
So, it would be an option to throw an array of algorithms on the transition systems of @exm-peterson-mutex.
For instance, weak similarity, stable failures and contrasimilarity are neighbors in @fig-ltbts2-paper. CAAL [@aaehlow2015caal] could establish mutual weak similarity, mCRL2 [@groote2014mcrl2; @bgklnvww2019mcrl2tacas] would rule out stable-failure equivalence, and, for contrasimilarity, we would need to implement our own solution because there is no tool supporting it.
Combining different tools and algorithms like this is tiresome and prone to subtle errors.
It would be nice to treat the question in *just one* algorithm!

{{< paragraph_heading "Our offer." >}}
This thesis describes how to *decide all equivalences* in one *uniform approach* based on *energy games*, which is *easily implemented in tools*.

As we will discuss in more detail in @sec-equivio-peterson, our accompanying tool {{< equivio >}} answers the questions which equivalences apply for @exm-peterson-mutex in a small query.
Here is an excerpt:

```ccs
Pe = (A1 | B1 | TurnA | ReadyAf | ReadyBf)
    \ {readyAf, readyAt, setReadyAf, setReadyAt, readyBf, readyBt,
       setReadyBf, setReadyBt, turnA, turnB, setTurnA, setTurnB}
Mx = ecA.lcA.Mx + ecB.lcB.Mx

@compareSilent Pe, Mx

@snip "----------storage--------"

ReadyAf = readyAf!ReadyAf + setReadyAf.ReadyAf + setReadyAt.ReadyAt
ReadyAt = readyAt!ReadyAt + setReadyAf.ReadyAf + setReadyAt.ReadyAt

ReadyBf = readyBf!ReadyBf + setReadyBf.ReadyBf + setReadyBt.ReadyBt
ReadyBt = readyBt!ReadyBt + setReadyBf.ReadyBf + setReadyBt.ReadyBt

TurnA = turnA!TurnA + setTurnA.TurnA + setTurnB.TurnB
TurnB = turnB!TurnB + setTurnA.TurnA + setTurnB.TurnB

@snip "----------individual processes----------"

A1 = setReadyAt!setTurnB!A2
A2 = readyBf.A3 + turnA.A3
A3 = ecA.lcA.setReadyAf!A1

B1 = setReadyBt!setTurnA!B2
B2 = readyAf.B3 + turnB.B3
B3 = ecB.lcB.setReadyBf!B1

@snip "----------preprocessing----------"

Pe(main, x=900, y=340)
Mx(main, x=120, y=220)

@preprocessing srbb_minimized

@snip "----------equivalence-checks----------"

@check weak-trace, Pe, Mx
@check weak-bisimulation, Pe, Mx

@snip "----------spectroscopy queries----------"

@compareSilent Pe, Mx
@compareSilent Mx, Pe

@snip "----alternative spec with internal choice-----"

MxIC(main, x=120, y=0)
MxIC = tau.ecA.lcA.MxIC + tau.ecB.lcB.MxIC
@compareSilent Pe, MxIC

@snip "---------- below here, there's only layout information! ----------"

"(A1 | setTurnA!B2 | TurnA | ReadyAf | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1102, y=548)
"(setTurnB!A2 | B1 | TurnA | ReadyAt | ReadyBf) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=681, y=398)
"(setTurnB!A2 | setTurnA!B2 | TurnA | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=949, y=636)
"(A1 | B2 | TurnA | ReadyAf | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1199, y=767)
"(A1 | B3 | TurnA | ReadyAf | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1452, y=961)
"(setTurnB!A2 | B3 | TurnA | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1310, y=1053)
"(A2 | B1 | TurnB | ReadyAt | ReadyBf) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=681, y=802)
"(A3 | B1 | TurnB | ReadyAt | ReadyBf) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=564, y=967)
"(lcA.setReadyAf!A1 | B1 | TurnB | ReadyAt | ReadyBf) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=441, y=1231)
"(lcA.setReadyAf!A1 | setTurnA!B2 | TurnB | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=548, y=1297)
"(setTurnB!A2 | B1 | TurnB | ReadyAt | ReadyBf) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=756, y=546)
"(A2 | B3 | TurnB | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1161, y=1116)
"(setTurnB!A2 | lcB.setReadyBf!B1 | TurnA | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1473, y=1257)
"(A1 | lcB.setReadyBf!B1 | TurnA | ReadyAf | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1664, y=1102)
"(A2 | lcB.setReadyBf!B1 | TurnB | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1235, y=1348)
"(A2 | setTurnA!B2 | TurnB | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=790, y=1112)
"(A2 | B2 | TurnB | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1067, y=874)
"(setTurnB!A2 | B2 | TurnA | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1033, y=427)
"(A2 | B2 | TurnA | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=902, y=926)
"(setTurnB!A2 | setTurnA!B2 | TurnB | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=910, y=771)
"(A3 | setTurnA!B2 | TurnB | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=671, y=1078)
"(A3 | B2 | TurnA | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=829, y=1146)
"(lcA.setReadyAf!A1 | B2 | TurnA | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=785, y=1350)
"(setReadyAf!A1 | B1 | TurnB | ReadyAt | ReadyBf) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=701, y=1061)
"(A1 | B1 | TurnB | ReadyAf | ReadyBf) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=806, y=794)
"(setReadyAf!A1 | setTurnA!B2 | TurnB | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=869, y=1064)
"(A1 | setTurnA!B2 | TurnB | ReadyAf | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1016, y=535)
"(A1 | B1 | TurnA | ReadyAf | ReadyBf) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=666, y=296)
"(A1 | setReadyBf!B1 | TurnA | ReadyAf | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1542, y=816)
"(setTurnB!A2 | setReadyBf!B1 | TurnA | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1477, y=477)
"(A2 | setReadyBf!B1 | TurnB | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=644, y=761)
"(setReadyAf!A1 | B2 | TurnA | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1025, y=1064)

"lcA.Mx"(x=181, y=529)
"lcB.Mx"(x=433, y=290)
```

This query leads to the output in @fig-peterson-spectrum:^[
  This thesis often provides snippets for models on {{< equivio >}}.
  You can examine and modify the example models by clicking on the links reading `Interactive model on equiv.io`.
]

::: {#fig-peterson-spectrum}

![](img/peterson-spectrum.svg){.lightbox}

Output of equiv.io about weak equivalences to relate $\literal{Pe}$ to $\literal{Mx}$ of @exm-peterson-mutex.
:::

\noindent
The big blue circle ![](img/equivio-eq.svg){width=0.9em} indicates that weak simulation indeed is the most specific equivalence to equate $\literal{Pe}$ and $\literal{Mx}$.
Blue half-circles ![](img/equivio-preord.svg){width=0.9em} indicate preordering in only one direction.
For instance, $\literal{Pe}$ is *preordered* to $\literal{Mx}$ with respect to two more specific notions, namely $\eta$-*simulation* and *stable simulation* (and notions below).
Intuitively, this means that $\literal{Pe}$ *implements* $\literal{Mx}$ more faithfully than pure weak similarity would demand.
Red triangles ![](img/equivio-dist.svg){width=0.9em} mark distinctions.

By running *one* simple algorithm, the tool decides *twenty-six* equivalence (and preorder) problems on $\literal{Pe}$ and $\literal{Mx}$ (in about 150&nbsp;ms on my laptop).

{{< paragraph_heading "Spectroscopy analogy." >}}
How does the tool decide so many equivalences in one shot?
The key are van Glabbeek's “linear-time--branching-time spectrum” papers on comparative concurrency semantics [-@glabbeek1990ltbt1;-@glabbeek1993ltbt].
They treat a zoo of distinct *qualitative questions* of the form “Are processes $p$ and $q$ equivalent with respect to notion $N$?”, where $N$ would, for example, be trace or bisimulation equivalence.
The papers unveil an underlying structure where equivalences can easily be compared with respect to their distinctive power.
This is analogous to the *spectrum of light* where seemingly qualitative properties (“The light is blue / green / red.”) happen to be *quantitative* (“The distribution of wavelengths peaks at $460 / 550 / 630~\mathrm{nm}$.”).

For light (i.e. electromagnetic radiation), the mix of wavelengths can be determined through a process called *spectroscopy*.
So, we could reframe the question behind this thesis also:

::: {#idea-spectroscopy .callout-idea .callout-tip}
#### A Spectroscopy for the Spectrum

If there exists a “linear-time–branching time spectrum,” does this mean that there also is some kind of “linear-time–branching-time *spectroscopy*”?
:::

{{< paragraph_heading "State of the art, primed." >}}
This thesis answers the spectroscopy question positively, which is the key step to tackle our research question.
One can compute what mix of (in-)distinguishabilities exists between a pair of finite-state processes,
and this places the two on the spectrum of equivalences.
We thus turn a set of *qualitative* equivalence problems into one *quantitative* problem of *how equivalent* two systems are.
As we will see, this amounts to an abstract form of subtraction between programs, determining what kinds of differences an outside examiner might observe.
Thereby *one* algorithm works for *all* of a spectrum.

## This Thesis

At the core, this thesis presents an algorithm to *decide all behavioral equivalences at once* for varying spectra of equivalence using *energy games to limit possible distinctions* through attacker budgets.
More precisely, we make the following contributions, each coming with a “side quest:”

- @sec-preliminaries lays some foundations and makes precise *how bisimulation games relate to grammars of distinguishing formulas* from Hennessy–Milner modal logic.
  - Side quest: Certifying algorithms to check equivalences.
- @sec-spectrum shows *how to understand the strong linear-time--branching-time spectrum quantitatively* and formalizes the *spectroscopy problem*.
  - Side quest: Equivalence checking as subtraction.
- @sec-approach introduces the approach of *characterizing equivalence spectra through energy games* and *how to decide such games*.
  - Side quest: Galois energy games. 
- @sec-strong-spectroscopy applies the approach to decide the whole strong spectrum through one *game for linear-time--branching-time spectroscopy*.
  - Side quest: Deriving efficient *individual equivalence checkers*.
- @sec-weak-spectrum recharts the *weak spectrum of equivalences accounting for silent steps* to fit our game approach.
  - Side quest: Case studies in concurrency theory research.
- @sec-weak-spectorscopy adapts the game for the *weak spectrum of equivalences*.
  - Side quest: Isabelle/HOL formalization.
- @sec-implementations showcases four *implementations* to conveniently perform equivalence spectroscopies in web browsers and reports some benchmarking results.
  - Side quest: Analyzing Peterson's mutual exclusion protocol.

Each chapter ends with a discussion of its position in the context of the thesis and of related work.
We close with a discussion of the wider picture in @sec-conclusion and how this thesis ascends through a *hierarchy of game characterizations*.
Recurring symbols can be looked up under [Notation](#sec-notation)`~on page~\pageref{sec-notation}`{=latex}.

:::{#fig-thesis-overview fig-pos="t"}

```tikz
%%| image-class: lightbox
\begin{adjustbox}{max width=\textwidth, center}
  \begin{tikzpicture}[rounded corners = 5, outer sep=1mm]
  \tikzstyle{every node}=[font=\normalsize, align=center]
    %\draw[help lines] (0,0) grid (12,7.5);

    \draw[thick] (0,1.5) rectangle (12,-0.5);
    \node at (6,-0.25) {\textbf{Preliminaries} \quad Chapter \ref{sec-preliminaries}};
    \draw  (0.1,1.4) rectangle  node {Behavior \& equivalences\\ \ref{sec-programs} \& \ref{sec-behavioral-eq}} (3.95,0.1);
    \draw  (4.05,1.4) rectangle  node {Modal logics \\ \ref{sec-hml}}
     (7.95,0.1);
    \draw  (8.05,1.4) rectangle  node {Games \vphantom{q} \\ \ref{sec-games}} (11.9,0.1);

    \draw[thick]  (1,3) rectangle  node {\textbf{Strong spectrum} \\ \textbf{\& spectroscopy problem} \\ Chapter~\ref{sec-spectrum}} (8,1.5);
    \draw[thick] (8,1.5) -- (8,3) -- (6,3) -- (6,4.5) -- (12,4.5) -- (12,1.5) -- cycle;
    \node at (9,3.75) {\textbf{Approach: Equivalence} \\ \textbf{problems as energy games} \\ Chapter \ref{sec-approach}};
    \draw (8.1,2.9) rectangle node {Energy games \\ \ref{sec-energy-games} \& \ref{sec-deciding-energy-games}} (11.9,1.6);

    \draw[thick] (2,3) -- (2,6) -- (12,6) -- (12,4.5) -- (6,4.5) -- (6,3) -- cycle;
    \node at (4,4.5) {\textbf{Spectroscopy of} \\ \textbf{the strong spectrum} \\ Chapter \ref{sec-strong-spectroscopy}};
    \draw (8.1,5.9) rectangle node {Individual checkers \\ \ref{sec-deciding-individual-eqs}} (11.9,4.6);

    \draw[thick] (0,1.5) -- (0,6) -- (2,6) -- (2,3) -- (1,3) -- (1,1.5) -- cycle;
    \node at (1,4.5) {\textbf{Weak} \\ \textbf{spectrum} \\ Chapter \ref{sec-weak-spectrum}};

    \draw[thick] (0,7.5) rectangle node {\textbf{Weak spectroscopy} \\ Chapter \ref{sec-weak-spectorscopy}} (12,6);
  \end{tikzpicture}
\end{adjustbox}
```

The *theory stack* of this thesis.
Chapters and ideas build upon those underneath.
:::

@fig-thesis-overview gives an overview of how parts of this thesis build upon each other.
An example of how to read the figure:
@sec-approach describes the approach to frame equivalence problems as energy games.
It builds on a part of the modal characterization for the strong spectrum in @sec-spectrum and on game theory from @sec-preliminaries, which is adapted through energy games.

{{< paragraph_heading "Not this thesis." >}}
We limit ourselves to the *strong spectrum* [@glabbeek1990ltbt1] and the *weak spectrum* [@glabbeek1993ltbt].
For instance, this excludes questions around value-passing and open/late/early bisimilarities and barbed congruences on the $\pi$-calculus [cf. @sangiorgi1996bisimPi].
Also, we do not consider timed or probabilistic equivalences [cf. @bdh2020probabilisticSpectrum], nor behavioral distances [@fahrenberg2014quantitativeLTBTS].
Neither do we aim to re-survey behavioral equivalences in encyclopedic detail, which means that several notions will be covered without a detailed discussion of their features and merits.

## Artifacts and Papers {#sec-artifacts-papers}

This thesis ties together the work of several publications in a coherent presentation.
It is written to be understandable on its own.
For details, we typically refer to the original publications or to other artifacts for implementation and machine-checked proofs.

{{< paragraph_heading "Publications." >}}
The following four publications (with me as main author) fuel the following chapters:

- **“Deciding all behavioral equivalences at once: A game for linear-time–branching-time spectroscopy”** [LMCS -@bjn2022decidingAllBehavioralEqs, with Nestmann & Jansen] introduces the *spectroscopy problem* and the *core idea* to decide the whole strong spectrum using games that search trees of possible distinguishing formulas.
  [Conference version: TACAS -@bisping2021ltbtsTacas]
- **“Process equivalence problems as energy games”** [CAV -@bisping2023equivalenceEnergyGames] makes a *big technical leap by using energy games*, removing the necessity for explicit formula construction.
  [Tech report: arXiv -@bisping2023equivalenceEnergyGamesReport]
- **“Characterizing contrasimilarity through games, modal logic, and complexity”** [Information & Computation -@bm2024contrasimilarityInfComp, with Montanari] closes *gaps in the weak spectrum of equivalences* for games and their complexity and their link to modal logics.
  [Isabelle/HOL theory: AFP -@bm2023contrasimilarityAFP; Workshop version: EXPRESS/SOS -@bm2021contrasimilarity]
- **“One energy game for the spectrum between branching bisimilarity and weak trace semantics”** [EXPRESS/SOS -@bj2024silentStepSpectroscopyExpress, with Jansen] adapts the *spectroscopy approach for the weak spectrum*.
  [Journal version: Preprint -@bj2025silentStepSpectroscopyJournal]

{{<paragraph_heading "Prototype.">}}
The algorithms of this thesis have been validated through a *Scala prototype implementation*.
Throughout the thesis, many examples come with listings of {{<equivio>}} input and a link to try it out in the browser.
You have already seen one such example for Peterson's mutex in @sec-ltbt-spectroscopy-idea.
@sec-equivio-usage explains the usage of {{<equivio>}}.
The source is available openly on <https://github.com/benkeks/equivalence-fiddle>.

{{<paragraph_heading "Isabelle formalization.">}}
In order to relieve the document of technical proofs, these are contained in machine-checkable *Isabelle/HOL theories*.

- *“A weak spectroscopy game to characterize behavioral equivalences”* formalizes the core results of @sec-weak-spectrum and @sec-weak-spectorscopy: <https://equivio.github.io/silent-step-spectroscopy>.
  The theory [@bbhlmm2025weakSpectroscopyIsabelle] has been developed together with TU Berlin students Lisa Annett Barthel, Leonard Moritz Hübner, Caroline Lemke, Karl Parvis Philipp Mattes, and Lenard Mollenkopf.
  Also, many theorems of earlier chapters can be understood to be supported by the formalization.
- *“Equivalence spectrum formalization”* supplies proofs for the early chapters: <https://benkeks.github.io/ltbt-spectroscopy-isabelle/>.

{{<paragraph_heading "Student theses.">}}
Some parts of this thesis strongly rely on student work that I have supervised, in particular, on the following theses:

- @trzeciakiewicz2021ltbtBrowserGame: *“Linear-time--branching-time spectroscopy as an educational web browser game”* provides a computer game version of the spectroscopy procedure to be discussed in @sec-spectro-invaders.
- @ozegowski2023eqCAAL: *“Integration eines generischen Äquivalenzprüfers in CAAL”* extends the Concurrency Workbench Aalborg Edition with a spectroscopy feature, reported in @sec-spectroscopy-caal, extended by @strassnickOzegowski2024weakCAAL.
- @mattes2024expressivePowerHML: *“Measuring expressive power of HML formulas in Isabelle/HOL”* proves the approach to modal characterization of @sec-ltbt-spectrum.
- @vogel2024energyGamesWebGPU: *“Accelerating process equivalence energy games using Web{{<shy>}}GPU,”* topic of @sec-gpu-equiv, allows massive parallelization on the GPU of key parts of our algorithm.
- @lemke2024multiweightedEnergyGames: “*A formal proof of decidability of multi-weighted declining energy games*” formalizes the *Galois energy games* of @sec-deciding-energy-games.
  Its Isabelle theory is archived on <https://github.com/crmrtz/galois-energy-games>.

{{<paragraph_heading "Other publications.">}}
Only indirectly connected to this dissertation project are my prior publications in leading me to topics and techniques:

- Bisping, Brodmann, Jungnickel, Rickmann, Seidler, Stüber, Wilhelm-Weidner, Peters, & Nestmann [ITP -@bbjrsswpn2016mechanicaProofFLP]: “Mechanical verification of a constructive proof for FLP.”
- Bisping & Nestmann [TACAS -@bn2019coupledsimTacas]: “Computing Coupled Similarity.”
- Bisping, Nestmann, & Peters [Acta Informatica -@bnp2020coupledsim30]: “Coupled similarity: The first 32 years.”

{{<paragraph_heading "Other Bachelor theses.">}}
During my dissertation project, I also supervised several other Bachelor theses, many of which played important roles in shaping the research.
Although they do not appear directly on the following pages, I want to acknowledge the students' vital contributions to this research.

- @peacock2020videoGameEquivalences: *Process equivalences as a video game*
- @le2020coupledSimMcrl2: *Implementing coupled similarity as an automated checker for mCRL2*
- @wrusch2020gameEquivalences: *Ein Computerspiel zum Erlernen von Verhaltensäquivalenzen*
- @reichert2020visualizingCounterfactuals: *Visualising and model checking counterfactuals*
- @wittig2020processJungle: *Charting the jungle of process calculi encodings*
- @bulik2021interProcComm: *Statically analysing inter-process communication in elixir programs*
- @montanari2021kontrasimSpiel: *Kontrasimulation als Spiel*
- @pohlmann2021reactiveBisimStrong: *Reducing strong reactive bisimilarity to strong bisimilarity*
- @england2021hmlSynthesis: *HML synthesis of bistinguished processes*
- @duong2022toolLTBTS: *Developing an educational tool for linear-time–bran{{<shy>}}ching-time spectroscopy*
- @alshukairi2022reaktiveBisimReduktion: *Automatisierte Reduktion von reaktiver zu starker Bisimilarität*
- @adler2022fehlertoleranteAlgorithmen: *Simulation fehlertoleranter Konsensalgorithmen in Hash.ai*
- @sandt2022gameReactiveBisim: *A video game about reactive bisimilarity*
- @loenne2023gameCounterfactuals: *An educational computer game about counterfactual truth conditions*
- @hauschild2023nonlinearCounterfactuals: *Nonlinear counterfactuals in Isabelle/HOL*
- @stoecker2024HOcalculiEqs: *Higher-order diadic µ-calculus---An efficient framework for checking process equivalences?*
- @kurzan2024mcrl2Contrasim: *Implementierung eines Contrasimilarity-Checkers für mCRL2*

{{<paragraph_heading "This thesis itself.">}}
This document itself is created using Quarto [-@allaire2025quarto].
Its HTML version is deployed to <https://generalized-equivalence-checking.equiv.io/>.
One can find its source on <https://github.com/benkeks/generalized-equivalence-checking/>.