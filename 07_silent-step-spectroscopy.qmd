---
toc-title: "Chapter 7"
---

::: {.content-visible when-format="html"}
{{< include style/macros-html.md >}}
{{< include style/macros.md >}}
:::

# Spectroscopy for the Weak Spectrum {#sec-silent-step-spectroscopy}

## The Weak Spectroscopy Game

### The Game

The weak spectroscopy game, in many respects, is just like the spectroscopy games we have already discussed:
The attacker has different paths that move closely along the productions of the $\hmlsrbb$-grammar (@def-hml-srbb).
But this time, there are four different kidns of non-empty conjunctions!
This makes the following schematic depiction in @fig-weak-spectroscopy-game-schematic already look quite entangled.

:::{#fig-weak-spectroscopy-game-schematic fig-env='figure*' fig-pos='t'}
```tikz
%%| image-class: lightbox
\begin{tikzpicture}[>->,shorten <=1pt,shorten >=0.5pt,auto,node distance=2cm, rel/.style={dashed,font=\it},
  posStyle/.style={draw, inner sep=1ex,minimum size=1cm,minimum width=2cm,anchor=center,draw,black,fill=gray!5}]
  \node[posStyle, initial, initial text={}]
    (Att){$\attackerpos{p,Q}$};
  \node[posStyle]
    (AttDelay) [right = 1.6cm of Att] {$\attackerpos[\varepsilon]{p,Q_\varepsilon}$};
  \node[ellipse, draw, inner sep=1ex, minimum size=1cm,minimum width=2cm,fill=gray!5]
    (Def) [below = 2.2cm of AttDelay] {$\defenderpos{p,Q}$};
  \node[ellipse, draw, inner sep=1ex, minimum size=1cm,minimum width=2cm,fill=gray!5]
    (DefStab) [above right = 1.2cm of Def] {$\defenderpos[s]{p,\set{ q\!\in\!Q_\varepsilon \mid q \nostep{\tau} }}$};
  \node[ellipse, draw, inner sep=1ex, minimum size=1cm,minimum width=2cm,fill=gray!5]
    (DefBranch) [right = 3.3cm of AttDelay] {$\defenderpos[\eta]{p,\alpha,p',Q_\varepsilon \setminus Q_\alpha, Q_\alpha}$};
  \node[posStyle]
    (AttBranch) [above=.9cm of DefBranch] {$\attackerpos[\eta]{p',Q'}$};
  \node[posStyle]
    (AttConj) [below right = 1.2cm and .2cm of DefStab] {$\attackerpos[\land]{p,q}$};
  \node[posStyle, dashed, dash pattern={on 1.055045263157895mm off 0.993586315789474mm}, dash phase=0.405943684210525mm]
    (AttSwap) [right = 2cm of AttConj] {$\attackerpos[\varepsilon]{q,\set{p' \mid p \stepweak p'}}$};
  \node[posStyle, dashed, dash pattern={on 1.051033684210526mm off 0.989808421052632mm}, dash phase=0.423411578947368mm]
    (AttContinue) [above = 1.5cm of AttSwap] {$\attackerpos[\varepsilon]{p,\set{q' \mid q \stepweak q'}}$};
  \node[posStyle, dashed, dash pattern={on 1.03mm off 0.97mm}, dash phase=0.515mm]
    (AttObs) [right = 2cm of AttBranch] {$\attackerpos{p^\prime,Q^\prime}$};
  % draw the bottom left corner nicely:
  \draw[-] (AttSwap.south west) ++(0.2pt,0.2pt) ++(0.07,0) -- ++(-0.07,0) -- ++(0,0.05);
  \draw[-] (AttContinue.south west) ++(0.2pt,0.2pt) ++(0.07,0) -- ++(-0.07,0) -- ++(0,0.05);
  \draw[-] (AttObs.south west) ++(0.2pt,0.2pt) ++(0.07,0) -- ++(-0.07,0) -- ++(0,0.05);

  \path
    (Att) edge
      node[label={-90:$\textcolor{gray}{\zerovec}$}] {$Q \stepweak Q_\varepsilon$} (AttDelay)
    (Att) edge[bend right=15]
      node[pos = .4, label={-150:$\textcolor{gray}{\zerovec}$}] {$Q = \varnothing$} (Def)
    (Att) edge[bend right=60]
      node[pos = .6, label={-130:$\textcolor{gray}{-\unitvec{5}}$}] {$Q \neq \varnothing$} (Def)
    (AttDelay) edge [out=155,in=115,looseness=4, pos=.6] node {$p \step{\tau} \ldots\; \textcolor{gray}{\zerovec}$} (AttDelay)
    (AttDelay.north) edge[bend left=28]
      node[pos=.3, align=center, label={[label distance=0.0cm]-30:$\textcolor{gray}{-\unitvec{1}}$}] {$p\step{a}p'$\\ $Q_\varepsilon \step{a} Q'$} (AttObs)
    (AttDelay) edge
      node[pos =.3, label={[label distance=0cm]-180:$\textcolor{gray}{\zerovec}$}] {$Q = Q_\varepsilon$} (Def)
    (AttDelay) edge
      node[pos=.7,label={[label distance=0.2cm]-175:$\textcolor{gray}{\zerovec}$}] {$p \nostep{\tau}$} (DefStab)
    (AttDelay) edge
      node[pos=.65,align=center,label={[label distance=0cm]-90:$\textcolor{gray}{\zerovec}$}] {$p \step{\hmlopt\alpha} p'$\\$Q_\alpha \subseteq Q_\varepsilon$} (DefBranch)
    (Def) edge[bend right=17]
      node[pos=.85, label={[label distance=0.1cm]-100:$\textcolor{gray}{-\unitvec{3}}$}] {$q \in Q$} (AttConj)
    (DefStab) edge[bend right=10]
      node[align=right, pos=.85, label={[label distance=0.3cm]-170:$\textcolor{gray}{-\unitvec{4}}$}] {\mbox{}\hspace*{-1.5em}$q \in Q_\varepsilon$\\[2pt]\mbox{}\hspace*{-1.5em}$q \nostep{\tau}$} (AttConj)
    (DefStab) edge[bend left=10]
      node[align=right, pos=.2, label={[label distance=0.3cm]165:$\textcolor{gray}{-\unitvec{4}-\unitvec{8}}$}] {\mbox{}\hspace*{-3em}$\varnothing = Q = \mbox{}$\\[2pt]\mbox{}\hspace*{-3em}$\set{ q\!\in\!Q_\varepsilon \mid q \nostep{\tau} }\;$} (Def)
    (AttConj) edge[bend left=10]
      node[label={[label distance=0.0cm]-75:$\textcolor{gray}{\updmin{1,6},0,0,0,0,0,0,0}$}] {} (AttContinue)
    (AttConj) edge[bend right=15]
      node[below] {$\textcolor{gray}{\updmin{1,7},0,0,0,0,0,0,-1}$} (AttSwap)
    (DefBranch) edge
      node[pos=.42, label={[label distance=0.1cm]-0:$\textcolor{gray}{\updmin{1,6},-1,-1,0,0,0,0,0}$}] {$Q_\alpha\! \step{\hmlopt{\alpha}} Q'$} (AttBranch)
    (AttBranch) edge
      node[below]{$\textcolor{gray}{-\unitvec{1}}$} (AttObs)
    (DefBranch) edge[bend left=5]
      node[pos=.07, align=center, label={[label distance=0.05cm]-180:$\textcolor{gray}{-\unitvec{2}-\unitvec{3}}$}] {$q \in Q_\varepsilon \setminus Q_\alpha$} (AttConj);
\end{tikzpicture}
```

Schematic weak spectroscopy game of @def-weak-spectroscopy-game.
:::

Formally, the game rules are defined as follows:

::: {#def-weak-spectroscopy-game}

For a system $\system=(\states,\actions,\step{})$,
the $8$-dimensional *weak spectroscopy energy game*
$\gamespectroscopyw^{\system}=(G,G_{\defender},\gamemoveblank,w)$
consists of

- *attacker (immediate) positions* $\attackerpos{p,Q} \in G_\attacker$,
- **new:** *attacker delayed positions* $\attackerpos[\varepsilon]{p,Q} \in G_\attacker$,
- *attacker conjunct positions* $\attackerpos[\land]{p,q} \in G_\attacker$,
- **new:** *attacker branching positions* $\attackerpos[\eta]{p,Q} \in G_\defender$,
- *defender conjunction positions* $\defenderpos{p,Q} \in G_\defender$,
- **new:** *defender stable conjunction positions* $\defenderpos[s]{p,Q} \in G_\defender$,
- **new:** *defender branching positions* $\defenderpos[\eta]{p,\alpha,p',Q,Q_\alpha} \in G_\defender$,

where $p, q \in \states$ and $Q, Q_\alpha \in \powerset{\states}$, and sixteen kinds of moves:{{<isb inductive Spectroscopy_Game LTS_Tau.spectroscopy_moves>}}
$$
\begin{array}{rrcll}
  \textit{delay}
  & \attackerpos{p,Q}
  & \gamemove{0,0,0,0,0,0,0,0}
  & \attackerpos[\varepsilon]{p,Q'}
  & \text{if $Q \stepweak Q'$,}
  \\
  \textit{procrastination}
  & \attackerpos[\varepsilon]{p,Q}
  & \gamemove{0,0,0,0,0,0,0,0}
  & \attackerpos[\varepsilon]{p',Q}
  & \text{if $p \step{\tau} p'$, $p \neq p'$,}
  \\
  \textit{observation}
  & \attackerpos[\varepsilon]{p,Q}
  & \gamemove{-1,0,0,0,0,0,0,0}
  & \attackerpos{p',Q'}
  & \text{if $p \step{a} p'$, $Q \step{a} Q'$, $a \neq \tau$,}
  \\
  \textit{finishing}
  & \attackerpos{p,\varnothing}
  & \gamemove{0,0,0,0,0,0,0,0}
  & \defenderpos{p,\varnothing},
  &
  \\
  \textit{immediate conj.}
  & \attackerpos{p,Q}
  & \gamemove{0,0,0,0,-1,0,0,0}
  & \defenderpos{p,Q}
  & \text{if $Q \neq \varnothing$,}
  \\
  \textit{late conj.}
  & \attackerpos[\varepsilon]{p,Q}
  & \gamemove{0,0,0,0,0,0,0,0}
  & \defenderpos{p,Q},
  &
  \\
  \textit{conj. answer}
  & \defenderpos{p,Q}
  & \gamemove{0,0,-1,0,0,0,0,0}
  & \attackerpos[\land]{p,q}
  & \text{if $q \in Q$,}
  \\
  \textit{positive conjunct}
  & \attackerpos[\land]{p,q}
  & \gamemove{\updmin{1,6},0,0,0,0,0,0,0}
  & \attackerpos[\varepsilon]{p,Q}
  & \text{if $\set{q} \stepweak Q$,}
  \\
  \textit{negative conjunct}
  & \attackerpos[\land]{p,q}
  & \gamemove{\updmin{1,7},0,0,0,0,0,0,-1}
  & \attackerpos[\varepsilon]{q,Q}
  & \text{if $\set{p} \stepweak Q$ and $p \neq q$,}
  \\
  \hline
  \textit{branching conj.}\vphantom{I^{I^I}}
  & \attackerpos[\varepsilon]{p,Q}
  & \gamemove{0,0,0,0,0,0,0,0}
  & \defenderpos[\eta]{p,\alpha,p',Q \setminus Q_\alpha,Q_\alpha}
  & \text{if $p \step{\hmlopt\alpha} p'$, $Q_\alpha \subseteq Q$,}
  \\
  \textit{branch. answer}
  & \defenderpos[\eta]{p,\alpha,p',Q,Q_\alpha}
  & \gamemove{0,-1,-1,0,0,0,0,0}
  & \attackerpos[\land]{p,q}
  & \text{if $q \in Q$,}
  \\
  \textit{branch. observation}
  & \defenderpos[\eta]{p,\alpha,p',Q,Q_\alpha}
  & \gamemove{\updmin{1,6},-1,-1,0,0,0,0,0}
  & \attackerpos[\eta]{p',Q'}
  & \text{with $Q_\alpha \step{\hmlopt\alpha} Q'$,}
  \\
  \textit{branch. accounting}
  & \attackerpos[\eta]{p,Q}
  & \gamemove{-1,0,0,0,0,0,0,0}
  & \attackerpos{p,Q},
  \\
  \hline
  \textit{stable conj.}\vphantom{I^{I^I}}
  & \attackerpos[\varepsilon]{p,Q}
  & \gamemove{0,0,0,0,0,0,0,0}
  & \defenderpos[s]{p,Q'}
  & \text{if } Q' = \set{ q \in Q \mid q \nostep{\tau}}, p \nostep{\tau},
  \\
  \textit{conj. stable answer}
  & \defenderpos[s]{p,Q}
  & \gamemove{0,0,0,-1,0,0,0,0}
  & \attackerpos[\land]{p,q}
  & \text{if $q \in Q$,}
  \\
  \textit{stable finishing}
  & \defenderpos[s]{p,\varnothing}
  & \gamemove{0,0,0,-1,0,0,0,-1}
  & \defenderpos{p,\varnothing}.
\end{array}
$$
:::


### Correctness {#sec-correctness-weak-spectroscopy}

Establishing correctness now proceeds mostly as we are used to from @sec-correctness-poly-spectroscopy and -@sec-correctness-strong-spectroscopy.
This subsection limits itself to citing the lemma heads and the inductive predicates used in the full proofs of @bj2025silentStepSpectroscopyJournal.

The following facts moreover have been fully formalized in Isabelle/HOl, which will be the topic of the following @sec-isabelle-formalization.

::: {#def-strategy-formulas-weak}
#### Strategy Formulas for $\gamespectroscopyw$

The set of *strategy formulas* for a game position $g$ and a budget $e$, $\stratweak(g, e)$, in the context of a weak spectroscopy game $\gamespectroscopyw^{\system}$ is defined inductively by the rules in @fig-weak-spectroscopy-strategy-formulas.{{<isb inductive Strategy_Formulas weak_spectroscopy_game.strategy_formula>}}
:::

:::{#fig-weak-spectroscopy-strategy-formulas .column-body-outset fig-pos='t!' fig-env="figure*"}
$$
\inferrule[delay]{
  \attackerpos{p,Q} \gamemove{u} \attackerpos[\varepsilon]{p,Q'} \quad
  e' = \energyupdate(e, u) \in \attackerwins(\attackerpos[\varepsilon]{p,Q'}) \quad
  \chi \in \stratweak(\attackerpos[\varepsilon]{p,Q'}, e')
} {
  \hmleps\chi \in \stratweak(\attackerpos{p,Q}, e)
}
$$
$$
\inferrule[procrastination]{
  \attackerpos[\varepsilon]{p,Q} \gamemove{u} \attackerpos[\varepsilon]{p',Q} \quad
  e' = \energyupdate(e, u) \in \attackerwins(\attackerpos[\varepsilon]{p',Q}) \quad
  \chi \in \stratweak(\attackerpos[\varepsilon]{p',Q}, e')
} {
  \chi \in \stratweak(\attackerpos[\varepsilon]{p,Q}, e)
}
$$
$$
\inferrule[observation]{
  \attackerpos[\varepsilon]{p,Q} \gamemove{u} \attackerpos{p',Q'} \quad
  e' = \energyupdate(e, u) \in \attackerwins(\attackerpos{p',Q'}) \\
  p \step{a} p' \quad
  Q \step{a} Q' \quad
  \varphi \in \stratweak(\attackerpos{p',Q'}, e')
} {
  \hmlobs{a}\varphi \in \stratweak(\attackerpos[\varepsilon]{p,Q}, e)
}
$$
$$
\inferrule[immediate conj.]{
  \attackerpos{p,Q} \gamemove{u} \defenderpos{p,Q} \quad
  e' = \energyupdate(e, u) \in \attackerwins(\defenderpos{p,Q}) \quad
  \varphi \in \stratweak(\defenderpos{p,Q}, e')
} {
  \varphi \in \stratweak(\attackerpos{p,Q}, e)
}
$$
$$
\inferrule[late conj.]{
  \attackerpos[\varepsilon]{p,Q} \gamemove{u} \defenderpos{p,Q} \quad
  e' = \energyupdate(e, u) \in \attackerwins(\defenderpos{p,Q}) \quad
  \chi \in \stratweak(\defenderpos{p,Q}, e')
} {
  \chi \in \stratweak(\attackerpos[\varepsilon]{p,Q}, e)
}
$$
$$
\inferrule[conj. answer]{
  \defenderpos{p,Q} \gamemove{u_q} \attackerpos[\land]{p,q} \\
  \forall q \in Q \ldotp \;
  e_q = \energyupdate(e, u_q) \in \attackerwins(\attackerpos[\land]{p,q}) \; \land \;
  \psi_q \in \stratweak(\attackerpos[\land]{p,q}, e_q)
} {
  \hmlands\set{ \psi_q \mid q \in Q} \in \stratweak(\defenderpos{p,Q}, e)
}
$$
$$
\inferrule[positive conjunct]{
  \attackerpos[\land]{p,q} \gamemove{u} \attackerpos[\varepsilon]{p,Q'} \quad
  e' = \energyupdate(e, u) \in \attackerwins(\attackerpos[\varepsilon]{p,Q'}) \quad
  \chi \in \stratweak(\attackerpos[\varepsilon]{p,Q'}, e')
} {
  \hmleps\chi \in \stratweak(\attackerpos[\land]{p,q}, e)
}
$$
$$
\inferrule[negative conjunct]{
  \attackerpos[\land]{p,q} \gamemove{u} \attackerpos[\varepsilon]{q,P'} \quad
  e' = \energyupdate(e, u) \in \attackerwins(\attackerpos[\varepsilon]{q,P'}) \quad
  \chi \in \stratweak(\attackerpos[\varepsilon]{q,P'}, e')
} {
  \hmlneg \hmleps\chi \in \stratweak(\attackerpos[\land]{p,q}, e)
}
$$
$$
\inferrule[stable conj.]{
  \attackerpos[\varepsilon]{p,Q} \gamemove{u} \defenderpos[s]{p,Q'} \quad
  e' = \energyupdate(e, u) \in \attackerwins(\defenderpos[s]{p,Q'}) \quad
  \chi \in \stratweak(\defenderpos[s]{p,Q'}, e')
} {
  \chi \in \stratweak(\attackerpos[\varepsilon]{p,Q}, e)
}
$$
$$
\inferrule[stable conj. answer]{
  \defenderpos[s]{p,Q} \gamemove{u_q} \attackerpos[\land]{p,q} \quad
  Q \neq \varnothing \\
  \forall q \in Q \ldotp \;
  e_q = \energyupdate(e, u_q) \in \attackerwins(\attackerpos[\land]{p,q}) \; \land \;
  \psi_q \in \stratweak(\attackerpos[\land]{p,q}, e_q)
} {
  \hmlands \left(\set{\hmlneg\hmlobs{\tau}\hmltrue } \cup \set{ \psi_q \mid q \in Q }\right) \in \stratweak(\defenderpos[s]{p,Q}, e)
}
$$
$$
\inferrule[stable finishing]{
  \defenderpos[s]{p,\varnothing} \gamemove{u} \defenderpos{p,\varnothing} \quad
  e' = \energyupdate(e, u) \in \attackerwins(\defenderpos{p,\varnothing})
} {
  \hmlands \set{\hmlneg\hmlobs{\tau}\hmltrue } \in \stratweak(\defenderpos[s]{p,Q}, e)
}
$$
$$
\inferrule[branching conj.]{
  \attackerpos[\varepsilon]{p,Q} \gamemove{u} \defenderpos[\eta]{p,\alpha,p',Q',Q_\alpha} \quad
  e' = \energyupdate(e, u) \in \attackerwins(\defenderpos[\eta]{p,\alpha,p',Q',Q_\alpha}) \\
  \chi \in \stratweak(\defenderpos[\eta]{p,\alpha,p',Q',Q_\alpha}, e')
} {
  \chi \in \stratweak(\attackerpos[\varepsilon]{p,Q}, e)
}
$$
$$
\inferrule[branch. answer]{
  g_\mathrm{d} = \defenderpos[\eta]{p,\alpha,p',Q,Q_\alpha} \gamemove{u_\alpha} \attackerpos[\eta]{p',Q'} \gamemove{u'_\alpha} \attackerpos{p',Q'} \\
  e_\alpha = \energyupdate(\energyupdate(e, u_\alpha), u'_\alpha) \in \attackerwins(\attackerpos{p',Q'}) \quad
  \varphi_\alpha \in \stratweak(\attackerpos{p',Q'}, e_\alpha)\\
  \forall q \in Q \ldotp \;
  g_\mathrm{d} \gamemove{u_q} \attackerpos[\land]{p,q} \; \land \;
  e_q = \energyupdate(e, u_q) \in \attackerwins(\attackerpos[\land]{p,q}) \; \land \;
  \psi_q \in \stratweak(\attackerpos[\land]{p,q}, e_q)
} {
  \hmlands \left(\set{\hmlopt{\alpha} \varphi_\alpha } \cup \set{ \psi_q \mid q \in Q }\right) \in \stratweak(\defenderpos[\eta]{p,\alpha,p',Q,Q_\alpha}, e)
}
$$

Strategy formulas for the weak spectroscopy.
:::


::: {#lem-weak-spectroscopy-game-formulas}
If $e \in \attackerwins(\attackerpos{p,Q})$, then there is $\varphi \in \stratweak (\attackerpos{p,Q}, e)$ with $\expr[\literal{weak}](\varphi) \leq e$.{{<isb lemma Strategy_Formulsas weak_spectroscopy_game.winning_budget_implies_strategy_formula>}}
:::
:::proof

By induction over game positions $g$ and energies $e$ according to the inductive characterization of attacker winning budgets @prp-winning-budget-rules and with respect to the following property:

1. If $e \in \attackerwins(\attackerpos{p,Q})$,
  then there is $\varphi \in \stratweak(\attackerpos{p,Q}, e)$ with $\expr[\literal{weak}](\varphi) \leq e$;
2. If $e \in \attackerwins(\attackerpos[\varepsilon]{p,Q})$,
  then there is $\chi \in \stratweak(\attackerpos[\varepsilon]{p,Q}, e)$ with $\expr[\varepsilon](\chi) \leq e$;
3. If $e \in \attackerwins(\attackerpos[\land]{p,q})$,
  then there is $\psi \in \stratweak(\attackerpos[\land]{p,q}, e)$ with $\expr[\land](\psi) \leq e$;
4. If $e \in \attackerwins(\defenderpos{p,Q})$,
  then there is $\hmlands \Psi \in \stratweak(\defenderpos{p,Q}, e)$ with $\expr[\varepsilon](\hmlands \Psi) \leq e$;
5. If $e \in \attackerwins(\defenderpos[s]{p,Q})$,
  then there is $\hmlands \left(\set{\hmlneg\hmlobs{\tau}\hmltrue } \cup \Psi\right) \in \stratweak(\defenderpos[s]{p,Q}, e)$ with $\expr[\varepsilon](\hmlands \left(\set{\hmlneg\hmlobs{\tau}\hmltrue } \cup \Psi\right)) \leq e$;
6. If $e \in \attackerwins(\defenderpos[\eta]{p,\alpha,p',Q \setminus Q_\alpha,Q_\alpha})$,
  then there is $\hmlands \left(\set{\hmlopt{\alpha}\varphi' } \cup \Psi\right) \in \stratweak(\defenderpos[\eta]{p,\alpha,p',Q \setminus Q_\alpha,Q_\alpha}, e)$ with $\expr[\varepsilon](\hmlands \left(\set{\hmlopt{\alpha}\varphi' } \cup \Psi\right)) \leq e$. \qedhere
:::

::: {#lem-weak-spectroscopy-game-soundness}
If $\varphi \in \stratweak(\attackerpos{p,Q}, e)$,
then $\varphi$ distinguishes $p$ from $Q$.{{<isb lemma Strategy_Formulsas weak_spectroscopy_game.strategy_formulas_distinguish>}}
:::
:::proof
By induction over the derivation of $~\cdots \in \stratweak(g, e)$ according to @def-strategy-formulas-weak on the following inductive property:

1. If $\varphi \in \stratweak(\attackerpos{p,Q}, e)$,
  then $\varphi$ distinguishes $p$ from $Q$;
2. If $\chi \in \stratweak(\attackerpos[\varepsilon]{p,Q}, e)$ and $Q \stepweak Q$,
  then $\hmleps\chi$ distinguishes $p$ from $Q$;
3. If $\psi \in \stratweak(\attackerpos[\land]{p,q}, e)$,
  then $\psi$ distinguishes $p$ from $\set{ q }$;
4. If $\hmlands \Psi \in \stratweak(\defenderpos{p,Q}, e)$,
  then $\hmlands \Psi$ distinguishes $p$ from $Q$;
5. If $\hmlands \left(\set{\hmlneg\hmlobs{\tau}\hmltrue } \cup \Psi\right) \in \stratweak(\defenderpos[s]{p,Q}, e)$
  and $p$ is stable,
  then the stable conjunction $\hmlands \left(\set{\hmlneg\hmlobs{\tau}\hmltrue } \cup \Psi\right)$ distinguishes $p$ from $Q$;
6. If $\hmlands \left(\set{\hmlopt{\alpha}\varphi' } \cup \Psi\right) \in \stratweak(\defenderpos[\eta]{p,\alpha,p',Q \setminus Q_\alpha,Q_\alpha}, e)$,
    $p \step{\hmlopt\alpha} p'$ and $Q_\alpha \subseteq Q$,
  then the branching conjunction $\hmlands \left(\set{\hmlopt{\alpha}\varphi' } \cup \Psi\right)$ distinguishes $p$ from $Q$. \qedhere
:::

::: {#lem-weak-spectroscopy-game-completeness}
If $\varphi \in \hmlsrbb$ distinguishes $p$ from $Q$, then $\expr[\literal{weak}](\varphi) \in \attackerwins^{\gamespectroscopyw}(\attackerpos{p,Q})$.{{<isb lemma Distinction_Implies_Winning_Budgets weak_spectroscopy_game.distinction_implies_winning_budgets>}}
:::
:::proof
By mutual structural induction on $\varphi$, $\chi$, and $\psi$ with respect to the following claims:

1. If $\varphi \in \hmlsrbb$ distinguishes $p$ from $Q \neq \varnothing$,
  then $\expr[\literal{weak}](\varphi) \in \attackerwins(\attackerpos{p,Q})$;
2. If $\chi$ distinguishes $p$ from $Q \neq \varnothing$ and $Q$ is closed under $\stepweak$ (that is $Q \stepweak Q$),
  then $\expr[\varepsilon](\chi) \in \attackerwins(\attackerpos[\varepsilon]{p,Q})$;
3. If $\psi$ distinguishes $p$ from $q$,
  then $\expr[\land](\psi) \in \attackerwins(\attackerpos[\land]{p,q})$;
4. If $\hmlands \Psi$ distinguishes $p$ from $Q \neq \varnothing$,
  then $\expr[\varepsilon](\hmlands \Psi) \in \attackerwins(\defenderpos{p,Q})$;
5. If $\hmlands \set{ \hmlneg\hmlobs{\tau}\hmltrue } \cup \Psi$ distinguishes $p$ from $Q \neq \varnothing$
  and the processes in $Q$ are stable,
  then $\expr[\varepsilon](\hmlands \set{ \hmlneg\hmlobs{\tau}\hmltrue } \cup \Psi) \in \attackerwins(\defenderpos[s]{p,Q})$;
6. If $\hmlands \set{ \hmlopt{\alpha}\varphi' } \cup \Psi$ distinguishes $p$ from $Q$,
  then, for any $p \step{\hmlopt\alpha} p' \in \semantics{\varphi'}$ and $Q_\alpha = Q \setminus \semantics{\hmlobs{\alpha}\varphi'}{}{}$, $\expr[\varepsilon](\hmlands \set{ \hmlopt{\alpha}\varphi'\! } \cup \Psi) \in \attackerwins(\defenderpos[\eta]{p,\alpha,p'\!,Q \setminus Q_\alpha, Q_\alpha})$. \qedhere
:::

::: {#thm-weak-spectroscopy-game-characterization}
For all $N \in \notions^\literal{weak}$, $p \in \states$, $Q \in \powerset{\states}$, the following are equivalent:{{<isb theorem Silent_Step_Spectroscopy weak_spectroscopy_game.spectroscopy_game_correctness>}}

- There exists a formula $\varphi \in \hmlsrbb$ with price $\expr[\literal{weak}](\varphi) \leq N$ that distinguishes $p$ from $Q$.
- Attacker wins $\gamespectroscopyw^{\system}$ from $\attackerpos{p,Q}$ with $N$ (that is, $N \in \attackerwins^{\gamespectroscopyw^{\system}}(\attackerpos{p,Q})$).
:::

### Isabelle/HOL Formalization {#sec-isabelle-formalization}

@bbhlmm2025weakSpectroscopyIsabelle formalize the correctness result for the weak spectroscopy game in the interactive proof assistant Isabelle/HOL. 
The preceding definitions and facts have already linked to their respective Isabelle/HOL counterparts.
This subsection is devoted to providing some insights into the formalization.^[
  For questsions on the Isabelle/Isar language, consult “The Isabelle/Isar Reference Manual” [@wenzel2025isabelleIsar].
]
We take a tour through roughly hundred of the most interesting lines of the 6500 line theory development.

TODO: Maybe overview figure.

The weak spectroscopy game (@def-weak-spectroscopy-game) is modelled through a *parametric datatype* `('s, 'a) spectroscopy_position` for its positions and a *partial function* to determine the moves connecting them `spectroscopy_moves`.^[
  To be precise: “Partial function” here means that it returns `option`-values, which might either be `Some x` with an output or `None` otherwise.
  All functions in higher order logic are *total*.
]
The parameter types `'s` and `'a` capture the states $\states$ and actions $\actions$ of the transition system on which we operate.

```isabelle
datatype ('s, 'a) spectroscopy_position =
  Attacker_Immediate
    (attacker_state: ‹'s›) (defender_states: ‹'s set›)
| Attacker_Delayed
    (attacker_state: ‹'s›) (defender_states: ‹'s set›)
  [...]
| Defender_Branch
    (attacker_state: ‹'s›) (attack_action: ‹'a›)
    (attacker_state_succ: ‹'s›)
    (defender_states: ‹'s set›)
    (defender_branch_states: ‹'s set›)

fun spectroscopy_moves (in LTS_Tau) ::
  ‹('s, 'a) spectroscopy_position ⇒ ('s, 'a) spectroscopy_position
    ⇒ energy update option›
where
  delay: ‹spectroscopy_moves
    (Attacker_Immediate p Q) (Attacker_Delayed p' Q')
  = (if p' = p ∧ Q ↠S Q' then id_up else None)›
| [...]
```

The game itself is then built as a combination of the *locale* for transition systems with internal actions `LTS_Tau` (with a tranistion relation `step`)
and an `energy_game`, instantiated with the moves, a predicate `spectroscopy_defender` singling out defender positions, and the $\leq$-relation on 8-dimensional energies.

```isabelle
locale weak_spectroscopy_game =
  LTS_Tau step τ
  + energy_game ‹spectroscopy_moves› ‹spectroscopy_defender› ‹(≤)›
  for step :: ‹'s ⇒ 'a ⇒ 's ⇒ bool› (‹_ ↦_ _› [70, 70, 70] 80)
    and  τ :: 'a
```

Within the locale, we can establish our correctness results.

The strategy formulas $\stratweak$ appear as three mutually *inductive predicates*,
because the grammar of $\hmlsrbb$ (@def-hml-srbb) is implemented as three mutually recursive datatypes (one per nonterminal).

```isabelle
inductive
  strategy_formula :: ‹('s, 'a) spectroscopy_position
    ⇒ energy ⇒ ('a, 's) hml_srbb ⇒ bool›
and
  strategy_formula_inner :: ‹('s, 'a) spectroscopy_position
    ⇒ energy ⇒ ('a, 's) hml_srbb_inner ⇒ bool›
and
  strategy_formula_conjunct :: ‹('s, 'a) spectroscopy_position
    ⇒ energy ⇒ ('a, 's) hml_srbb_conjunct ⇒ bool›
where
  delay: ‹strategy_formula (Attacker_Immediate p Q) e (Internal χ)›
  if ‹∃Q'. spectroscopy_moves
        (Attacker_Immediate p Q) (Attacker_Delayed p Q') = id_up
      ∧ attacker_wins e (Attacker_Delayed p Q')
      ∧ strategy_formula_inner (Attacker_Delayed p Q') e χ›
| [...]
```

We then reproduce the induction of @lem-weak-spectroscopy-game-formulas on attacker winning budgets in the following lemma.
For this, the theory uses the inductive characterization of $\attackerwins$ in @prp-winning-budget-rules as definition for `attacker_wins`.

```isabelle
lemma winning_budget_implies_strategy_formula:
  assumes ‹attacker_wins e g›
  shows
    ‹case g of
        Attacker_Immediate p Q ⇒
        ∃φ. strategy_formula g e φ ∧ expressiveness_price φ ≤ e
      | Attacker_Delayed p Q ⇒
        ∃χ. strategy_formula_inner g e χ ∧ expr_pr_inner χ ≤ e
      | Attacker_Conjunct p q ⇒
        ∃ψ. strategy_formula_conjunct g e ψ
          ∧ expr_pr_conjunct ψ ≤ e
      | Defender_Conj p Q ⇒
        ∃χ. strategy_formula_inner g e χ ∧ expr_pr_inner χ ≤ e
      | Defender_Stable_Conj p Q ⇒
        ∃χ. strategy_formula_inner g e χ  ∧ expr_pr_inner χ ≤ e
      | Defender_Branch p α p' Q Qa ⇒
        ∃χ. strategy_formula_inner g e χ ∧ expr_pr_inner χ ≤ e
      | Attacker_Branch p Q ⇒
        ∃φ. strategy_formula
              (Attacker_Immediate p Q) (e - E 1 0 0 0 0 0 0 0) φ
          ∧ expressiveness_price φ ≤ e - E 1 0 0 0 0 0 0 0›
  using assms
proof (induction rule: attacker_wins.induct)
  [...]
```

The (mutual) induction on the formula structure to establish the distintiveness of $\stratweak$-formulas of @lem-weak-spectroscopy-game-soundness begins:

```isabelle
lemma strategy_formulas_distinguish:
  ‹(strategy_formula g e φ ⟶
      (case g of
        Attacker_Immediate p Q ⇒
          distinguishes_from φ p Q
      | Defender_Conj p Q ⇒
          distinguishes_from φ p Q
      | _ ⇒ True))
    ∧
    (strategy_formula_inner g e χ ⟶
      (case g of
        Attacker_Delayed p Q ⇒
          (Q ↠S Q) ⟶ distinguishes_from (Internal χ) p Q
      | Defender_Conj p Q ⇒
          hml_srbb_inner.distinguishes_from χ p Q
      | Defender_Stable_Conj p Q ⇒
          (∀q. ¬ p ↦ τ q)
          ⟶ hml_srbb_inner.distinguishes_from χ p Q
      | Defender_Branch p α p' Q Qa ⇒
          (p ↦a α p')
          ⟶ hml_srbb_inner.distinguishes_from χ p (Q∪Qa)
      | _ ⇒ True))
    ∧
    (strategy_formula_conjunct g e ψ ⟶
      (case g of
        Attacker_Conjunct p q ⇒
          hml_srbb_conj.distinguishes ψ p q
      | _ ⇒ True))›
proof (induction rule:
  strategy_formula_strategy_formula_inner_[...].induct)
  [...]
```

For the other direction, the following expresses @lem-weak-spectroscopy-game-completeness that attacks for formulas.

```isabelle
lemma distinction_implies_winning_budgets:
  assumes ‹distinguishes_from φ p Q›
  shows ‹attacker_wins (expressiveness_price φ)
                       (Attacker_Immediate p Q)›
```

The main theorem @thm-weak-spectroscopy-game-characterization is built by combining the previous facts and the upward-closedness of attacker winning budgets `win_a_upwards_closure`.
This is quite straightforward.
I reproduce it here in full to provide some idea of what Isar proofs look like.

```isabelle
theorem spectroscopy_game_correctness:
  shows
    ‹(∃φ. distinguishes_from φ p Q ∧ expressiveness_price φ ≤ e)
    ⟷ attacker_wins e (Attacker_Immediate p Q)›
proof
  assume
    ‹∃φ. distinguishes_from φ p Q ∧ expressiveness_price φ ≤ e›
  then obtain φ where φ_spec:
    ‹distinguishes_from φ p Q› ‹expressiveness_price φ ≤ e›
    by blast
  from distinction_implies_winning_budgets φ_spec(1) have
    ‹attacker_wins
      (expressiveness_price φ) (Attacker_Immediate p Q)› .
  thus ‹attacker_wins e (Attacker_Immediate p Q)›
    using win_a_upwards_closure φ_spec(2) by simp
next
  assume ‹attacker_wins e (Attacker_Immediate p Q)›
  with winning_budget_implies_strategy_formula have
    ‹∃φ. strategy_formula (Attacker_Immediate p Q) e φ
       ∧ expressiveness_price φ ≤ e›
    by force
  hence
    ‹∃φ. strategy_formula (Attacker_Immediate p Q) e φ
       ∧ expressiveness_price φ ≤ e›
    by blast
  thus ‹∃φ. distinguishes_from φ p Q ∧ expressiveness_price φ ≤ e›
    using strategy_formulas_distinguish by fastforce
qed
```

### Complexity

The complexity for spectroscopy using the weak game is quite comparable to the strong spectroscopy (@thm-strong-spectroscopy-complexity).

::: {#thm-weak-spectroscopy-complexity}
Given a transition system $\system$,
the spectroscopy problem for the $\notions^\literal{weak}$-spectrum can be solved by the game approach in exponential time and space with respect to the state space size $\relsize{\states}$.
:::
:::proof
According to @thm-weak-spectroscopy-game-characterization, we can solve the spectroscopy problem for the $\notions^\literal{weak}$-spectrum by deciding the winning budgets of the weak spectroscopy game ${\gamespectroscopyw}^{\system}$ on $\system=(\states,\actions,\step{})$.
We instantiate the winning budget complexity of @lem-declining-update-complexity for the case $d=8$ with the size of $\gamespectroscopyw$ according to @def-weak-spectroscopy-game.

The amount of attacker positions $\attackerpos{\dots}$ (and their delayed $\attackerpos[\varepsilon]{\dots}$ and branching $\attackerpos[\eta]{\dots}$ variants) is bounded by $\relsize{\states} \cdot 2^{\relsize{\states}}$.
The number of conjunction moves and defender conjunction positions $\defenderpos{\dots}$ is bounded by $\relsize{\states} \cdot 2^{\relsize{\states}}$, also for the stable variant $\defenderpos[d]{\dots}$.

However, for the branching conjunction moves, we find a bound of $\bigo{\relsize{\step{}} \cdot 2^{\relsize{\states}}}$ per attacker delayed position (which is a slight over-approximation).
Collectively, these moves reach $\bigo{\relsize{\step{}} \cdot 3^{\relsize{\states}}}$ defender branching positions $\defenderpos[\eta]{p, \alpha, p', Q \setminus Q_\alpha, Q_\alpha}$, due the three-coloring of states into $Q \setminus Q_\alpha$, $Q_\alpha$ and $\states \setminus Q$.

The maximal out-degree for attacker delayed positions of $\bigo{\relsize{\step{}} \cdot 2^{\relsize{\states}}}$ dominates that of other positions, in particular, of defender conjunction, stable conjunction, and branching positions with $\bigo{\relsize{\states}}$ outgoing options.

This amounts to $o_{\gamemoveblank_\nabla}$ in $\bigo{\relsize{\step{}} \cdot 2^{\relsize{\states}}}$ and to $\relsize{G_{\nabla}}$ in $\bigo{\relsize{\step{}} \cdot 3^{\relsize{\states}}}$.

Inserting the parameters in the time bounds of @lem-declining-update-complexity yields:
$$
\begin{array}{rlccccccc}
    & O( & o_{\gamemoveblank} & \cdot & \relsize{G}^{2d} & \cdot & (d^2 + \relsize{G}^{d-1} \cdot d) & ) \\
  = & O( & (\relsize{\step{}} \cdot 2^{\relsize{\states}}) & \cdot & (\relsize{\step{}} \cdot 3^{\relsize{\states}})^{2 \cdot 8} & \cdot & (8^2 + (\relsize{\step{}} \cdot 3^{\relsize{\states}})^{8-1} \cdot 8) & ) \\
  = & O( & \relsize{\step{}} \cdot 2^{\relsize{\states}} & \cdot & \relsize{\step{}}^{16} \cdot 3^{16\relsize{\states}} & \cdot & \relsize{\step{}}^7 \cdot 3^{7\relsize{\states}} & ) \\
  ⊆ & O( & \relsize{\step{}}^{24} & \cdot & 3^{24\relsize{\states}} & ).
\end{array}
$$
For space complexity, we arrive at $\bigo{ \relsize{\step{}}^8 \cdot 3^{8\relsize{\states}}}$.
:::

The exponential out-degree is due to branching conjunction moves.
That these would need exponentially many outgoing moves seems off:
These moves are for $\eta$- and branching bisimilarity,
which are known to be at the less expensive (sub-cubic @gjkw2017branching) end of equivalence problems in the spectrum.
De Frutos Escrig et al.'s -@ekw2017gamesBisimAbstraction branching bisimulation game is polynomially-sized.
Thus, a derived reachability game of the weak spectroscopy game for branching bisimilarity in the spirit of @sec-deriving-eq-games should too be polynomial in size if we apply clever optimizations.
The upcoming @sec-optimized-branching-conj will show how to simplify the spectroscopy game to achieve this reduction of size around branching conjunctions.

## Variants

### Optimization of Branching Conjunctions {#sec-optimized-branching-conj}

@bj2025silentStepSpectroscopyJournal show how to reduce the out-degree of the weak spectroscopy game to be linear.
For this, we reformulate the branching conjunction part of the game to be closer to the operational @def-branching-bisim of branching bisimilarity.
We can still solve the main spectroscopy problem, but lose some resolution about the number of nested conjunctions.

If we read @def-branching-bisim directly as a game, it differs from the branching conjunction moves in
@def-weak-spectroscopy-game, because the latter require the attacker to name as $Q_\alpha$ ex-ante which $q'$ to challenge directly and which ones only after the $\alpha$ step, and to have one continuation for the whole $Q_\alpha$ group.
The *simplified* weak spectroscopy game $\gamespectroscopywsimple$ in @fig-weak-spec-game-simplified rephrases this part to match the operational characterization.

:::{#fig-weak-spec-game-simplified fig-env='figure*' fig-pos='t'}

```tikz
%%| image-class: lightbox
\begin{adjustbox}{max width=\linewidth, center}
  \begin{tikzpicture}[>->,shorten <=1pt,shorten >=0.5pt,auto,node distance=2cm, rel/.style={dashed,font=\it},
    posStyle/.style={draw, inner sep=1ex,minimum size=1cm,minimum width=2cm,anchor=center,draw,black,fill=gray!5}]
      \node[posStyle, initial, initial text={}]
        (Att){$\attackerpos{p,Q}$};
      \node[posStyle]
        (AttDelay) [right = 1.6cm of Att] {$\attackerpos[\varepsilon]{p,Q_\varepsilon}$};
      \node[ellipse, draw, inner sep=1ex, minimum size=1cm,minimum width=2cm,fill=gray!5]
        (Def) [below = 3.2cm of AttDelay] {$\defenderpos{p,Q}$};
      \node[ellipse, draw, inner sep=1ex, minimum size=1cm,minimum width=2cm,fill=gray!5]
        (DefStab) [above right = 1.2cm of Def] {$\defenderpos[s]{p,\{ q\!\in\!Q_\varepsilon \mid q \nostep{\tau} \}}$};
      \node[ellipse, draw, inner sep=1ex, minimum size=1cm,minimum width=2cm,fill=gray!5]
        (DefBranch) [right = 1.5cm of AttDelay,yshift=-.7cm] {$\defenderpos[\eta]{p,\alpha,p',Q_\varepsilon}$};
      \node[posStyle]
        (AttBranchClause) [right=1.5cm of DefBranch] {$\attackerpos[\eta]{p,\alpha,p',q}$};
      \node[posStyle]
        (AttBranch) [above=1.2cm of AttBranchClause] {$\attackerpos[\eta]{p',Q'_\alpha}$};
      \node[posStyle]
        (AttConj) [below right = 1.2cm and .2cm of DefStab] {$\attackerpos[\land]{p,q}$};
      \node[posStyle, dashed, dash pattern={on 1.055045263157895mm off 0.993586315789474mm}, dash phase=0.405943684210525mm]
        (AttSwap) [right = 2cm of AttConj] {$\attackerpos[\varepsilon]{q,\{p' \mid p \stepweak p'\}}$};
      \node[posStyle, dashed, dash pattern={on 1.051033684210526mm off 0.989808421052632mm}, dash phase=0.423411578947368mm]
        (AttContinue) [above = 1.5cm of AttSwap] {$\attackerpos[\varepsilon]{p,\{q' \mid q \stepweak q'\}}$};
      \node[posStyle, dashed, dash pattern={on 1.03mm off 0.97mm}, dash phase=0.515mm]
        (AttObs) [above right = 1.5cm of AttBranch] {$\attackerpos{p^\prime,Q^\prime}$};
      \node[posStyle, dashed, ellipse, dash pattern={on 1.03mm off 0.97mm}, dash phase=0.515mm]
          (DefContinue) [below right = -.5cm and 1.5cm of AttBranch] {$\defenderpos{p',Q'_\alpha}$};
      % draw the bottom left corner nicely:
      \draw[-] (AttSwap.south west) ++(0.2pt,0.2pt) ++(0.07,0) -- ++(-0.07,0) -- ++(0,0.05);
      \draw[-] (AttContinue.south west) ++(0.2pt,0.2pt) ++(0.07,0) -- ++(-0.07,0) -- ++(0,0.05);
      \draw[-] (AttObs.south west) ++(0.2pt,0.2pt) ++(0.07,0) -- ++(-0.07,0) -- ++(0,0.05);

      \path
        (Att) edge
          node[label={-90:$\textcolor{gray}{\zerovec}$}] {$Q \stepweak Q_\varepsilon$} (AttDelay)
        (Att) edge[bend right=15]
          node[pos = .4, label={-170:$\textcolor{gray}{\zerovec}$}] {$Q = \varnothing$} (Def)
        (Att) edge[bend right=60]
          node[pos = .6, label={-155:$\textcolor{gray}{-\unitvec{5}}$}] {$Q \neq \varnothing$} (Def)
        (AttDelay) edge [out=155,in=115,looseness=4, pos=.6] node {$p \step{\tau} \ldots\; \textcolor{gray}{\zerovec}$} (AttDelay)
        (AttDelay.north) edge[bend left=28]
          node[pos=.3, align=center, label={[label distance=0.0cm]-30:$\textcolor{gray}{-\unitvec{1}}$}] {$p\step{a}p'$\\ $Q_\varepsilon \step{a} Q'$} (AttObs)
        (AttDelay) edge
          node[label={[label distance=0cm]-180:$\textcolor{gray}{\zerovec}$}] {$Q = Q_\varepsilon$} (Def)
        (AttDelay) edge
          node[pos=.87,label={[label distance=0.2cm]-177:$\textcolor{gray}{\zerovec}$}] {$p \nostep{\tau}$} (DefStab)
        (AttDelay) edge
          node[align=center,pos=0.3,label={[label distance=0.1cm]-100:$\textcolor{gray}{\zerovec}$}] {$p \step{\hmlopt\alpha} p'$\\$Q_\varepsilon \neq \varnothing$} (DefBranch)
        (Def) edge[bend right=17]
          node[pos=.85, label={[label distance=0.1cm]-100:$\textcolor{gray}{-\unitvec{3}}$}] {$q \in Q$} (AttConj)
        (DefStab) edge[bend right=10]
          node[align=right, pos=.85, label={[label distance=0.3cm]-170:$\textcolor{gray}{-\unitvec{4}}$}] {\mbox{}\hspace*{-1.5em}$q \in Q_\varepsilon$\\[2pt]\mbox{}\hspace*{-1.5em}$q \nostep{\tau}$} (AttConj)
        (DefStab) edge[bend left=10]
          node[align=right, pos=.2, label={[label distance=0.3cm]165:$\textcolor{gray}{-\unitvec{4}-\unitvec{8}}$}] {\mbox{}\hspace*{-3em}$\varnothing = Q = \mbox{}$\\[2pt]\mbox{}\hspace*{-3em}$\set{ q\!\in\!Q_\varepsilon \mid q \nostep{\tau} }\;$} (Def)
        (AttConj) edge[bend left=10]
          node[label={[label distance=0.0cm]-75:$\textcolor{gray}{\updmin{1,6},0,0,0,0,0,0,0}$}] {} (AttContinue)
        (AttConj) edge[bend right=15]
          node[below] {$\textcolor{gray}{\updmin{1,7},0,0,0,0,0,0,-1}$} (AttSwap)
        (DefBranch) edge
          node[label={[label distance=0.1cm]270:$\textcolor{gray}{-\unitvec{2}-\unitvec{3}}$}] {$q \in Q_\varepsilon$} (AttBranchClause)
        (AttBranchClause) edge
          node[pos=.55, align=right] {$\{q\} \step{\hmlopt{\alpha}} Q'_\alpha$ \\
                                      $\textcolor{gray}{\updmin{1,6},0,0,0,0,0,0,0}$} (AttBranch)
        (AttBranchClause) edge[bend left=5]
          node[pos=.4, swap, align=center] {$\textcolor{gray}{\zerovec}$} (AttConj)
        (AttBranch) edge[pos=.6]
          node[align=center, pos=0.4]{$Q'_\alpha \stepweak Q'$ \\
                            $\textcolor{gray}{-\unitvec{1}-\unitvec{3}}$} (AttObs)
        (AttBranch) edge[bend left=30, pos=.5]
          node[label={0:$\textcolor{gray}{-\unitvec{1}-\unitvec{5}}$}]{$Q'_\alpha \neq \varnothing$} (DefContinue)
        (AttBranch) edge[bend right=30, swap, pos=.6]
          node[label={0:$\textcolor{gray}{-\unitvec{1}}$}]{$Q'_\alpha = \varnothing$} (DefContinue);
  \end{tikzpicture}
\end{adjustbox}
```

Schematic *simplified* weak spectroscopy game $\gamespectroscopywsimple$.
:::

Note that the immediate branching accounting/finishing moves lead to defender conjunction positions,
while the late branching accounting move skips it, but still charges for the conjunction by an additional energy update of $-\unitvec{3}$.

The simplified game part encodes nested conjunctions of the form $\hmlands\set{ \hmlopt{\alpha} \mathhl{\hmlands \Psi'}, \psi_1, \ldots}$ or the cheaper form $\hmlands\set{ \hmlopt{\alpha} \mathhl{\hmleps \hmlands \Psi'}, \psi_1, \ldots}$.
The $\Psi'$ are the formulas from after branching observation moves, while the $\psi_i$ come from the resets.

In @bj2025silentStepSpectroscopyJournal we discuss this game's strategy formulas in detail and prove its correctness, resulting in the following theorem.^[
  Credit for the proof details goes to David Jansen.
]

::: {#thm-weak-spectroscopy-game-simplified-characterization}
Let the simplified weak notions $\widehat{\notions}^\literal{weak}$ be the union of $\nats \times \set{ 0 } \times \nats^6$
and $\nats \times \set{ \infty } \times \set{ 0, \infty} \times \nats \times \set{ 0, \infty} \times \nats^3$.
Let simplified expressiveness prices be defined by rounding up the prices of @def-weak-spectrum:
$\exprabst[\literal{weak}] = \min \set{ N \in \widehat{\notions}^\literal{weak} \mid N \geq \expr[\literal{weak}](\varphi) }$.
Then, on the simplified weak game $\gamespectroscopywsimple$ of @fig-weak-spec-game-simplified:

For all $N \in \widehat{\notions}^\literal{weak}$, $p \in \states$, $Q \in \powerset{\states}$, the following are equivalent:

- There exists a formula $\varphi \in \hmlsrbb$ with price $\exprabst[\literal{weak}](\varphi) \leq N$ that distinguishes $p$ from $Q$.
- Attacker wins $\gamespectroscopywsimple^{\system}$ from $\attackerpos{p,Q}$ with $N$ (that is, $N \in \attackerwins^{\gamespectroscopywsimple^{\system}}(\attackerpos{p,Q})$).
:::

Complexitywise, for the simplified game, $\gamespectroscopywsimple$,
we have just
$\relsize{G_{\swclever}} \in \bigo{ \relsize{\step{}} \cdot 2^{\relsize{\states}}}$
and also $o_{\swclever} \in \bigo{ \relsize{\step{}}}$.
Following the same argument as in @thm-weak-spectroscopy-complexity,
deciding the whole game still has exponential time complexity of
$\bigo{\relsize{\step{}} \cdot
(\relsize{\step{}} \cdot 2^{\relsize{\states}})^{16} \cdot
(\relsize{\step{}} \cdot 2^{\relsize{\states}})^{7}}
= \bigo{ \relsize{\step{}}^{24} \cdot 2^{23 \relsize{\states}} }
$,
and space complexity
$\bigo{ \relsize{\step{}}^8 \cdot 2^{8 \relsize{\states}} }$.
But these are much lower bounds than in the original game $\gamespectroscopyw$.
TODO: Forward-pointer to benchmarks.

Moreover, we can again use the trick to work with *flattened energies*, according to @lem-declining-update-complexity-flattened.
After all, $\gamespectroscopywsimple$ itself is only correct with respect to a simplified spectrum according to @thm-weak-spectroscopy-game-simplified-characterization.
If we bound the energy lattice to $\{0, 1, \infty\}^8$ the size of Pareto fronts is decoupled from the game size.
This further improves space complexity to
$\bigo{ \relsize{\step{}} \cdot 2^{\relsize{\states}} }$ and overall time complexity to
$\bigo{ \relsize{\step{}} \cdot
(\relsize{\step{}} \cdot 2^{\relsize{\states}})^{16} } =
\bigo{ \relsize{\step{}}^{17} \cdot 2^{16 \relsize{\states}} }$.

### Covering Revivals and Decorated Traces

In the weak spectrum of @sec-weak-spectrum-quantities, we left out the notions of revivals, failure traces, and ready traces, we had included in the strong spectrum of @sec-strong-notions.
Their stable variants are relevant to the CSP community [see @roscoe2009revivalsHierarchy].

These notions need to differentiate heights between a deepest “revival” conjunct and other positive conjuncts.
Thus, these equivalences need an additional dimension for $\expr$-measurements, and an even more sophisticated handling of conjunctions in the game.

@fig-weak-spec-game-revivals illustrates how one could incorporate revivals into stable conjunctions, analogously to @sec-strong-spectrum.
Note, that we now have two kinds of conjunct positions: for the stable non-revival context and for the other contexts.
The maximal depth conjuncts is still managed by dimension 6.
But stable non-revival conjuncts receive a new dedicated dimension 7 to bound their depth.
The previous dimensions 7 and 8 now come 8th and 9th.

:::{#fig-weak-spec-game-revivals fig-env='figure*' fig-pos='t'}

```tikz
%%| image-class: lightbox
```tikz
\definecolor{etaColor}{RGB}{100,100,100}%{cmyk}{0.8, 0, 0, 0.3}
\definecolor{stabilityColor}{cmyk}{0, 0.7, 0.7, 0.4}
\begin{adjustbox}{max width=\textwidth, center}
  \begin{tikzpicture}[>->,shorten <=1pt,shorten >=0.5pt,auto,node distance=2cm, rel/.style={dashed,font=\it},
    posStyle/.style={draw, inner sep=1ex,minimum size=1cm,minimum width=2cm,anchor=center,draw,black,fill=gray!5}]
      \node[posStyle, initial, initial text={}]
        (Att){$\attackerpos{p,Q}$};
      \node[posStyle]
        (AttDelay) [right = 1.6cm of Att] {$\attackerpos[\varepsilon]{p,Q_\varepsilon}$};
      \node[ellipse, draw, inner sep=1ex, minimum size=1cm,minimum width=2cm,fill=gray!5]
        (Def) [below = 2.2cm of AttDelay] {$\defenderpos{p,Q}$};
      \node[ellipse, draw=stabilityColor, fill=stabilityColor!3, inner sep=1ex, minimum size=1cm,minimum width=2cm]
        (DefStab) [above right = 2cm and .1 of AttDelay] {$\defenderpos[s]{p,Q_s \setminus Q_*, Q_*}$};
      \node[ellipse, draw=etaColor, inner sep=1ex, minimum size=1cm,minimum width=2cm,fill=etaColor!3]
        (DefBranch) [below right = 1.1cm and 1.5cm of AttDelay] {$\dots$};
      \node[posStyle]
        (AttConj) [below right = 1.2cm and 0.1cm of DefBranch] {$\attackerpos[\land]{p,q}$};
      \node[posStyle, dashed, dash pattern={on 1.055045263157895mm off 0.993586315789474mm}, dash phase=0.405943684210525mm]
        (AttSwap) [right = 2cm of AttConj] {$\attackerpos[\varepsilon]{q,\set{p' \mid p \stepweak p'}}$};
      \node[posStyle, dashed, dash pattern={on 1.051033684210526mm off 0.989808421052632mm}, dash phase=0.423411578947368mm]
        (AttContinue) [above = 1cm of AttSwap] {$\attackerpos[\varepsilon]{p,\set{q' \mid q \stepweak q'}}$};
      \node[posStyle, dashed, dash pattern={on 1.03mm off 0.97mm}, dash phase=0.515mm]
        (AttObs) [right = 7cm of AttDelay] {$\attackerpos{p^\prime,Q^\prime}$};
      \node[posStyle, draw=stabilityColor, fill=stabilityColor!3]
        (AttConjStab) [right = 2cm of DefStab] {$\attackerpos[s]{p,q}$};
      \node[posStyle, dashed, dash pattern={on 1.055045263157895mm off 0.993586315789474mm}, dash phase=0.405943684210525mm]
        (AttSwapStab) [right = 2cm of AttConjStab] {$\attackerpos[\varepsilon]{q,\set{p}}$};
      \node[posStyle, dashed, dash pattern={on 1.051033684210526mm off 0.989808421052632mm}, dash phase=0.423411578947368mm]
        (AttContinueStab) [above = 1cm of AttSwapStab] {$\attackerpos[\varepsilon]{p,\set{q}}$};
      
      % draw the bottom left corner nicely:
      \draw[-] (AttSwap.south west) ++(0.2pt,0.2pt) ++(0.07,0) -- ++(-0.07,0) -- ++(0,0.05);
      \draw[-] (AttContinue.south west) ++(0.2pt,0.2pt) ++(0.07,0) -- ++(-0.07,0) -- ++(0,0.05);
      \draw[-] (AttObs.south west) ++(0.2pt,0.2pt) ++(0.07,0) -- ++(-0.07,0) -- ++(0,0.05);

      \path
        (Att) edge
          node[label={-90:$\textcolor{gray}{\zerovec}$}] {$Q \stepweak Q_\varepsilon$} (AttDelay)
        (Att) edge[bend right=15]
          node[pos = .4, label={-150:$\textcolor{gray}{\zerovec}$}] {$Q = \varnothing$} (Def)
        (Att) edge[bend right=60]
          node[pos = .6, label={-130:$\textcolor{gray}{-\unitvec{5}}$}] {$Q \neq \varnothing$} (Def)
        (AttDelay) edge [out=155,in=115,looseness=4, pos=.6] node {$p \step{\tau} \ldots\; \textcolor{gray}{\zerovec}$} (AttDelay)
        (AttDelay) edge[bend right=12]
          node[pos=.42, align=center, label={[label distance=0.0cm]-60:$\textcolor{gray}{-\unitvec{1}}$}] {$p\step{a}p'$\\ $Q_\varepsilon \step{a} Q'$} (AttObs)
        (AttDelay) edge
          node[pos =.3, label={[label distance=0cm]-180:$\textcolor{gray}{\zerovec}$}] {$Q = Q_\varepsilon$} (Def)
        (AttDelay.north) edge[draw=stabilityColor]
          node[pos=.7, align=center, label={[label distance=0.1cm]-10:$\textcolor{stabilityColor!50}{\zerovec}$}] {
            $\textcolor{stabilityColor}{p \nostep{\tau}}$ \\
            $\textcolor{stabilityColor}{Q_* \subseteq Q_s = \set{q \in Q_\varepsilon \mid q \nostep{\tau}}}$
          } (DefStab)
        (AttDelay) edge[draw=etaColor]
          node[pos=.65,align=center] {$\dots$} (DefBranch)
        (Def) edge[bend right=17]
          node[pos=.85, label={[label distance=0.1cm]-100:$\textcolor{gray}{-\unitvec{3}}$}] {$q \in Q$} (AttConj)
        (DefStab) edge[draw=stabilityColor]
          node[align=center, pos=.6, label={[label distance=-0.1cm]92:$\textcolor{stabilityColor!50}{0,0,0,-1,0,0,\updmin{6,7},0,0}$}] {\mbox{}\hspace*{-1.5em}$\textcolor{stabilityColor}{q \in Q_s \setminus Q_*}$} (AttConjStab)
        (DefStab) edge[draw=stabilityColor, bend left=15]
          node[align=right, pos=.2, label={[label distance=0.1cm]180:$\textcolor{stabilityColor!50}{-\unitvec{4}-\unitvec{9}}$}] {$\textcolor{stabilityColor}{Q = \varnothing}$} (Def)
        (DefStab) edge[draw=stabilityColor, bend right=5]
          node[pos=.7, align=left] {$\textcolor{stabilityColor}{Q' = Q_*, p' = p}$\\$\textcolor{stabilityColor!50}{\updmin{1,6},0,0,-1,0,0,0,0,0}$} (AttObs)
        (AttConj) edge[bend left=10]
          node[label={[label distance=0.0cm]-75:$\textcolor{gray}{\updmin{1,6},0,0,0,0,0,0,0,0}$}] {} (AttContinue)
        (AttConj) edge[bend right=15]
          node[below] {$\textcolor{gray}{\updmin{1,8},0,0,0,0,0,0,0,-1}$} (AttSwap)
        (DefBranch) edge[draw=etaColor, dashed]
          node[pos=.5] {$\dots$} (AttObs)
        (DefBranch) edge[draw=etaColor]
          node[pos=.5] {$\dots$} (AttConj)
        (AttConjStab) edge[bend left=10, draw=stabilityColor]
          node[label={[label distance=0.0cm]-75:$\textcolor{gray}{\updmin{1,\textcolor{stabilityColor}{7}},0,0,0,0,0,0,0,0}$}] {} (AttContinueStab)
        (AttConjStab) edge[bend right=15, draw=stabilityColor]
          node[below] {$\textcolor{gray}{\updmin{1,8},0,0,0,0,0,0,0,-1}$} (AttSwapStab);
  \end{tikzpicture}
\end{adjustbox}
```

Modifying stable conjunction moves to include revivals (brick red part).
The branching bisimulation part is left out.
:::

Of course, one could again use the “look-ahead trick” of @sec-clever-strong-spectro to reduce the number of partitions to consider.

In fact, the implementation on {{<equivio>}} does employ this trick, thereby actually using a 9-dimensional game with richer stable conjunctions.

### Extending to Other Equivalences

- Handling Congruences
- Divergence
- Coupled simulation

## Tackling Our Case Studies

### Parallelizing Compilers {#sec-solution-parallelizing-compilation}

```ccs
Compute = computeA!Compute + computeB!Compute

PSeq = (
    Compute 
  | computeA.printOutput!printA!
    + computeB.printOutput!printB!
) \ {computeA, computeB}

PPara = (
    Compute
  | printOutput!join!
  | computeA.join.printA!
    + computeB.join.printB!
) \ {computeA, computeB, join}

@compareSilent PSeq, PPara

@snip "---- layout ----"

PSeq(main, x=80, y=69)
PPara(main, x=587, y=55)
"(Compute | 0 | 0) \ {computeA,computeB,join}"(x=505, y=382)
"(Compute | 0 | printB!0) \ {computeA,computeB,join}"(x=588, y=323)
"(Compute | 0) \ {computeA,computeB}"(x=179, y=366)
"(Compute | printA!0) \ {computeA,computeB}"(x=128, y=297)
"(Compute | printB!0) \ {computeA,computeB}"(x=259, y=283)
```

### Peterson's Mutual Exclusion

```ruby
ready = {"A": false, "B": false}
turn  = "A"

def process(ownId, otherId):
  while true:
    ready[ownId] = true
    turn = otherId
    
    do # wait...
    until (ready[otherId] == false || turn == ownId)
      
    print "enter critical #{ownId}"
    # critical section goes here.
    print "leave critical #{ownId}"
    ready[ownId] = false

process("A", otherId = "B") || process("B", otherId = "A")
```

## Discussion

- Mention to add back in strong observations