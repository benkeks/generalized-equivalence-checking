---
toc-title: "Chapter 6"
---

# Recharting the Weak Silent-Step Spectrum {#sec-weak-spectrum}

::: {.content-visible when-format="html"}
{{< include style/macros-html.md >}}
{{< include style/macros.md >}}
:::

::::{#related-6 .column-margin}
`\vspace{-2em}`{=latex}
{{< paragraph_heading "Related publications." >}}
This chapter is based on parts of @bj2025silentStepSpectroscopyJournal and @bm2024contrasimilarityInfComp.
For a fuller presentation of the spectrum of weak equivalences itself, @glabbeek1993ltbt is the authoritative work.
A gentler introduction to key concepts is provided by @sangiorgi2012.
::::

Virtually all *applications* of concurrency theory use *weak* behavioral equivalences, which can equate systems in spite of differing internal activity.
Therefore, it matters that we can lift our approach to also account for such equivalences.

This chapter serves as a *second round of preliminaries* and context needed for the spectrum of *weak equivalences*.
Some things are more complicated in the weak spectrum.
For instance, we will be discussing eight weak forms of bisimilarity.

At its heart, this chapter aims to find a modal spectrum characterization, where HML grammar and pricing are designed in such a way that we can apply the spectroscopy approach in the following @sec-weak-spectorscopy.
The *north pole of the weak spectrum* will be the logic of stability-respecting branching bisimilarity.

This is where the thesis arrives at “The Linear Time–Branching Time Spectrum&nbsp;II: The Semantics of Sequential Systems with Silent Moves” [@glabbeek1993ltbt], already featured in @fig-ltbts2-paper of the introduction.
We will reframe a big chunk of it to fit our modal framework in @fig-weak-spectrum.
In particular, we try to be much more restricted in the use of special modalities than the presentation in @glabbeek1993ltbt.

::: {#idea-weak-hml .callout-idea .callout-tip}
#### Taking a subset to weaken HML

We can use a subset of Hennessy--Milner logic to characterize most interesting weak equivalences.
:::

@sec-weak-equivalences-in-general provides some preliminaries and defines the $\hml$ subset $\hmlsrbb$, which will correspond to the notion of stability-respecting branching bisimilarity.
@sec-case-stduies-other-eqs illustrates the use of some of the weak notions through small case studies from compiler verification and concurrency theory.
In @sec-weak-spectrum-quantities, we unfold the hierarchy of modal characterizations for the weak spectrum.

::::{.content-visible when-format="html" .column-margin}
{{< contents related-6 >}}
::::

## Weak Equivalences in General {#sec-weak-equivalences-in-general}

For practical problems, the equivalences we have discussed so far usually are *too strong*.
They notice where in a process the *internal action* $\tau$ happens, that is: 
$$\literal{a} \nbeq{} \ccsprefix{\tau} \literal{a} \nbeq{} \ccsprefix{\tau} \ccsprefix{\tau} \literal{a} \nbeq{} \ccsprefix{\tau}\ccsprefix{\literal{a}} \tau  \nbeq{} \ccsprefix{\literal{a}} \tau$$
For real-world models, we want equivalences to disregard such kinds of internal behavior as “silent”  when comparing processes, such that:
$$\literal{a} \beq{} \ccsprefix{\tau} \literal{a} \beq{} \ccsprefix{\tau} \ccsprefix{\tau} \literal{a} \beq{} \ccsprefix{\tau}\ccsprefix{\literal{a}} \tau  \beq{} \ccsprefix{\literal{a}} \tau$$
Equivalences with this feature are called *weak*, alluding to the fact that they are less distinctive than the “strong” equivalences that treat $\tau$ like any other action.

@fig-simple-weak-eq shows the (strong-bisimulation-minimal) transition system of the example processes we would like to equate in weak equivalences.

:::{#fig-simple-weak-eq .column-margin}
```tikz
\begin{tikzpicture}[auto,node distance=1.5cm,
    rel/.style={dashed,blue}]
  \node[state] (tta){$\ccsprefix{\tau}\ccsprefix{\tau}\literal{a}$};
  \node[state, below of=tta] (ta){$\ccsprefix{\tau}\literal{a}$};
  \node[state, below of=ta] (a){$\literal{a}$};
  \node[state, node distance=2.5cm, below of=a] (Null){$\ccsnull$};
  \node[state, right of=tta] (tat){$\ccsprefix{\tau}\ccsprefix{\literal{a}}\tau$};
  \node[state, below of=tat] (at){$\ccsprefix{\literal{a}}\tau$};
  \node[state, node distance=2.5cm, below of=at] (t){$\tau$};
  \path[->]
    (tta)
      edge node[swap] {$\tau$} (ta)
    (ta)
      edge node[swap] {$\tau$} (a)
    (a)
      edge[thick] node[swap] {$\literal{a}$} (Null)
    (tat)
      edge node {$\tau$} (at)
    (at)
      edge[thick] node {$\literal{a}$} (t)
    (t)
      edge node {$\tau$} (Null);
  \begin{pgfonlayer}{bg}
    \draw[blue, double, dotted, double distance=16mm, cap=round]
      (tta.center)--(tat.center)--(at.center)--(a.center)--(ta.center)--(tta.center);
    \draw[blue, double, dotted, double distance=16mm, cap=round]
      (Null.center)--(t.center);
  \end{pgfonlayer}
\end{tikzpicture}
```

Processes we would like to equate in weak equivalences.
:::

The basic principle is that weak equivalences should maintain that some internal behavior happening before or after a visible action does not make a difference from the point of view of an observer.
But this idea leads into a lot of fine points.

### Silent Transitions {#sec-silent-transitions}

To help us with our abstractions of weak activity, we use some additional notation:

:::{#def-transition-systems-with-silent-steps}
#### Transition systems with internal activity

For transition systems $\system=(\states,\actions,\step{})$ with an *internal action* $\tau \in \actions$,
we call $\step{\tau}$-transitions “silent” and define the following special transition relations plus HML modalities, where $\actionsvis \defeq \actions \setminus \set{\tau}$ denotes “visible” actions:

Internal transition relation
: $p \stepweak p'$ iff $p \step{\tau}^* p'$, where $\step{\tau}^*$ is the reflexive transitive closure of silent steps.{{<isb inductive LTS LTS_Tau.silent_reachable>}}
: The *internal* modality $\hmleps \varphi$ has $p \in \semantics{\hmleps\varphi}$ iff there is $p' \in \semantics{\varphi}$ with $p \stepweak p'$.

Soft transition relation
: $p \stepsoft{\alpha} p'$ iff $p \step{\alpha} p'$, or if $\alpha = \tau$ and $p = p'$.{{<isb abbreviation LTS LTS_Tau.soft_step>}}
: We accompany it by the *soft* observation modality $\hmlsoft{\alpha} \varphi$ with $p \in \semantics{\hmlsoft{\alpha}\varphi}$ iff there is $p' \in \semantics{\varphi}$ with $p \stepsoft{\alpha} p'$.

Weak word steps
: $p \stepweakword{\vec w} p'$ for $\vec w = (w_1 w_2 \dots w_n) \in \actionsvis^*$ iff there is a path $p_i \stepweak\step{w_i} p_{i+1}$ for $i < n$ with $p_0 = p$ and $p_n \stepweak p'$.

Stable state
: A state $p$ is called *stable* iff $p \nostep{\tau}$.{{<isb abbreviation LTS LTS_Tau.stable_state>}}
: In HML, we can use $\hmlneg\hmlobs{\tau}\hmltrue$ to express stabilization.

Divergent state
: A state $p$ is called *divergent* iff it allows an infinite sequence of $\tau$-transitions, $p \step{\tau}^\omega$.

Again, we implicitly lift the relations to sets of states, that is for instance, $P \stepweak P'$ (with $P, P' \subseteq \states$) iff $P' = \set{ p' \in \states \mid \exists p \in P \ldotp p \stepweak p'}$.
:::

In upcoming definitions and facts, we use the convention that $\alpha$ continues to stand for elements of $\actions$, while $a$ comes from $\actionsvis = \actions \setminus \set{\tau}$.

:::{#exm-weak-transitions}
#### Weak steps

In @fig-simple-weak-eq, the state $\ccsprefix{\tau}\ccsprefix{\tau}\literal{a}$ allows the following weak steps:

- Soft $\tau$-transitions to itself and its immediate successor:
  $\ccsprefix{\tau}\ccsprefix{\tau}\literal{a} \stepsoft{\tau} \ccsprefix{\tau}\ccsprefix{\tau}\literal{a}$ and 
  $\ccsprefix{\tau}\ccsprefix{\tau}\literal{a} \stepsoft{\tau} \ccsprefix{\tau}\literal{a}$.
  (But $\ccsprefix{\tau}\ccsprefix{\tau}\literal{a} \nostep{\tau} \ccsprefix{\tau}\ccsprefix{\tau}\literal{a}$!)
- The internal transition $\ccsprefix{\tau}\ccsprefix{\tau}\literal{a} \stepweak \literal{a}$.
  (On top of the internal transitions due to ${\stepsoft{\tau}} \subseteq {\stepweak}$.)
- The weak word transition $\ccsprefix{\tau}\ccsprefix{\tau}\literal{a} \stepweakword{\literal{a}} \ccsnull$.
- Starting in $\literal{a}$, all kinds of $\literal{a}$-steps coincide:
  $\literal{a} \stepweakword{\literal{a}} \ccsnull$ and
  $\literal{a} \stepsoft{\literal{a}} \ccsnull$ just as
  $\literal{a} \step{\literal{a}} \ccsnull$.

$\literal{a}$, $\ccsprefix{\tau}\literal{a}$ and $\ccsnull$ are stable.
No state is divergent.
:::

:::{#rem-expressiveness-weak-hml}
#### Just notation

Note that the notation for $\hml$ operators $\hmleps \dots$ and $\hmlsoft{\alpha}\dots$ introduced in @def-transition-systems-with-silent-steps does not affect the expressiveness of $\hml$.
To see why, assume notation for disjunction $\bigvee_{i \in I} \psi_i \defeq \hmlneg\hmland{i}{I} \hmlneg\psi_i$, and for $n$-time application of an operator.
Then, $\semantics{\hmleps\varphi} = \semantics{\bigvee_{n \in \nats} \hmlobs{\tau}^n \varphi}$.
Also, $\semantics{\hmlsoft{\tau}\varphi} = \semantics{\bigvee\set{\varphi, \hmlobs{\tau}\varphi}}$ and $\semantics{\hmlsoft{a}\varphi} = \semantics{\hmlobs{a}\varphi}$.

On the other hand, note that our infinitary HML cannot express proper divergence $p \step{\tau}^\omega$ on infinitary systems.
This would demand an “observation of infinite depth.”
This clashes with the well-foundedness, which is implied by the recursive grammar of @def-hml.
On finite systems, however, the possibility of unbounded $\tau$-trees and infinite $\tau$-chains coincides, and divergence can be captured modally by $\hmland{n}{\nats} \hmlobs{\tau}^n$.
:::

### Weak Traces and Weak Bisimulation

It is quite straightforward how to lift traces from the strong setting of @def-traces and @def-trace-eq to the weak setting:
Allow internal $\stepweak$-behavior in between.

::: {#def-weak-traces}
#### Weak traces, preorder, and equivalence

The set of *weak traces* of a state $\wtraces{p} \subseteq \actionsvis^*$ is defined as $\vec w \in \wtraces{p}$ iff there is $p'$ such that $p \stepweakword{\vec w} p'$.{{<isb abbreviation LTS LTS_Tau.weak_traces>}}^[
  The Isabelle theory has a slightly different definition that also allows $\tau$s in the trace words, which do not necessary stand for proper $\step{\tau}$-steps.
]

Two states are *weakly trace-preordered*, $p \bpreord{WT} q$, if $\wtraces{p} ⊆ \wtraces{q}$.{{<isb definition LTS LTS_Tau.weakly_trace_preordered>}}
As before, if both directions are maintained, the states are called *weakly trace-equivalent*, $p \beq{WT} q$.
:::

The blue groups of states in @fig-simple-weak-eq are weakly trace equivalent.
Moreover, they also are related by the stronger notions of weak bisimulation and simulation.

::: {#def-weak-bisimilarity}
#### Weak simulation, preorder and equivalences

A relation, $\rel R ⊆ \states × \states$, is called a *weak simulation* if, for each $(p, q) ∈ \rel R$,

- if $p \step a p'$ with $a ∈ \actionsvis$, there is a $q'$ with $q \stepweak\step{a}\stepweak q'$ and $(p', q') ∈ \rel R$; and
- if $p \step \tau p'$, there is a $q'$ with $q \stepweak q'$ and $(p', q') ∈ \rel R$.

Weak simulation preorder, weak simulation equivalence and weak bisimilarity analogously to @def-bisimilarity:

- $p$ is *weakly simulated by* $q$, $p \bpreord{WS} q$, iff there is a weak simulation $\rel R$ with $(p, q) ∈ \rel R$.
- $p$ is *weakly similar* to $q$, $p \beq{WS} q$, iff $p \bpreord{WS} q$ and $q \bpreord{WS} p$.
- $p$ is *weakly bisimilar* to $q$, $p \beq{WB} q$, iff there is a *symmetric* weak simulation $\rel R$ (i.e. $\rel R = \inverse{\rel R}$) with $(p, q) ∈ \rel R$.
:::

All three weak equivalences maintain that the small example processes of the introduction to @sec-weak-equivalences-in-general are equal.

::: {#exm-phil-weak-eqs}
#### Weakly simulated philosophers

For the processes of @exm-ts (repeated in @fig-ts-determinism-repeated), the weak traces would be $\wtraces{\literal{P}} = \set{\emptyword, \literal{a}, \literal{b}} = \wtraces{\literal Q}$.
Consequently, $\literal P$ and $\literal Q$ are weakly trace-equivalent, $\literal P \beq{WT} \literal Q$.

In @exm-phil-sim, we have observed that the two processes are not (strongly) similar because $\literal Q \nbpreord{S} \literal P$ due to $\hmlobs{τ}\hmlands\set{\hmlobs{\literal a}, \hmlobs{\literal b}}$.
Due to the weakening, however, there is a weak simulation for this direction, namely:
$\set{(\literal{Q}, \literal{P}), (\literal{q_{ab}}, \literal{P}), (\literal{q_1}, \literal{p_1}), (\literal{q_2}, \literal{p_2})}$.
Therefore, $\literal P \beq{WS} \literal Q$!
A mutual weak simulation $R_{\literal{PQ}}$ to justify this is drawn in dashed blue in @fig-ts-determinism-repeated.

::::{#fig-ts-determinism-repeated}
```tikz
\begin{tikzpicture}[->,auto,node distance=2cm,
    rel/.style={dashed,blue}]
  \node[state] (P){$\literal{P}$};
  \node[state, below left of=P] (PA){$\literal{p_a}$};
  \node[state, below right of=P] (PB){$\literal{p_b}$};
  \node[state, below of=PA] (P1){$\literal{p_1}$};
  \node[state, below of=PB] (P2){$\literal{p_2}$};
  \path
    (P)
      edge node[swap] {$\tau$} (PA)
      edge node {$\tau$} (PB)
    (PA)
      edge node {$\literal{a}\vphantom{\literal{b}}$} (P1)
    (PB)
      edge node {$\literal{b}$} (P2);

  \node[state, right=5cm of P] (Q){$\literal{Q}$};
  \node[state, below of=Q] (QAB){$\literal{q_{ab}}$};
  \node[state, below left of=QAB] (Q1){$\literal{q_1}$};
  \node[state, below right of=QAB] (Q2){$\literal{q_2}$};
  \path
    (Q)
      edge node {$\tau$} (QAB)
    (QAB)
      edge node[swap] {$\literal{a}\vphantom{\literal{b}}$} (Q1)
      edge node {$\literal{b}$} (Q2);
   \path[rel]
    (P) edge[<->, bend left=15] node {$\rel R_{\literal{PQ}}$} (Q)
    (PA) edge[->, bend left=10] node {} (Q)
    (PB) edge[->, bend left=10] node {} (Q)
    (QAB) edge[->, bend right=10] node {} (P)
    (P1) edge[<->, bend left=15] node {} (Q1)
    (P2) edge[<->, bend left=15] node {} (Q2);
\end{tikzpicture}
```

A mutual weak simulation on the original philosopher example.
::::

However, $\literal P$ and $\literal Q$ are not weakly bisimilar.
The reason is that the left process can weakly $\stepweak$-transition to a position where $\literal{b}$ is impossible, even if we would allow for some more internal $\stepweak$-behavior in between.
In HML, this difference could be expressed by $\hmleps \hmlneg \hmleps \hmlobs{\literal{b}}$.
:::

::: {#def-abstraction-notion}
#### Abstractions

We say that a weak notion of equivalence $\notionname{W}N$ *abstracts a strong notion* $N$ iff ${\bpreordvar{\notionname{W}N}} = {\bpreordvar{N}}$ for all transition systems without $\tau$-transitions.
:::

By this nomenclature, weak trace preorder, weak simulation preorder, and weak bisimilarity are abstractions of their strong counterparts from @sec-preliminaries.
But, as we will see in the next sections, there might be *multiple* abstractions of the same strong notion.

### HML of Stability-Respecting Branching Bisimilarity {#sec-hml-srbb}

As noted in @rem-expressiveness-weak-hml, our $\hml$ notation for weak observations does not affect expressiveness---thus it still characterizes strong bisimilarity by @thm-hennessy-milner.
To characterize weak equivalences, we have to select appropriate subsets.
We will use the following sublogic that, naturally, must be designed to correspond to the strongest weak notion we will be interested in.

:::{#def-hml-srbb}
#### Branching Hennessy--Milner logic

We define *stability-respecting branching* Hennessy--Milner modal logic,
$\hmlsrbb$, over an alphabet of actions $\actions$ by the following context-free grammar starting with $\varphi$:{{<isb datatype HML_SRBB hml_srbb>}}
$$
\begin{array}{rllr}
    \varphi {} :≔ {} & \hmleps\chi & & \text{“delayed observation”} \\
        | \quad & \hmlands \set{\psi, \psi, ...} & & \text{“immediate conjunction”} \\
    \chi {} :≔ {} & \hmlobs{a}\varphi & \text{with } a \in \actionsvis & \text{“observation”} \\
    | \quad & \hmlands \set{\psi, \psi, ... } & & \text{“standard conjunction”} \\
    | \quad & \hmlands \set{\hmlneg\hmlobs{\tau}\hmltrue, \psi, \psi, ...} & & \text{“stable conjunction”} \\
    | \quad & \hmlands \set{\hmlsoft{\alpha}\varphi, \psi, \psi, ...} &
      \text{with } \alpha \in \actions & \text{“branching conjunction”} \\
    \psi {} :≔ {} & \hmlneg\hmleps\chi \mid \hmleps\chi & & \text{“negative / positive conjuncts”}
\end{array}
$$
We consider the semantics of $\hmlsrbb$ to be given by @def-hml-semantics and @def-transition-systems-with-silent-steps.
:::

The name already alludes to $\hmlsrbb$ as a whole characterizing *stability-respecting branching bisimilarity*, which is a comparably strong abstraction of bisimilarity, a “strong weak bisimilarity,” so to speak.

::: {#def-stability-respecting}
#### Stability

We call a $\rel R$ *stability-respecting* iff,
for each $(p,q) \in \rel R$ with $p \nostep{\tau}$,
there is some $q'$ with $q \stepweak q' \nostep{\tau}$ and $(p, q') \in \rel R$.{{<isb definition LTS LTS_Tau.stability_respecting>}}
:::

::: {#def-branching-bisim}
#### Branching bisimilarity

A symmetric relation $\rel{R}$ is a *branching bisimulation*
if, for all $(p,q) \in \rel R$, a step $p \step{\alpha} p'$ implies
(1) $\alpha = \tau$ and $(p', q) \in \rel R$,
or (2) $q \stepweak q' \step{\alpha} q''$ for some $q', q''$ with $(p, q') \in \rel R$ and $(p', q'') \in \rel R$.{{<isb definition Branching_Bisimilarity LTS_Tau.branching_simulation>}}

If there is a stability-respecting branching bisimulation $\rel R_{BB^{sr}}$ with $(p_0, q_0) \in \rel R_{BB^{sr}}$, then $p_0$ and $q_0$ are *stability-respecting branching bisimilar*.
:::

The power of @def-hml-srbb to distinguish mirrors exactly the power of @def-branching-bisim to equate:

::: {#thm-srbb-characterization}
#### $\hmlsrbb$ Hennessy–Milner theorem

$\hmlsrbb$ characterizes stability-respecting branching bisimilarity, that is,
there is a stability-respecting branching bisimulation $\rel R$ with $(p,q) \in \rel R$
precisely if there is no formula $\varphi \in \hmlsrbb$ with $p \in \semantics{\varphi}$ and $q \notin \semantics{\varphi}$.{{<isb lemma Branching_Bisimilarity LTS_Tau.sr_branching_bisim_is_hmlsrbb>}}
:::

The paper proof in @bj2025silentStepSpectroscopyJournal proceeds quite similarly to other Hennessy–Milner theorems, as showcased in @thm-hennessy-milner.

The example process groups of @fig-simple-weak-eq are stability-respecting branching bisimilar, as desired.
But branching bisimilarity is more distinctive than weak bisimilarity:

::: {#exm-non-bb-procs}
#### The strength of branching

Compare $\literal{P_{ab}} \defeq \literal{a} \ccschoice \ccsprefix{\tau} \literal{b} \ccschoice \literal{b}$
and a subgraph-variant $\literal{P_{a\tau b}} \defeq \literal{a} \ccschoice \ccsprefix{\tau} \literal{b}$, where the $\literal{b}$ is *only* possible after committing to its branch.
The processes are not branching bisimilar as
$\hmleps\hmlands\set{\hmlsoft{\literal{b}}, \hmleps\hmlobs{\literal{a}}}$ distinguishes them.
Intuitively, the formula expresses that, right at the moment when $\literal{b}$ can happen, $\literal{a}$ is still (weakly) possible.

But the processes are weakly bisimilar, as weak bisimilarity does not care about branching due to $\tau$-steps that can also be achieved by visible actions.
A formal argument would be that $\identity{\states} \cup \set{(\literal{P_{ab}}, \literal{P_{a\tau b}}), (\literal{P_{a\tau b}}, \literal{P_{ab}})}$ is a symmetric weak simulation.
:::

::: {#rem-equivalence-indeed}
#### An equivalence indeed

It is a popular anecdote among those who know branching bisimilarity that the proof of its transitivity “assumed” originally does not exist.
Six years after branching bisimilarity's inception, @bastern1996branchingBisimEqIndeed closes the gap by a proof that is surprisingly complex.

In our setting, the transitivity is an *immediate corollary* of having a modal characterization (@thm-srbb-characterization).{{<isb lemma Branching_Bisimilarity LTS_Tau.sr_branching_bisimulated_transitive>}}
This is one of the perks of modal characterizations, indeed (cf. @sec-perks-modal-characterizations).
:::

## Case Studies—and the Need for Other Equivalences {#sec-case-stduies-other-eqs}

In the world of weak equivalences, many things are a little more complicated than in the strong spectrum.
We have already observed, that bisimulation equivalence can be abstracted to branching bisimulation *and* weak bisimulation.

In this section, we use two minimal case study examples to see how one can arrive at even more abstractions of bisimulation and of failure equivalence.

Next chapter's @sec-tackling-case-studies will pick up on the examples to test that the spectroscopy algorithm can indeed simplify a researcher's life.

### Parallelizing Compiler---and Contrasimulation

Most of computer speed up in the last two decades has been due to parallelization of computation.
Compilers will usually drift and parallelize sequential commands of a program.
The claim behind such optimizations is that the communication behavior of the program stays the same.^[
  In other regards, the program obviously differs.
  It is the intention to change performance!
]
So naturally, the program and the optimized program should be equivalent with respect to some notion of equivalence.

@bell2014loopParallelizingTransformations ventures to prove that certain parallelizations of loops during compilation are sound.
This runs into the problem that weak bisimilarity is too strong for this use case.
The following example (adapted from @bell2013certifiably) shows why.

:::{#exm-parallelizing-compilation}
#### Parallelized execution

Consider the following sequential program $\literal{P_{Seq}}$, which computes `x` (with possible values `A` and `B`), prints a header (`output:`) and then the computed value:

::::{#fig-parallelized-ts .column-margin}

```tikz
\begin{tikzpicture}[auto,node distance=1.5cm]
  \node[] (PSeq){$\literal{P_{Seq}}$};
  \node[below left of=PSeq] (p1){$\circ$};
  \node[below right of=PSeq] (p2){$\circ$};
  \node[below of=p1] (p3){$\literal{p_a}$};
  \node[below of=p2] (p4){$\literal{p_b}$};
  \node[below right of=p3] (p5){$\circ$};
  \path[->]
    (PSeq)
      edge[swap] node {$\tau$} (p1)
      edge node {$\tau$} (p2)
    (p1)
      edge[swap, thick] node {$\literal{ao}$} (p3)
    (p2)
      edge[thick] node {$\literal{ao}$} (p4)
    (p3)
      edge[thick, swap] node {$\literal{A}$} (p5)
    (p4)
      edge[thick] node {$\literal{B}$} (p5);
\end{tikzpicture}
```
```tikz
\begin{tikzpicture}[auto,node distance=1.5cm]
  \node[] (PPara){$\literal{P_{Para}}$};
  \node[below left of=PPara] (p1){$\circ$};
  \node[below right of=PPara] (p2){$\circ$};
  \node[below of=PPara] (p23){$\literal{p_{ab}}$};
  \node[below of=p1] (p3){$\circ$};
  \node[below of=p2] (p4){$\circ$};
  \node[below of=p3, node distance=1cm] (p31){$\circ$};
  \node[below of=p4, node distance=1cm] (p41){$\circ$};
  \node[below right of=p31] (p5){$\circ$};
  \path[->]
    (PPara)
      edge[swap] node {$\tau$} (p1)
      edge node {$\tau$} (p2)
      edge[thick] node {$\literal{ao}$} (p23)
    (p1)
      edge[swap, thick] node {$\literal{ao}$} (p3)
    (p2)
      edge[thick] node {$\literal{ao}$} (p4)
    (p23)
      edge[swap] node {$\tau$} (p3)
      edge node {$\tau$} (p4)
    (p3)
      edge[swap] node {$\tau$} (p31)
    (p4)
      edge node {$\tau$} (p41)
    (p31)
      edge[thick, swap] node {$\literal{A}$} (p5)
    (p41)
      edge[thick] node {$\literal{B}$} (p5);
\end{tikzpicture}
```

Transition systems representing $\literal{P_{Seq}}$ and $\literal{P_{Para}}$.
::::

```ruby
x = compute_A_or_B()
print("output:")
print(x)
```

A parallelization would find that the rendering of the header `output:` is independent of the computation of `x` and can thus be parallelized to $\literal{P_{Para}}$:

```ruby
x = compute_A_or_B() || print("output:")
print(x)
```

The `||` connector is supposed to mean a parallel execution of commands that synchronizes the branches at the end.
In real-world programming languages, this would happen through spawning and joining subprocesses, future objects, or `async` segments.

@fig-parallelized-ts shows the transition systems of the two programs.
The $\tau$-steps mark internal computation or synchronization.
In particular, `compute_A_or_B` turns into a $\tau$-step.
The action $\literal{ao}$ stands for `print("output:")` announcing the coming output, and $\literal{A}$ and $\literal{B}$ are the values of `x` that are actually produced by `print(x)`.

Clearly, $\literal{P_{Seq}}$ and $\literal{P_{Para}}$ have the same weak traces.
But they do not weakly simulate each other:
$\literal{P_{Para}}$ can perform a $\step{\literal{ao}}$-transition, immediately after which $\literal{A}$ and $\literal{B}$ are weakly possible at $\literal{p_{ab}}$.
The sequential $\literal{P_{Seq}}$ has no such states.
:::

@bell2013certifiably proposes “eventual bisimilarity” as a new bisimulation-like notion to equate $\literal{P_{Seq}}$ and $\literal{P_{Para}}$.
In @bm2024contrasimilarityInfComp, we discuss how two more standard notions from the original spectrum neatly equate the processes:
Stable bisimilarity and contrasimilarity.

::: {#def-stablebisim}
#### Stable bisimilarity

A *stable bisimulation* is a relation $\rel R$ where,
for all $(p,q) \in \rel R$ with $\vec w \in \actionsvis$ and $p \stepweakword{\vec w} p'$,
there is a $q'$ with $q \stepweakword{\vec w} q'$,
and, in case $p'$ is stable, moreover $(q', p') \in \rel R \cap \inverse{\rel R}$.
The *stable bisimilarity* $\beq{SB}$ is defined as in @def-weak-bisimilarity.
:::

On the programs of @exm-parallelizing-compilation,
there is a stable bisimulation, connecting $\literal{P_{Seq}}$ and $\literal{P_{Para}}$ as well as the stable states with matching positions.
Intuitively, stable bisimilarity is allowed to “skip” intermediate that would break the bisimulation---such as $\literal{p_{ab}}$ in our example.

As we argue in @bm2024contrasimilarityInfComp, stable bisimilarity, in many ways, is better understood not as a stable variant of bisimilarity, but of *contrasimilarity*: 

::: {#def-contrasim}
#### Contrasimilarity

A *contrasimulation* is a relation $\rel R$ where, for all $(p,q) \in \rel R$ with $\vec w \in \actionsvis$ and $p \stepweakword{\vec w} p'$, there is a $q'$ with $q \stepweakword{\vec w} q'$ and $(q', p') \in \rel R$.^[Note that $p'$ and $q'$ swap sides in the consequent!]
The *contrasimulation preorder* $\bpreord{C}$ and *contrasimilarity* $\beq{C}$ are defined as in @def-weak-bisimilarity.
:::

Contrasimilarity allows *local asymmetry* in matching internal transitions.
A witness relation for @exm-parallelizing-compilation would also include $(\literal{p_a}, \literal{p_{ab}})$ and $(\literal{p_b}, \literal{p_{ab}})$.
The intuition is that contrasimulation preorder allows states to slightly get ahead of their counterparts---$\literal{p_a}$ is more committed than $\literal{p_{ab}}$---as long as the latter can catch up silently.

Contrasimilarity and stable bisimilarity, both are at the weak end of abstractions of bisimilarity,
“weakest” bisimilarities, one could say.
We discuss them and their characterizations in great detail in @bm2024contrasimilarityInfComp.

Contrasimilarity and stable bisimilarity are nice for proofs as they have coinductive characterizations.
They also are more well-behaved than Bell's “eventual bisimilarity,” which fails to be an equivalence if the transition system has divergent states [cf. @bell2014loopParallelizingTransformations § 3.3].

As we will establish in @sec-solution-parallelizing-compilation, contrasimilarity and stable bisimilarity indeed are the finest equivalences from the standard spectrum to equate the sequential and the parallel program.

:::{#rem-stable-bisim-sangiorgi}
#### Half a definition of stable bisimilarity

@sangiorgi2012 [§ 6.5] gives the following, simpler definition for stable bisimulation:^[Quote adapted to the notation of the present thesis.]

> A process relation $\rel R$ is a *stable bisimulation* if, whenever $(p,q) \in \rel R$, for all $\vec w$ we have:
>
> - for all $p'$ with $p \stepweakword{\vec w} p'$ and $p'$ is stable, there is $q'$ such that $q \stepweakword{\vec w} q'$ and $(p', q') \in \rel R$,
>
> and the converse on the actions [sic!] from $q$.

Sangiorgi notes that the induced stable bisimilarity relation would not be transitive on transition systems with divergences.
But the situation is even more severe!

::::{.column-margin}
```tikz
\begin{tikzpicture}[auto,node distance=1.5cm]
  \node[] (A){$\literal{A}$};
  \node[below right of=A] (Div){$\literal{Div}$};
  \node[above right of=Div] (B){$\literal{B}$};
  \path[->]
    (A)
      edge[thick, swap] node {$\literal{a\vphantom{b}}$} (Div)
    (B)
      edge[thick] node {$\literal{b}$} (Div)
    (Div)
      edge [loop below] node {$\tau$} ();
\end{tikzpicture}
```
::::

Defined like this, stable bisimilarity would not even imply weak trace equivalence.
Consider the processes $\literal{A}$ and $\literal{B}$ in the margin.
As all their non-empty word transitions end in instable states, the variant from @sangiorgi2012 ignores their differences altogether.

Stable bisimilarity of @def-stablebisim, however, does not suffer from this defect, for it demands matching of all word transitions.
Our relational @def-stablebisim is informed by the upcoming modal characterizations of @sec-weak-spectrum-quantities (and of @glabbeek1993ltbt and @bm2024contrasimilarityInfComp).
As discussed in @sec-perks-modal-characterizations it is trivial to ensure that modally characterized relations are transitive and refine trace preorder.
Such are the perks of modal characterizations!
:::

### Abstraction as Congruence---and Stable Failures {#sec-abstraction-failures}

For trace-like equivalences, there commonly appear two kinds of abstractions in the literature:
Ones where negation and conjunctive observations are only possible when processes have *stabilized*, that is, exhausted their possibilities of internal behavior, and ones where stability plays no role.
We will illustrate these options using modal characterizations of stable and weak failure equivalence, abstracting @def-failures:

:::{#def-weak-failures}
#### Weak failure preorder and equivalence

Let *weak failure preorder and equivalence* be defined by the weak failure observations $\observations{WF}$ produced by $φ^\mathrm{WF}$ in the following grammar,
and *stable failure preorder and equivalence*, by the products of $φ^\mathrm{SF}$.
$$
  φ^\mathrm{WF} \grammardef
    \hmleps\hmlobs{a}φ^\mathrm{WF}
    \; \grammaror \;
    \hmleps\hmland{i}{I} \hmlneg \hmleps\hmlobs{a_i}\hmltrue 
$$
$$
  φ^\mathrm{SF} \grammardef
    \hmleps\hmlobs{a}φ^\mathrm{SF}
    \; \grammaror\; \hmltrue
    \; \grammaror\;
    \hmleps\hmland{i}{I} \hmlneg \hmlobs{α_i}\hmltrue
      \text{ where } 0 \in I \land α_0=\tau
$$
:::

*Weak failures* are obtained by intermitting $\hmleps$-observations in between the steps.
In comparison to the strong modal characterization of @def-failures-modal, this just means prepending productions (and negated actions) by $\hmleps$.

*Stable failures* demand a $\hmlneg\hmlobs{\tau}$-conjunct in the conjunctions of refused actions.
In one respect, this increases expressivity, as the possibility to stabilize into a state where $p \nostep{\tau}$ becomes observable.
In another respect, one loses the option to see failures in instable parts of the transition system.
In particular, if all states of a transition system are divergent, stable failure preorder degenerates to weak trace preorder.

Often, weak and stable failures will coincide.
For instance, philosopher process $\literal{P}$ is distinguished from $\literal{Q}$ by weak failure $\hmleps\hmlands\set{\hmlneg\hmleps\hmlobs{\literal{a}}}$ and by stable failure $\hmleps\hmlands\set{\hmlneg\hmlobs{\tau}, \hmlneg\hmlobs{\literal{a}}}$ alike.
For the other direction, $\literal{Q}$ is preordered to $\literal{P}$ with respect to both, weak and stable failures.

But in general, weak and stable failure equivalence are *incomparable.*
The following example to highlight their differences is due to van Glabbeek:

:::{#exm-idle-process-abstraction}
#### Congruence on $\tau$-abstraction

@fig-idle-process-abstraction presents transition systems of four processes, given through their initial states:
$\literal{P}_e$ makes a nondeterministic choice $\literal{op}$ between $\literal{a}$ and $\literal{b}$, performing arbitrarily many $\literal{idle}$-actions in between.
$\literal{P}_\ell$ does the same but can change the choice while idling.
$\literal{P}^\tau_e$ and $\literal{P}^\tau_\ell$ are variants of the two obtained by renaming $\literal{idle}$ into $\tau$-actions.
Many process algebras have an operator to perform such an *abstraction* of a process, for instance, `hide` in mCRL2 [@groote2014mcrl2] or hiding “$\setminus$” in CSP [@hoare1985csp].

::::{#fig-idle-process-abstraction}

```tikz
\begin{adjustbox}{scale=1.0, center}
  \begin{tikzpicture}[->,auto,node distance=2cm, rel/.style={dashed,font=\it, blue}, ext/.style={line width=1pt}]
    \node (Pe){$\literal{P_e}$};
    \node (Ae) [below left of=Pe, node distance=1.5cm] {$\literal{A}_e$};
    \node (Be) [below right of=Pe, node distance = 1.5cm] {$\literal{B}_e$};
    \node (Se) [below right of=Ae, node distance = 1.5cm] {$\circ$};
    \path
    (Pe) edge [bend right=10, swap, ext] node {$\literal{op}$} (Ae)
    (Pe) edge [bend left=10, ext] node {$\literal{op}$} (Be)
    (Ae) edge [bend right=10, swap, ext] node {$\literal{a}\vphantom{\literal b}$} (Se)
          edge [loop left, ext] node {$\literal{idle}$} ()
    (Be) edge [bend left=10, ext] node {$\literal{b}$} (Se)
          edge [loop right, ext] node {$\literal{idle}$} ()
    ;

    \node (Pl) [right of=Pe, node distance=7cm] {$\literal{P}_\ell$};
    \node (Al) [below left of=Pl, node distance=1.5cm] {$\literal{A}_\ell$};
    \node (Bl) [below right of=Pl, node distance = 1.5cm] {$\literal{B}_\ell$};
    \node (Sl) [below right of=Al, node distance = 1.5cm] {$\circ$};
    \path
    (Pl) edge [bend right=10, swap, ext] node {$\literal{op}$} (Al)
    (Pl) edge [bend left=10, ext] node {$\literal{op}$} (Bl)
    (Al) edge [bend right=10, swap, ext] node {$\literal{a}\vphantom{\literal b}$} (Sl)
          edge [bend right=12, swap, ext] node {$\literal{idle}$} (Bl)
          edge [loop left, ext] node {$\literal{idle}$} ()
    (Bl) edge [bend left=10, ext] node {$\literal{b}$} (Sl)
          edge [bend right=12, swap, ext] node {$\literal{idle}$} (Al)
          edge [loop right, ext] node {$\literal{idle}$} ()
    ;

    \node (Pte) [below right = .5cm and 1.4cm of Be]{$\literal{P}^\tau_e$};
    \node (Ate) [below left of=Pte, node distance=1.5cm] {$\literal{A}^\tau_e$};
    \node (Bte) [below right of=Pte, node distance = 1.5cm] {$\literal{B}^\tau_e$};
    \node (Ste) [below right of=Ate, node distance = 1.5cm] {$\circ$};
    \path
    (Pte) edge [bend right=10, swap, ext] node {$\literal{op}$} (Ate)
    (Pte) edge [bend left=10, ext] node {$\literal{op}$} (Bte)
    (Ate) edge [bend right=10, swap, ext] node {$\literal{a} \vphantom{\literal b}$} (Ste)
          edge [loop left] node {$\tau$} ()
    (Bte) edge [bend left=10, ext] node {$\literal{b}$} (Ste)
          edge [loop right] node {$\tau$} ()
    ;

    \node (Ptl) [right of=Pte, node distance=7cm] {$\literal{P}^\tau_\ell$};
    \node (Atl) [below left of=Ptl, node distance=1.5cm] {$\literal{A}^\tau_\ell$};
    \node (Btl) [below right of=Ptl, node distance = 1.5cm] {$\literal{B}^\tau_\ell$};
    \node (Stl) [below right of=Atl, node distance = 1.5cm] {$\circ$};
    \path
    (Ptl) edge [bend right=10, swap, ext] node {$\literal{op}$} (Atl)
    (Ptl) edge [bend left=10, ext] node {$\literal{op}$} (Btl)
    (Atl) edge [bend right=10, ext, swap] node {$\literal{a} \vphantom{\literal b}$} (Stl)
          edge [bend right=10, swap] node {$\tau$} (Btl)
          edge [loop left] node {$\tau$} ()
    (Btl) edge [bend left=10, ext] node {$\literal{b}$} (Stl)
          edge [bend right=10, swap] node {$\tau$} (Atl)
          edge [loop right] node {$\tau$} ()
    ;

  \end{tikzpicture}
\end{adjustbox}
```

A pair of processes $\literal{P}_e$ and $\literal{P}_\ell$ together with versions $\literal{P}^\tau_e$ and $\literal{P}^\tau_\ell$ of the two where $\literal{idle}$ has been abstracted into internal $\tau$-behavior.
::::

$\literal{P}_e$ and $\literal{P}_\ell$ allow the same weak failure and stable failure observations and are thus equivalent.
For the abstracted variants, $\literal{P}^\tau_e$ is distinguished from $\literal{P}^\tau_\ell$ by the weak failure $\hmleps\hmlobs{\literal{op}}\hmleps\hmlands\set{\hmlneg\hmleps\hmlobs{\literal{b}}}$, as $\literal{b}$ becomes weakly impossible at $\literal{A}^\tau_e$ but not at $\literal{A}^\tau_\ell$.
Due to the $\step{\tau}$-loops, this difference is not expressible as a stable failure.
Consequently, the  $\literal{P}^\tau_e$ and $\literal{P}^\tau_\ell$ are stable-failure-equivalent.
:::

The example highlights one way in which weak failures might be stronger than stable failures.
For most process algebras, weak failures are *too strong* in the following sense:
Weak failures cannot be a congruence for hiding operators, as witnessed by @exm-idle-process-abstraction!

Therefore, the standard models of CSP following @bhr1984theoryCSP have used stable failures for their semantics.
Van Glabbeek -@glabbeek1993ltbt only includes variants of stable failures in his weak spectrum, disregarding weak failures.
Other authors such as @gfm2020congruenceOperator work with weak failures.
Therefore, our spectrum in @sec-weak-spectrum-quantities will treat both.
Weak failures will be located in the part below weak bisimilarity; stable failures in that below stable bisimilarity.

:::{#rem-congruences-weak}
#### More on congruences

In general, congruence properties are harder to obtain in the weak spectrum.
A classic example would be weak bisimilarity, not forming a congruence with respect to the choice operator $\ccschoice$,
because $\literal{a} \beq{WB} \ccsprefix{\tau}\literal{a}$ but not $\literal{a} \ccschoice \literal{b} \beq{WB} \ccsprefix{\tau}\literal{a} \ccschoice \literal{b}$.
We will not go into the particularities around this and point to @sangiorgi2012 [§ 4.4] for how to obtain a congruence through “rooted” weak bisimilarity. 
:::

## Expressing the Weak Spectrum with Quantities {#sec-weak-spectrum-quantities}

We can capture the weak spectrum in a lattice of vectors like the strong one in @sec-spectrum.
But we need a few more dimensions.

### Syntactic Expressiveness

We adapt the notions of @sec-strong-notions for the weak spectrum to distinguish the new kinds of conjunctions that appear in $\hmlsrbb$ of @def-hml-srbb:

1. Modal depth of *observations* ($\hmlobs{a}$, $\hmlsoft{\alpha}$).
2. **New:** Nesting depth of *branching conjunctions* (with one $\hmlsoft{\alpha}$-observation conjunct, not starting with $\hmleps$).
3. **New:** Nesting depth of *unstable conjunctions* (that do not enforce stability by a $\hmlneg \hmlobs{\tau} \hmltrue$-conjunct).
4. **New:** Nesting depth of *stable conjunctions* (that do enforce stability by a $\hmlneg \hmlobs{\tau} \hmltrue$-conjunct).
5. Nesting depth of *immediate conjunctions* (that are not preceded by $\hmleps$).
6. Maximal modal depth of *positive conjuncts* in conjunctions.^[
  To simplify matters, we drop the two kinds of positive conjunct depths of @sec-strong-notions.
  @sec-covering-revivals will hint how to add stable revivals back in.]
7. Maximal modal depth of *negative conjuncts* in conjunctions.
8. Nesting depth of *negations*.

To formalize our weak spectrum, we need to fix the observation languages $\observationsvar[\literal{weak}]{N}$.
This time, we will do this by directly providing an expressiveness pricing metric.

::: {#def-weak-spectrum}
#### Weak notions

We define the *weak notions of observability* using vectors of extended naturals
$$\notions^\literal{weak} ≔
\natsext^8,
$$
ordered by pointwise comparison of vector components.

We capture the family of weak observation languages $\observationsvar[\literal{weak}]{N \in \notions^\literal{weak}}$ by providing an expressiveness price function $\expr[\literal{weak}] \colon \hmlsrbb \rightarrow \notions^\literal{weak}$ with $\observationsvar[\literal{weak}]{N} = \set{ \varphi \mid \expr[\literal{weak}](\varphi) \leq N}$.{{<isb fun Expressiveness_Price expressiveness_price>}}
It is defined in mutual recursion with $\expr[\varepsilon]$ and $\expr[\wedge]$ as follows---if multiple rules apply, pick the first one:
$$
\begin{array}{rl}
  \expr[\literal{weak}]\left(\hmltrue\right) \defeq
  \expr[\varepsilon]\left(\hmltrue\right) & \defeq
  \zerovec
  \\
  \textstyle\expr[\literal{weak}]\left(\hmleps\chi\right) & \defeq
  \textstyle\expr[\varepsilon]\left(\chi\right)
  \\
  \textstyle\expr[\literal{weak}]\left(\hmlands\Psi\right) & \defeq
  \unitvec{5} + \textstyle\expr[\varepsilon]\left(\hmlands \Psi\right)
  \\
  \expr[\varepsilon]\left(\hmlobs{a}\varphi\right) & \defeq
  \unitvec{1} + \expr[\literal{weak}]\left(\varphi\right)
  \\
  \textstyle\expr[\varepsilon]\left(\hmlands \Psi\right) & \defeq
  \sup\;\set{ \expr[\wedge]\left(\psi\right) \mid \psi \in \Psi } +
  \begin{cases}
      \unitvec{4} & \text{if } \hmlneg\hmlobs{\tau}\hmltrue \in \Psi\\
      \unitvec{2} + \unitvec{3} & \text{if there is } \hmlsoft{\alpha}\varphi \in \Psi \\
      \unitvec{3} & \text{otherwise}
  \end{cases}
  \\
  \expr[\wedge]\left(\hmlneg\hmlobs{\tau}\hmltrue\right) & \defeq
  (0,0,0,0,0,0,0,1)
  \\
  \expr[\wedge]\left(\hmlneg\varphi\right) & \defeq
  \sup\;\set{ \unitvec{8} + \expr[\literal{weak}]\left(\varphi\right),\quad
      (0,0,0,0,0,0,\left(\expr[\literal{weak}]\left(\varphi\right)\right)_1,0) }
  \\
  \expr[\wedge]\left(\hmlsoft{\alpha}\varphi\right) & \defeq
  \sup\;\set{ \unitvec{1} + \expr[\literal{weak}]\left(\varphi\right),\quad
      (0,0,0,0,0,1 + \left(\expr[\literal{weak}]\left(\varphi\right)\right)_1,0,0) }
  \\
  \expr[\wedge]\left(\varphi\right) & \defeq
  \sup\;\set{ \hphantom{\unitvec{8} + {}} \expr[\literal{weak}]\left(\varphi\right),\quad
      (0,0,0,0,0,\left(\expr[\literal{weak}]\left(\varphi\right)\right)_1,0,0) }
\end{array}
$$
:::

### Weak Spectrum {#sec-weak-spectrum-exposition}

Using @def-weak-spectrum, we can give coordinates to the common notions of weak behavioral equivalences in @fig-weak-spectrum.
In this subsection, we take a deeper look into the observation languages characterized by the coordinates and argue for the correctness of exemplary cases.

:::{#fig-weak-spectrum fig-env='figure*' fig-pos='t!'}

```tikz
%%| image-class: lightbox
\newcommand*{\EqCoords}[1]{\textcolor{gray}{\small $#1$}}
\begin{tikzpicture}[auto,node distance=2.5cm,align=center]
  \node (BBs){stability-respecting branching bisim $\notionname{BB^{sr}}$\\
    \EqCoords{\infty,\infty,\infty,\infty,\infty,\infty,\infty,\infty}};
  \node (BB)[below left of=BBs]{branching bisim $\notionname{BB}$\\
    \EqCoords{\infty,\infty,\infty,0,\infty,\infty,\infty,\infty}};
  \node (eB)[xshift=-5mm, below left of=BB]{$\eta$-bisim $\eta\notionname{B}$\\
    \EqCoords{\infty,\infty,\infty,0,0,\infty,\infty,\infty}};
  \node (DB)[below right of=BB]{delay bisim $\notionname{DB}$\\
    \EqCoords{\infty,0,\infty,0,\infty,\infty,\infty,\infty}};
  \node (B)[below left of=DB]{weak bisim $\notionname{WB}$\\
    \EqCoords{\infty,0,\infty,0,0,\infty,\infty,\infty}};
  \node (S2)[below left of=B]{$2$-nested weak sim $\notionname{2WS}$\\
    \EqCoords{\infty,0,\infty,0,0,\infty,\infty,1}};
  \node (C)[below right of=B]{contrasim $\notionname{C}$\\
    \EqCoords{\infty,0,\infty,0,0,0,\infty,\infty}};
  \node (RS)[below left of=S2]{weak\\ ready sim $\notionname{WRS}$\\
    \EqCoords{\infty,0,\infty,0,0,\infty,1,1}};
  \node (R)[below right of=RS]{weak\\ readiness $\notionname{WR}$\\
    \EqCoords{\infty,0,1,0,0,1,1,1}};
  \node (PF)[above right of=R]{weak\\ possible future $\notionname{WPF}$\\
    \EqCoords{\infty,0,1,0,0,\infty,\infty,1}};
  \node (IF)[below right of=PF]{weak\\ impossible future $\notionname{WIF}$\\
    \EqCoords{\infty,0,1,0,0,0,\infty,1}};
  \node (S)[below left of=RS]{weak sim $\notionname{1WS}$\\
    \EqCoords{\infty,0,\infty,0,0,\infty,0,0}};
  \node (eS)[above left of=RS]{$\eta$-sim $\eta\notionname{S}$\\
    \EqCoords{\infty,\infty,\infty,0,0,\infty,0,0}};
  \node (F)[below right of=R]{weak failure $\notionname{WF}$\\
    \EqCoords{\infty,0,1,0,0,0,1,1}};
  \node (T)[below right of=F]{weak trace $\notionname{WT}$\\
    \EqCoords{\infty,0,0,0,0,0,0,0}};
  \node (E)[below of=T, node distance=1.2cm]{weak enabledness $\notionname{WE}$\\
    \EqCoords{1,0,0,0,0,0,0,0}};
  \node (U)[below of=E, node distance=1.2cm]{weak universal $\notionname{WU}$\\
    \EqCoords{0,0,0,0,0,0,0,0}};
  
  \node (DBs)[xshift=12mm, above right of=DB, node distance=1.75cm]{s.-r.\ delay bisim $\notionname{DB^{sr}}$\\
    \EqCoords{\infty,0,\infty,\infty,\infty,\infty,\infty,\infty}};
  \node (SB)[below right of=DBs, node distance=3cm]{stable bisim $\notionname{SB}$\\
    \EqCoords{\infty,0,0,\infty,0,\infty,\infty,\infty}};
  \node (RSs)[below left of=SB]{stable\\ ready sim $\notionname{WRS^s}$\\
    \EqCoords{\infty,0,0,\infty,0,\infty,1,1}};
  \node (Rs)[below right of=RSs]{stable readiness $\notionname{WR^s}$\\
    \EqCoords{\infty,0,0,1,0,1,1,1}};
  \node (IFs)[below right of=SB]{stable\\ imposs.\ fut.\ $\notionname{WIF^s}$\\
    \EqCoords{\infty,0,0,1,0,0,\infty,1}};
  \node (Fs)[below right of=Rs]{stable failures $\notionname{WF^s}$\\
    \EqCoords{\infty,0,0,1,0,0,1,1}};
  \node (SS)[below left of=Rs]{stable sim $\notionname{SS}$\\
    \EqCoords{\infty,0,0,\infty,0,\infty,0,1}};
  %
  \path
  (BBs) edge (BB)
  (BB) edge ([xshift=10mm]eB.north)
  (BB) edge (DB)
  ([xshift=10mm]eB.south) edge (B)
  (eB.south) edge (eS)
  (DB) edge (B)
  (B) edge (S2)
  (B) edge (C)
  (C) edge (IF)
  (S2) edge (RS)
  (S2) edge (PF)
  (RS) edge (S)
  (RS) edge (R)
  (PF) edge (R)
  (PF) edge (IF)
  (eS) edge (S)
  (S) edge ([xshift=-20mm]T.west)
  ([xshift=-20mm]T.west) edge (T.west)
  (IF) edge (F)
  (R) edge (F)
  (F) edge (T)
  (T) edge (E)
  (E) edge (U)
  ;
  \path
  (BBs) edge (DBs)
  ([xshift=-4mm]DBs.south) edge ([xshift=-9mm,yshift=-5mm]DBs.south)
  (DBs) edge (SB)
  (SB) edge (RSs)
  (SB) edge (IFs)
  (RSs) edge (Rs)
  (RSs) edge (SS)
  (Rs) edge (Fs)
  (IFs) edge (Fs)
  (Fs) edge ([xshift=15mm]T.east)
  ([xshift=15mm]T.east) edge (T.east)
  (SS.south) edge (T.north)
  ;
\end{tikzpicture}
```

Hierarchy of weak behavioral equivalences/preorders, by equivalence notion coordinates.
:::

{{< paragraph_heading "Linear-time notions." >}}
Let us first see how trace-like notions are handled in our spectrum.

::: {#lem-weak-trace-eq}
#### Characterization of weak trace equivalence

The subset $\observations[\literal{weak}]{WT} = \observationsvar[\literal{weak}]{(\infty,0,0,0,0,0,0,0)} \subseteq \hmlsrbb$ can be given by the following grammar:
\begin{align*}
  \varphi_\notionname{WT} \grammardef & \; \hmleps\hmlobs{a}\varphi_\notionname{WT}
              \grammaror \hmleps\hmltrue 
              \grammaror \hmltrue
              \qquad \text{with $a \in \actionsvis$.}
\end{align*}
There is a formula $\varphi \in \observations[\literal{weak}]{WT}$ distinguishing $p$ from $q$ precisely if $p$ is *not* weakly trace-preordered to $q$.{{<isb lemma Weak_Traces LTS_Tau.trace_equals_trace_to_formula>}}
:::
:::proof
For a word $\vec{w} = a_1 \dots a_n \in \actionsvis^*$, the formula $\hmleps\hmlobs{a_1}\dots\hmleps\hmlobs{a_n}\hmleps\hmltrue \in \observations[\literal{weak}]{WT}$ is true for a state $p$ precisely if there is a $p'$ such that $p \stepweakword{\vec{w}} p'$, that is, if $\vec{w} \in \wtraces{p}$.
As $\wtraces{p} = \wtraces{q}$ for states $p$ and $q$ precisely if $\wtraces{p} \cap \actionsvis^* = \wtraces{q} \cap \actionsvis^*$, this completes the proof.
:::

The whole list of weak linear-time notions can be found in @fig-weak-grammars-linear.
The interesting points are highlighted in $\textcolor{RoyalBlue}{\textrm{blue}}$.
Productions that could be left out without affecting distinctiveness are set in $\textcolor{gray}{\textrm{gray}}$.

:::{#fig-weak-grammars-linear fig-pos='tp'}

```tikz
\parbox{12cm}{
  \begin{align*}
  \intertext{
    Weak universal, $\notionname{WU}$ at $(0,0,0,0,0,0,0,0)$:
  }
    \varphi_\notionname{WU} \grammardef &
      \grammarsp \hmltrue
      \grammaror \mathdl{\hmleps\hmltrue} \\
  \intertext{
    Weak enabledness, $\notionname{WE}$ at $(\mathhl{1},0,0,0,0,0,0,0)$:
  }
    \varphi_\notionname{WE} \grammardef &
      \grammarsp \mathhl{\hmleps\hmlobs{a}\varphi_\notionname{WU}}
      \grammaror \mathdl{\varphi_\notionname{WU}} \\
  \intertext{
    Weak traces, $\notionname{WT}$ at $(\mathhl{\infty},0,0,0,0,0,0,0)$:
  }
    \varphi_\notionname{WT} \grammardef &
      \grammarsp \hmleps\hmlobs{a}\mathhl{\varphi_\notionname{WT}}
      \grammaror \varphi_\notionname{WU} \\
  \intertext{
    Weak failures, $\notionname{WF}$ at $(\infty,0,\mathhl{1},0,0,0,\mathhl{1},\mathhl{1})$:
  }
    \varphi_\notionname{WF} \grammardef &
      \grammarsp \hmleps\hmlobs{a}\varphi_\notionname{WF}
      \grammaror \mathhl{\hmleps\hmlands \set{ \psi_\notionname{WF}, \psi_\notionname{WF}, \ldots }}
      \grammaror \mathdl{\varphi_\notionname{WU}} \\
    \psi_\notionname{WF} \grammardef &
      \grammarsp \mathhl{\hmlneg\hmleps\hmlobs{a}\varphi_\notionname{WU}}
      \grammaror \mathdl{\hmlneg\hmleps\hmltrue}
      \grammaror \mathdl{\hmleps\hmltrue}\\
  \intertext{
    Stable failures, $\notionname{WF^s}$ at $(\infty,0,\mathhl{0},\mathhl{1},0,0,1,1)$:
  }
    \varphi_\notionname{WF^s} \grammardef &
      \grammarsp \hmleps\hmlobs{a}\varphi_\notionname{WF^s}
      \grammaror \hmleps\hmlands \set{ \mathhl{\hmlneg\hmlobs{\tau}\hmltrue}, \psi_\notionname{WF}, \psi_\notionname{WF}, \ldots }
      \grammaror \varphi_\notionname{WU} \\
  \intertext{
    Weak readiness, $\notionname{WR}$ at $(\infty,0,1,0,0,\mathhl{1},1,1)$:
  }
    \varphi_\notionname{WR} \grammardef &
      \grammarsp \hmleps\hmlobs{a}\varphi_\notionname{WR}
      \grammaror \hmleps\hmlands \set{ \psi_\notionname{WR}, \psi_\notionname{WR}, \ldots }
      \grammaror \mathdl{\varphi_\notionname{WU}} \\
    \psi_\notionname{WR} \grammardef &
      \grammarsp \mathhl{\hmleps\hmlobs{a}\varphi_\notionname{WU}}
      \grammaror \psi_\notionname{WF} \\
  \intertext{
    Stable readiness, $\notionname{WR^s}$ at $(\infty,0,\mathhl{0},\mathhl{1},0,1,1,1)$:
  }
    \varphi_\notionname{WR^s} \grammardef &
      \grammarsp \hmleps\hmlobs{a}\varphi_\notionname{WR^s}
      \grammaror \hmleps\hmlands \set{ \mathhl{\hmlneg\hmlobs{\tau}\hmltrue}, \psi_\notionname{WR}, \psi_\notionname{WR}, \ldots }
      \grammaror \varphi_\notionname{WU} \\
  \intertext{
    Weak impossible futures, $\notionname{WIF}$ at $(\infty,0,1,0,0,0,\mathhl{\infty},1)$:
  }
    \varphi_\notionname{WIF} \grammardef &
      \grammarsp \hmleps\hmlobs{a}\varphi_\notionname{WIF}
      \grammaror \hmleps\hmlands \set{ \psi_\notionname{WIF}, \psi_\notionname{WIF}, \ldots }
      \grammaror \mathdl{\varphi_\notionname{WU}} \\
    \psi_\notionname{WIF} \grammardef &
      \grammarsp \mathhl{\hmlneg\hmleps\hmlobs{a}\varphi_\notionname{WT}}
      \grammaror \mathdl{\hmlneg\hmleps\hmltrue}
      \grammaror \mathdl{\hmleps\hmltrue}
  \intertext{
    Stable impossible futures, $\notionname{WIF^s}$ at $(\infty,0,\mathhl{0},\mathhl{1},0,0,\infty,1)$:
  }
    \varphi_\notionname{WIF^s} \grammardef &
      \grammarsp \hmleps\hmlobs{a}\varphi_\notionname{WIF^s}
      \grammaror \hmleps\hmlands \set{ \mathhl{\hmlneg\hmlobs{\tau}\hmltrue}, \psi_\notionname{WIF}, \psi_\notionname{WIF}, \ldots }
      \grammaror \varphi_\notionname{WU} \\
  \intertext{
    Weak possible futures, $\notionname{WPF}$ at $(\infty,0,1,0,0,\mathhl{\infty},\infty,1)$:
  }
    \varphi_\notionname{WPF} \grammardef &
      \grammarsp \hmleps\hmlobs{a}\varphi_\notionname{WPF}
      \grammaror \hmleps\hmlands \set{ \psi_\notionname{WPF}, \psi_\notionname{WPF}, \ldots }
      \grammaror \mathdl{\varphi_\notionname{WU}} \\
    \psi_\notionname{WPF} \grammardef &
      \grammarsp \mathhl{\hmleps\hmlobs{a}\varphi_\notionname{WT}}
      \grammaror \psi_\notionname{WIF} \\
  \end{align*}
}
```

Grammars induced by coordinates for weak linear-time notions of equivalence.
:::

The modal characterizations correspond to the ones one would expect, with some trivial ones appearing due to the language hierarchy approach.

{{< paragraph_heading "Bisimulation-like notions." >}}
The abstractions of bisimilarity in @fig-weak-grammars-bisim-like, some more interesting things happen.

:::{#fig-weak-grammars-bisim-like fig-pos='tp'}

```tikz
\parbox{12cm}{
  \begin{align*}
  \intertext{
    Contrasimulation, $\notionname{C}$ at $(\infty,0,\infty,0,0,0,\mathhl{\infty},\mathhl{\infty})$:
  }
    \varphi_\notionname{C} \grammardef &
      \grammarsp \hmleps\chi_\notionname{C}
      \grammaror \mathdl{\varphi_\notionname{WU}} \\
    \chi_\notionname{C} \grammardef &
      \grammarsp \hmlobs{a}\varphi_\notionname{C}
      \grammaror \hmlands \set{ \psi_\notionname{C}, \psi_\notionname{C}, \ldots } \\
    \psi_\notionname{C} \grammardef &
      \grammarsp \mathhl{\hmlneg\hmleps}\chi_\notionname{C}
      \grammaror \mathdl{\hmleps\chi_\notionname{WU^x}} \\
    \chi_\notionname{WU^x} \grammardef &
      \grammarsp \mathdl{\hmlands\set{\hmleps\chi_\notionname{WU^x}, \hmlneg\hmleps\chi_\notionname{WU^x}, \ldots}} \\
  \intertext{
    Weak bisimulation, $\notionname{WB}$ at $(\infty,0,\infty,0,0,\mathhl{\infty},\infty,\infty)$:
  }
    \varphi_\notionname{WB} \grammardef &
      \grammarsp \hmleps\chi_\notionname{WB}
      \grammaror \mathdl{\varphi_\notionname{WU}} \\
    \chi_\notionname{WB} \grammardef &
      \grammarsp \hmlobs{a}\varphi_\notionname{WB}
      \grammaror \hmlands \set{ \psi_\notionname{WB}, \psi_\notionname{WB}, \ldots } \\
    \psi_\notionname{WB} \grammardef &
      \grammarsp \hmlneg\hmleps\chi_\notionname{WB}
      \grammaror \mathhl{\hmleps}\chi_\notionname{WB}\\
  \intertext{
    Delay bisimulation, $\notionname{DB}$ at $(\infty,0,\infty,0,\mathhl{\infty},\infty,\infty,\infty)$:
  }
    \varphi_\notionname{DB} \grammardef &
      \grammarsp \hmleps\chi_\notionname{DB}
      \grammaror \mathhl{\hmlands \set{ \psi_\notionname{DB}, \psi_\notionname{DB}, \ldots }} \\
    \chi_\notionname{DB} \grammardef &
      \grammarsp \hmlobs{a}\varphi_\notionname{DB}
      \grammaror \hmlands \set{ \psi_\notionname{DB}, \psi_\notionname{DB}, \ldots } \\
    \psi_\notionname{DB} \grammardef &
      \grammarsp \hmlneg\hmleps\chi_\notionname{DB}
      \grammaror \hmleps\chi_\notionname{DB}\\
  \intertext{
    $\eta$-bisimulation, $\eta\notionname{B}$ at $(\infty,\mathhl{\infty},\infty,0,0,\infty,\infty,\infty)$:
  }
    \varphi_{\eta\notionname{B}} \grammardef &
      \grammarsp \hmleps\chi_{\eta\notionname{B}}
      \grammaror \mathdl{\varphi_\notionname{WU}} \\
    \chi_{\eta\notionname{B}} \grammardef &
      \grammarsp \hmlobs{a}\varphi_{\eta\notionname{B}}
      \grammaror \hmlands \set{ \psi_{\eta\notionname{B}}, \psi_{\eta\notionname{B}}, \ldots }
      \grammaror \hmlands \set{ \mathhl{\hmlsoft{\alpha}\varphi_{\eta\notionname{B}}}, \psi_{\eta\notionname{B}}, \psi_{\eta\notionname{B}}, \ldots } \\
    \psi_{\eta\notionname{B}} \grammardef &
      \grammarsp \hmlneg\hmleps\chi_{\eta\notionname{B}}
      \grammaror \hmleps\chi_{\eta\notionname{B}}\\
  \intertext{
    Branching bisimulation, $\notionname{BB}$ at $(\infty,\mathhl{\infty},\infty,0,\mathhl{\infty},\infty,\infty,\infty)$:
  }
    \varphi_{\notionname{BB}} \grammardef &
      \grammarsp \hmleps\chi_{\notionname{BB}}
      \grammaror \mathhl{\hmlands \set{ \psi_\notionname{BB}, \psi_\notionname{BB}, \ldots }} \\
    \chi_{\notionname{BB}} \grammardef &
      \grammarsp \hmlobs{a}\varphi_{\notionname{BB}}
      \grammaror \hmlands \set{ \psi_{\notionname{BB}}, \psi_{\notionname{BB}}, \ldots }
      \grammaror \hmlands \set{ \mathhl{\hmlsoft{\alpha}\varphi_{\notionname{BB}}}, \psi_{\notionname{BB}}, \psi_{\notionname{BB}}, \ldots } \\
    \psi_{\notionname{BB}} \grammardef &
      \grammarsp \hmlneg\hmleps\chi_{\notionname{BB}}
      \grammaror \hmleps\chi_{\notionname{BB}}\\
  \intertext{
    Stable bisimulation, $\notionname{SB}$ at $(\infty,0,0,\mathhl{\infty},0,0,\infty,\infty)$:
  }
    \varphi_\notionname{SB} \grammardef &
      \grammarsp \hmleps\chi_\notionname{SB}
      \grammaror \varphi_\notionname{WU} \\
    \chi_\notionname{SB} \grammardef &
      \grammarsp \hmlobs{a}\varphi_\notionname{SB}
      \grammaror \hmlands \set{ \mathhl{\hmlneg\hmlobs{\tau}\hmltrue}, \psi_\notionname{SB}, \psi_\notionname{SB}, \ldots } \\
    \psi_\notionname{SB} \grammardef &
      \grammarsp \hmlneg\mathdl{\hmleps}\chi_\notionname{SB}
      \grammaror \mathdl{\hmleps\chi_\notionname{SB}}\\
  \intertext{
    Stability-respecting delay bisimulation, $\notionname{DB^s}$ at $(\infty,0,\infty,\mathhl{\infty},\infty,\infty,\infty,\infty)$:
  }
    \varphi_\notionname{DB^s} \grammardef &
      \grammarsp \hmleps\chi_\notionname{DB^s}
      \grammaror \mathhl{\hmlands \set{ \psi_\notionname{DB^s}, \psi_\notionname{DB^s}, \ldots }} \\
    \chi_\notionname{DB^s} \grammardef &
      \grammarsp \hmlobs{a}\varphi_\notionname{DB^s}
      \grammaror \hmlands \set{ \psi_\notionname{DB^s}, \psi_\notionname{DB^s}, \ldots }
      \grammaror \hmlands \set{ \mathhl{\hmlneg\hmlobs{\tau}\hmltrue}, \psi_\notionname{DB^s}, \psi_\notionname{DB^s}, \ldots } \\
    \psi_\notionname{DB^s} \grammardef &
      \grammarsp \hmlneg\hmleps\chi_\notionname{DB^s}
      \grammaror \hmleps\chi_\notionname{DB^s}\\
  \intertext{
    Stability-respecting branching bisim., $\notionname{BB^s}$ at $(\infty,\mathhl{\infty},\infty,\mathhl{\infty},\infty,\infty,\infty,\infty)$:
  }
    \varphi_{\notionname{BB^s}} \grammardef &
      \grammarsp \hmleps\chi_{\notionname{BB^s}}
      \grammaror \mathhl{\hmlands \set{ \psi_\notionname{BB^s}, \psi_\notionname{BB^s}, \ldots }} \\
    \chi_{\notionname{BB^s}} \grammardef &
      \grammarsp \hmlobs{a}\varphi_{\notionname{BB^s}}
      \grammaror \hmlands \set{ \psi_{\notionname{BB^s}}, \psi_{\notionname{BB^s}}, \ldots }
      \grammaror \hmlands \set{ \mathhl{\hmlsoft{\alpha}\varphi_{\notionname{BB^s}}}, \psi_{\notionname{BB^s}}, \psi_{\notionname{BB^s}}, \ldots } \\
      & \hphantom{\grammarsp \hmlobs{a}\varphi_{\notionname{BB^s}}} \grammaror \hmlands \set{ \mathhl{\hmlneg\hmlobs{\tau}\hmltrue}, \psi_\notionname{BB^s}, \psi_\notionname{BB^s}, \ldots } \\
    \psi_{\notionname{BB^s}} \grammardef &
      \grammarsp \hmlneg\hmleps\chi_{\notionname{BB^s}}
      \grammaror \hmleps\chi_{\notionname{BB^s}}\\
  \end{align*}
}
```

Grammars induced by coordinates for weak bisimulation-like notions of equivalence.
:::

@bj2025silentStepSpectroscopyJournal [§ 3.3] prove in detail, for each of our abstractions of bisimilarity, that it corresponds to its respective relational characterization.
The Isabelle theory [@bbhlmm2025weakSpectroscopyIsabelle] features theorems for
$\eta$-bisimilarity{{<isb theorem Eta_Bisimilarity LTS_Tau.eta_bisim_coordinate>}} and for
stability-respecting branching bisimilarity{{<isb theorem Branching_Bisimilarity LTS_Tau.sr_branching_bisim_coordinate>}}.

The first interesting feature of the weak hierarchy is an effect of some languages not enforcing top-level negation as observed in @bj2024silentStepSpectroscopyExpress [Ex. 2.5].

:::{#exm-weak-bisim-modal-features}
#### Weak bisimulation logic

Let us contrast the logic of weak bisimulation observations $\observations{WB}$ defined through $(\infty,0,\infty,0,0,\infty,\infty,\infty)$ to the weak bisimulation observations $\observations{WB'}$ from @gfm2020congruenceOperator:
$$\varphi_\literal{WB'} \grammardef \hmleps\varphi_\literal{WB'}
        \grammaror \hmleps\hmlobs{a}\hmleps\varphi_\literal{WB'}
        \grammaror \hmlands \set{\varphi_\literal{WB'}, \varphi_\literal{WB'}, \ldots} 
        \grammaror \hmlneg\varphi_\literal{WB'}
$$
Our $\observations{WB}$ allows a few formulas that $\observations{WB'}$ lacks, e.g. $\hmleps\hmlobs{\literal{a}}\hmleps\hmlobs{\literal{a}}\hmleps\hmltrue$.
This does not add expressiveness as $\observations{WB'}$ has $\hmleps\hmlobs{\literal{a}}\hmleps\hmleps\hmlobs{\literal{a}}\hmleps\hmltrue$ and $\semantics{\hmleps\hmleps\varphi} = \semantics{\hmleps\varphi}$.

For the other direction, there is a bigger difference due to $\observations{WB'}$ allowing more freedom in the placement of conjunction and negation.
In particular, it permits top-level conjunctions and negated conjunctions without $\hmleps$ in between. But these features do not add distinctive power.
$\observations{WB'}$ also allows top-level negation, and this adds distinctive power to the preorders, effectively turning them into equivalence relations.
We do not enforce this and thus our $\mathord{\bpreord{WB}} \neq \mathord{\beq{WB}}$;
for instance, $\ccsprefix{\tau} \literal{a} \bpreord{WB} \tau \ccschoice \ccsprefix{\tau} \literal{a}$, but $\tau \ccschoice \ccsprefix{\tau} \literal{a} \nbpreord{WB} \ccsprefix{\tau} \literal{a}$ due to $\hmleps\hmlands\set{\hmlneg\hmleps\hmlobs{\literal{a}}\hmltrue}$.
However, as a distinction by $\hmlneg \varphi$ in one direction implies one by $\varphi$ in the other, we know that this difference is ironed out once we consider the equivalence $\beq{WB}$.
:::

Another point of interest is the relationship of weak bisimilarity, contrasimilarity and stable bisimilarity.
@rem-synonymous-coordinates on synonymous coordinates has mentioned that $(\infty, \infty, 0, 0, \infty, \infty) \in \notions^\literal{strong}$, which disallows positive conjuncts, already characterizes strong bisimilarity.
Translating this coordinate to the weak spectrum, we hit $(\infty, 0, \infty, 0, 0, 0, \infty, \infty)$ or $(\infty, 0, 0, \infty, 0, 0, \infty, \infty) \in \notions^\literal{weak}$.
In the weak spectrum, these coordinates correspond to differing notions!
The first of the two is exactly the coordinate of contrasimilarity.
The other one describes observations that are equally expressive to stable bisimulation observations,
because stabilized positive conjuncts can be normalized away by {{<isb theorem HML_SRBB LTS_Tau.srbb_stable_Neg_normalizable_set>}}
$$\semantics{\hmleps\hmlands \set{\hmlneg\hmlobs{\tau}, \varphi_1, \hmlneg\varphi_2,\ldots }} =
\semantics{\hmleps\hmlands \set{\hmlneg\hmlobs{\tau}, \hmlneg\hmleps\hmlands \set{\hmlneg\hmlobs{\tau}, \hmlneg\varphi_1}, \hmlneg\varphi_2,\ldots }}.$$
In this sense, contrasimulation and stable bisimilarity are sibling notions in the same manner as weak failures and stable failures of @sec-abstraction-failures.^[
  This is also the topic of @bm2024contrasimilarityInfComp [§ 7.3]
]
We use the higher coordinate $(\infty, 0, 0, \infty, 0, \infty, \infty, \infty)$ with positive conjuncts for stable bisimulation in @fig-weak-spectrum to underscore that stable bisimulation preorder is finer than stable simulation preorder and its variants.

{{< paragraph_heading "Simulation-like notions." >}}
@fig-weak-grammars-sim-like adds the simulation-like notions for completeness.
At this point, they are not particularly interesting.

:::{#fig-weak-grammars-sim-like fig-pos='tp'}

```tikz
\parbox{12cm}{
  \begin{align*}
  \intertext{
    Weak simulation, $\notionname{1WS}$ at $(\infty,0,\mathhl{\infty},0,0,\mathhl{\infty},0,0)$:
  }
    \varphi_\notionname{1WS} \grammardef &
      \grammarsp \hmleps\hmlobs{a}\varphi_\notionname{1WS}
      \grammaror \mathhl{\hmleps\hmlands \set{ \psi_\notionname{1WS}, \psi_\notionname{1WS}, \ldots }}
      \grammaror \mathdl{\varphi_\notionname{WU}} \\
    \psi_\notionname{1WS} \grammardef &
      \grammarsp \mathhl{\hmleps\hmlobs{a}\varphi_\notionname{1WS}}
      \grammaror \mathdl{\hmleps\hmlands \set{ \psi_\notionname{1WS}, \psi_\notionname{1WS}, \ldots }}\\
  \intertext{
    Weak ready simulation, $\notionname{WRS}$ at $(\infty,0,\infty,0,0,\infty,\mathhl{1},\mathhl{1})$:
  }
    \varphi_\notionname{WRS} \grammardef &
      \grammarsp \hmleps\hmlobs{a}\varphi_\notionname{WRS}
      \grammaror \hmleps\hmlands \set{ \psi_\notionname{WRS}, \psi_\notionname{WRS}, \ldots }
      \grammaror \mathdl{\varphi_\notionname{WU}} \\
    \psi_\notionname{WRS} \grammardef &
      \grammarsp \mathhl{\hmlneg\hmleps\hmlobs{a}\varphi_\notionname{WU^*}}
      \grammaror \hmleps\hmlobs{a}\varphi_\notionname{WRS}
      \grammaror \mathdl{\hmleps\hmlands \set{ \psi_\notionname{WRS}, \psi_\notionname{WRS}, \ldots }}
      \grammaror \mathdl{\hmlneg\hmleps\varphi_\notionname{WU^*}} \\
    \varphi_\notionname{WU^*} \grammardef &
      \grammarsp \hmltrue
      \grammaror \mathdl{\hmleps\hmlands\set{\varphi_\notionname{WU^*}, \varphi_\notionname{WU^*}, \ldots}} \\
  \intertext{
    2-nested weak simulation, $\notionname{2WS}$ at $(\infty,0,\infty,0,0,\infty,\mathhl{\infty},1)$:
  }
    \varphi_\notionname{2WS} \grammardef &
      \grammarsp \hmleps\hmlobs{a}\varphi_\notionname{2WS}
      \grammaror \hmleps\hmlands \set{ \psi_\notionname{2WS}, \psi_\notionname{2WS}, \ldots }
      \grammaror \mathdl{\varphi_\notionname{WU}} \\
    \psi_\notionname{2WS} \grammardef &
      \grammarsp \mathhl{\hmlneg\psi_\notionname{1WS}}
      \grammaror \hmleps\hmlobs{a}\varphi_\notionname{2WS}
      \grammaror \mathdl{\hmleps\hmlands \set{ \psi_\notionname{2WS}, \psi_\notionname{2WS}, \ldots }} \\
  \intertext{
    $\eta$-simulation, $\eta\notionname{S}$ at $(\infty,\mathhl{\infty},\infty,0,0,\infty,0,0)$:
  }
    \varphi_{\eta\notionname{S}} \grammardef &
      \grammarsp \psi_{\eta\notionname{S}}
      \grammaror \mathdl{\varphi_\notionname{WU}} \\
    \psi_{\eta\notionname{S}} \grammardef &
      \grammarsp \hmleps\hmlobs{a}\varphi_{\eta\notionname{S}}
      \grammaror \hmleps\hmlands \set{ \mathhl{\hmlsoft{\alpha}\varphi_{\eta\notionname{S}}}, \psi_{\eta\notionname{S}}, \psi_{\eta\notionname{S}}, \ldots }
      \grammaror \hmleps\hmlands \set{ \psi_{\eta\notionname{S}}, \psi_{\eta\notionname{S}}, \ldots }\\
  \intertext{
    Stable simulation, $\notionname{SS}$ at $(\infty,0,0,\mathhl{\infty},0,\infty,0,\mathhl{1})$:
  }
    \varphi_\notionname{SS} \grammardef &
      \grammarsp \hmleps\hmlobs{a}\varphi_\notionname{SS}
      \grammaror \hmleps\hmlands \set{ \mathhl{\hmlneg\hmlobs{\tau}\hmltrue}, \psi_\notionname{SS}, \psi_\notionname{SS}, \ldots }
      \grammaror \varphi_\notionname{WU} \\
    \psi_\notionname{SS} \grammardef &
      \grammarsp \mathdl{\hmleps}\hmlobs{a}\varphi_\notionname{SS}
      \grammaror \mathdl{\hmleps\hmlands \set{ \hmlneg\hmlobs{\tau}\hmltrue, \psi_\notionname{SS}, \psi_\notionname{SS}, \ldots }}
      \grammaror \mathdl{\hmlneg \varphi_\notionname{WU}}\\
  \intertext{
    Stable ready simulation, $\notionname{WRS^s}$ at $(\infty,0,0,\mathhl{\infty},0,\infty,\mathhl{1},1)$:
  }
    \varphi_\notionname{WRS^s} \grammardef &
      \grammarsp \hmleps\hmlobs{a}\varphi_\notionname{WRS^s}
      \grammaror \hmleps\hmlands \set{ \mathhl{\hmlneg\hmlobs{\tau}\hmltrue}, \psi_\notionname{WRS^s}, \psi_\notionname{WRS^s}, \ldots }
      \grammaror \varphi_\notionname{WU} \\
    \psi_\notionname{WRS^s} \grammardef &
      \grammarsp \mathhl{\hmlneg\hmleps\hmlobs{a}\varphi_\notionname{WU}}
      \grammaror \mathdl{\hmleps}\hmlobs{a}\varphi_\notionname{WRS^s}
      \grammaror \mathdl{\hmleps\hmlands \set{ \hmlneg\hmlobs{\tau}\hmltrue, \psi_\notionname{WRS^s}, \psi_\notionname{WRS^s}, \ldots }} \\
  \end{align*}
}
```

Grammars induced by coordinates for weak simulation-like notions of equivalence.
:::

@bj2025silentStepSpectroscopyJournal contains proofs that the observation languages for weak simulation and $\eta$-simulation correspond to their relational definitions (@def-weak-bisimilarity).{{<isb theorem Eta_Bisimilarity LTS_Tau.eta_sim_coordinate>}}

:::{#rem-spurious-conjuncts}
#### Spurious conjuncts and minimality

Several of our weak grammars allow bogus trivial conjuncts.
The most severe case might be the trees of ultimately empty conjunctions of $\chi_\notionname{WU^x}$ for contrasimulation.
A natural impulse might be to somehow change the grammar to optimize these parts away, ensuring a nicer output of distinguishing formulas in the spectroscopy.

But this optimization would be premature in our context!
Spectroscopy strategy formulas will never contain trivial conjuncts, by design, because those can not be distinguishing.
Even more, the minimal winning budgets in the spectroscopy game will only ever lead to witness formulas that are minimal with respect to syntactic expressiveness prices.
Therefore, optimizing away superfluous conjuncts in the grammars would itself be superfluous.

On the other hand, shrinking the languages would call for additional contexts, that is, non-terminals in the grammar.
But more non-terminals mean additional kinds of spectroscopy game positions and moves, thus making the spectroscopy game more complex for nothing.
:::

## Discussion {#sec-weak-spectrum-discussion}

With this chapter, we have explored the space of weak behavioral equivalences in concurrency theory, focusing on their modal characterizations and relationships within the weak spectrum, following @glabbeek1993ltbt.
This adds the preliminaries to consider their decision procedures in @sec-weak-spectorscopy.

{{< paragraph_heading "The power of weakness." >}}
In examples, we have seen how weak equivalences handle internal nondeterminism due to communication in different ways.
Practical scenarios, such as parallelizing compilers and process abstraction of @sec-case-stduies-other-eqs, reveal the possibilities and limitations of the different design decisions behind process equivalences.

Following @idea-weak-hml, our modal logic characterization through $\hmlsrbb$ captures a rich weak spectrum between stability-respecting branching bisimilarity and weak trace equivalence.
This adds to the rich body of work on *modal characterizations of branching bisimilarity* by @nicolaVaandrager1995threeLogicsBB, @fokkinkGL19DivCong3, @geuvers2022, and @geuversGolov2023positiveBB.

Our spectrum, however, leaves out some classical notions such as stable failure traces and coupled simulation, which would have called for even more dimensions in the already 8-dimensional pricing metric.^[
  Especially for coupled similarity, this gap is ironic, as my research into game characterizations of equivalences has been kicked off by an interest in decision procedures for coupled similarity in @bn2019coupledsimTacas and @bnp2020coupledsim30.
]

{{< paragraph_heading "What's next?" >}}
Logic and pricing metric are designed in such a way that readers of preceding chapters might already be able to guess how they will translate to game moves for stable and branching conjunctions in the next chapter.
Call this avenue for gamification yet another perk of modal characterizations---besides the benefits of built-in transitivity and consistency, we have noticed along the way of this chapter!