# Recharting the Weak Silent-Step Spectrum {#sec-weak-spectrum}

::: {.content-hidden when-format="pdf"}
{{< include style/macros.md >}}
:::


## Weak Equivalences in General {#sec-weak-equivalences-in-general}

For practical problems, the equivalences we have discussed so far usually are *too strong*.
They notice where in a process the *internal action* $\tau$ happens, that is: 
$$\literal{a} \nbeq{} \ccsprefix{\tau} \literal{a} \nbeq{} \ccsprefix{\tau} \ccsprefix{\tau} \literal{a} \nbeq{} \ccsprefix{\tau}\ccsprefix{\literal{a}} \tau  \nbeq{} \ccsprefix{\literal{a}} \tau$$
For real-world models, we want equivalences to disregard such kinds of internal behavior as “silent”  when comparing processes, such that:
$$\literal{a} \beq{} \ccsprefix{\tau} \literal{a} \beq{} \ccsprefix{\tau} \ccsprefix{\tau} \literal{a} \beq{} \ccsprefix{\tau}\ccsprefix{\literal{a}} \tau  \beq{} \ccsprefix{\literal{a}} \tau$$
Equivalences with this feature are called *weak*, alluding to the fact that they are less distinctive than the “strong” equivalences that treat $\tau$ like any other action.

@fig-simple-weak-eq shows the (strong-bisimulation-minimal) transition system of the example processes we would like to equate in weak equivalences.

:::{#fig-simple-weak-eq .column-margin}
```tikz
\begin{tikzpicture}[auto,node distance=1.5cm,
    rel/.style={dashed,blue}]
  \node[state] (tta){$\ccsprefix{\tau}\ccsprefix{\tau}\literal{a}$};
  \node[state, below of=tta] (ta){$\ccsprefix{\tau}\literal{a}$};
  \node[state, below of=ta] (a){$\literal{a}$};
  \node[state, node distance=2.5cm, below of=a] (Null){$\ccsnull$};
  \node[state, right of=tta] (tat){$\ccsprefix{\tau}\ccsprefix{\literal{a}}\tau$};
  \node[state, below of=tat] (at){$\ccsprefix{\literal{a}}\tau$};
  \node[state, node distance=2.5cm, below of=at] (t){$\tau$};
  \path[->]
    (tta)
      edge node[swap] {$\tau$} (ta)
    (ta)
      edge node[swap] {$\tau$} (a)
    (a)
      edge[thick] node[swap] {$\literal{a}$} (Null)
    (tat)
      edge node {$\tau$} (at)
    (at)
      edge[thick] node {$\literal{a}$} (t)
    (t)
      edge node {$\tau$} (Null);
  \begin{pgfonlayer}{bg}
    \draw[blue, double, dotted, double distance=16mm, cap=round]
      (tta.center)--(tat.center)--(at.center)--(a.center)--(ta.center)--(tta.center);
    \draw[blue, double, dotted, double distance=16mm, cap=round]
      (Null.center)--(t.center);
  \end{pgfonlayer}
\end{tikzpicture}
```

Processes we would like to equate in weak equivalences.
:::

The basic principle is that weak equivalences should maintain that some internal behavior happening before or after a visible action does not make a difference from the point of view of an observer.
But this idea leads into a lot of fine points.

### Silent Transitions {#sec-silent-transitions}

:::{#def-transition-systems-with-silent-steps}

For transition systems $\system=(\states,\actions,\step{})$ with an *internal action* $\tau \in \actions$, we call $\step{\tau}$-transitions “silent” and define special transition relations plus HML modalities, where $\actionsvis \defeq \actions \setminus \set{\tau}$ denotes “visible” actions:

Internal transition relation
: $p \stepweak p'$ iff $p \step{\tau}^* p'$, where $\step{\tau}^*$ is the reflexive transitive closure of silent steps.{{<isb inductive LTS LTS_Tau.silent_reachable>}}
: The *internal* modality $\hmleps \varphi$ has $p \in \semantics{\hmleps\varphi}$ iff there is $p' \in \semantics{\varphi}$ with $p \stepweak p'$.

Optional transition relation
: $p \stepopt{\alpha} p'$ iff $p \step{\alpha} p'$, or if $\alpha = \tau$ and $p = p'$.{{<isb abbreviation LTS LTS_Tau.soft_step>}}
: We accompany it by the *optional* step modality $\hmlopt{\alpha} \varphi$ with $p \in \semantics{\hmlopt{\alpha}\varphi}$ iff there is $p' \in \semantics{\varphi}$ with $p \stepopt{\alpha} p'$.

Weak word steps
: $p \stepweakword{\vec w} p'$ for $\vec w = (w_1 w_2 \dots w_n) \in \actionsvis^*$ iff there is a path $p_i \stepweak\step{w_i} p_{n+1}$ for $i < n$ with $p_0 = p$ and $p_n \stepweak p'$.

Stable state
: A state $p$ is called *stable* iff $p \nostep{\tau}$.{{<isb abbreviation LTS LTS_Tau.stable_state>}}
: (In HML, we can use $\hmlneg\hmlobs{\tau}\hmltrue$ to express stabilization.)

Divergent state
: A state $p$ is called *divergent* iff it allows an infinite sequence of $\tau$-transitions, $p \step{\tau}^\omega$.
: TODO: Add diverges-while ?

Again, we implicitly lift the relations to sets of states, that is for instance, $P \stepweak P'$ (with $P, P' \subseteq \states$) iff $P' = \set{ p' \in \states \mid \exists p \in P \ldotp p \stepweak p'}$.
:::

In upcoming definitions and facts, we use the convention that $\alpha$ continues to stand for elements of $\actions$, while $a$ comes from $\actionsvis = \actions \setminus \set{\tau}$.

:::{#rem-expressiveness-weak-hml}
Note that the notation for $\hml$-operators $\hmleps \dots$ and $\hmlopt{\alpha}\dots$ introduced in @def-transition-systems-with-silent-steps does not affect the expressiveness of $\hml$.
To see why, assume notation for disjunction $\bigvee_{i \in I} \psi_i \defeq \hmlneg\hmland{i}{I} \hmlneg\psi_i$, and for $n$-time application of an operator.
Then, $\semantics{\hmleps\varphi} = \semantics{\bigvee_{n \in \nats} \hmlobs{\tau}^n \varphi}$.
Also, $\semantics{\hmlopt{\tau}\varphi} = \semantics{\bigvee\set{\varphi, \hmlobs{\tau}\varphi}}$ and $\semantics{\hmlopt{a}\varphi} = \semantics{\hmlobs{a}\varphi}$.
:::

### Weak Traces and Weak Bisimulation

It is quite straightforward how to lift traces from the strong setting of @def-traces and @def-trace-eq to the weak setting:
Allow internal $\stepweak$-behavior in between.

::: {#def-weak-traces}
#### Weak Traces, Preorder, and Equivalence

The set of *weak traces* of a state $\wtraces{p} \subseteq \actionsvis^*$ is defined as $\vec w \in \wtraces{p}$ iff there is $p'$ such that $p \stepweakword{\vec w} p'$.{{<isb abbreviation LTS LTS_Tau.weak_traces>}}^[
  The Isabelle theory has a slightly different definition that also allows $\tau$s in the trace words, which do not necessary stand for proper $\step{\tau}$-steps.
]

Two states are *weakly trace-preordered*, $p \bpreord{WT} q$, if $\wtraces{p} ⊆ \wtraces{q}$.{{<isb definition LTS LTS_Tau.weakly_trace_preordered>}}
As usual, if both directions are maintained, the states are called *weakly trace-equivalent*, $p \beq{WT} q$.
:::

The blue groups of states in @fig-simple-weak-eq are weakly trace equivalent.
Moreover, they also are related by the stronger notions of weak bisimulation and simulation.

::: {#def-weak-bisimilarity}
#### Weak Simulation, Preorder and Equivalences

A relation, $\rel R ⊆ \states × \states$, is called a *weak simulation* if, for each $(p, q) ∈ \rel R$,

- if $p \step a p'$ with $a ∈ \actionsvis$, there is a $q'$ with $q \stepweak\step{a}\stepweak q'$ and $(p', q') ∈ \rel R$; and
- if $p \step \tau p'$, there is a $q'$ with $q \stepweak q'$ and $(p', q') ∈ \rel R$.

Weak simulation preorder, weak simulation equivalence and weak bisimilarity analogously to @def-bisimilarity:

- $p$ is *weakly simulated by* $q$, $p \bpreord{WS} q$, iff there is a weak simulation $\rel R$ with $(p, q) ∈ \rel R$.
- $p$ is *weakly similar* to $q$, $p \beq{WS} q$, iff $p \bpreord{WS} q$ and $q \bpreord{WS} p$.
- $p$ is *weakly bisimilar* to $q$, $p \beq{WB} q$, iff there is a *symmetric* weak simulation $\rel R$ (i.e. $\rel R = \inverse{\rel R}$) with $(p, q) ∈ \rel R$.
:::

All three weak equivalences maintain that the small example processes of the introduction to @sec-weak-equivalences-in-general are equal.

::: {#exm-phil-weak-eqs}
For the processes of @exm-ts (repeated in @fig-ts-determinism-repeated), the weak traces would be $\wtraces{\literal{P}} = \set{\emptyword, \literal{a}, \literal{b}} = \wtraces{\literal Q}$.
Consequently, $\literal P$ and $\literal Q$ are weakly trace-equivalent, $\literal P \beq{WT} \literal Q$.

In @exm-phil-sim, we have observed that the two processes are not (strongly) similar because $\literal Q \nbpreord{S} \literal P$ due to $\hmlobs{τ}\hmlands\set{\hmlobs{\literal a}, \hmlobs{\literal b}}$.
Due to the weakening, however, there is a weak simulation for this direction, namely:
$\set{(\literal{Q}, \literal{P}), (\literal{q_{ab}}, \literal{P}), (\literal{q_1}, \literal{p_1}), (\literal{q_2}, \literal{p_2})}$.
Therefore, $\literal P \beq{WS} \literal Q$!
A mutual weak simulation $R_{\literal{PQ}}$ to justify this is drawn in dashed blue in @fig-ts-determinism-repeated.

::::{#fig-ts-determinism-repeated}
```tikz
\begin{tikzpicture}[->,auto,node distance=2cm,
    rel/.style={dashed,blue}]
  \node[state] (P){$\literal{P}$};
  \node[state, below left of=P] (PA){$\literal{p_a}$};
  \node[state, below right of=P] (PB){$\literal{p_b}$};
  \node[state, below of=PA] (P1){$\literal{p_1}$};
  \node[state, below of=PB] (P2){$\literal{p_2}$};
  \path
    (P)
      edge node[swap] {$\tau$} (PA)
      edge node {$\tau$} (PB)
    (PA)
      edge node {$\literal{a}\vphantom{\literal{b}}$} (P1)
    (PB)
      edge node {$\literal{b}$} (P2);

  \node[state, right=5cm of P] (Q){$\literal{Q}$};
  \node[state, below of=Q] (QAB){$\literal{q_{ab}}$};
  \node[state, below left of=QAB] (Q1){$\literal{q_1}$};
  \node[state, below right of=QAB] (Q2){$\literal{q_2}$};
  \path
    (Q)
      edge node {$\tau$} (QAB)
    (QAB)
      edge node[swap] {$\literal{a}\vphantom{\literal{b}}$} (Q1)
      edge node {$\literal{b}$} (Q2);
   \path[rel]
    (P) edge[<->, bend left=15] node {$\rel R_{\literal{PQ}}$} (Q)
    (PA) edge[->, bend left=10] node {} (Q)
    (PB) edge[->, bend left=10] node {} (Q)
    (QAB) edge[->, bend right=10] node {} (P)
    (P1) edge[<->, bend left=15] node {} (Q1)
    (P2) edge[<->, bend left=15] node {} (Q2);
\end{tikzpicture}
```

A mutual weak simulation on the original philosopher example.
::::

However, $\literal P$ and $\literal Q$ are not weakly bisimilar.
The reason is that the left process can weakly $\stepweak$-transition to a position where $\literal{b}$ is impossible, even if we would allow for some more internal $\stepweak$-behavior in between.
In HML, this difference could be expressed by $\hmleps \hmlneg \hmleps \hmlobs{\literal{b}}$.
:::

::: {#def-abstraction-notion}
#### Abstractions

We say that a weak notion of equivalence $\notionname{W}N$ *abstracts a strong notion* $N$ iff $\bpreord{W\mathit{N}} = \bpreord{N}$ for all transition systems without $\tau$-transitions.
:::

By this nomenclature, weak trace preorder, weak simulation preorder, and weak bisimilarity are abstractions of their strong counterparts from @sec-preliminaries.
But, as we will see in the next sections, there might be *multiple* abstractions of the same strong notion.

### HML of Stability-Respecting Branching Bisimilarity {#sec-hml-srbb}

As noted in @rem-expressiveness-weak-hml, our $\hml$ notation for weak observations does not affect expressiveness---thus it still characterizes strong bisimilarity by @thm-hennessy-milner.
To characterize weak equivalences, we have to select appropriate subsets.
We will use the following sublogic that, naturally, must be designed to correspond to the strongest weak notion we will be interested in.

:::{#def-hml-srbb}

#### Branching Hennessy--Milner Logic
We define *stability-respecting branching* Hennessy--Milner modal logic,
$\hmlsrbb$, over an alphabet of actions $\actions$ by the following context-free grammar starting with $\varphi$:{{<isb datatype HML_SRBB hml_srbb>}}
$$
\begin{array}{rllr}
    \varphi {} ::= {} & \hmleps\chi & & \text{“delayed observation”} \\
        | \quad & \hmlands \set{\psi, \psi, ...} & & \text{“immediate conjunction”} \\
    \chi {} ::= {} & \hmlobs{a}\varphi & \quad\text{with } a \in \actionsvis & \text{“observation”} \\
    | \quad & \hmlands \set{\psi, \psi, ... } & & \text{“standard conjunction”} \\
    | \quad & \hmlands \set{\hmlneg\hmlobs{\tau}\hmltrue, \psi, \psi, ...} & & \text{“stable conjunction”} \\
    | \quad & \hmlands \set{\hmlopt{\alpha}\varphi, \psi, \psi, ...} &
    \quad \text{with } \alpha \in \actions & \text{“branching conjunction”} \\
    \psi {} ::= {} & \hmlneg\hmleps\chi \mid \hmleps\chi & & \text{“negative / positive conjuncts”}
\end{array}
$$
We consider the semantics of $\hmlsrbb$ to be given by @def-hml-semantics and @def-transition-systems-with-silent-steps.
:::

The name already alludes to $\hmlsrbb$ as a whole characterizing *stability-respecting branching bisimilarity*, which is a comparably strong abstraction of bisimilarity, a “strong weak bisimilarity,” so to speak.

::: {#def-stability-respecting}
  We call a $\rel R$ *stability-respecting* iff,
  for each $(p,q) \in \rel R$ with $p \nostep{\tau}$,
  there is some $q'$ with $q \stepweak q' \nostep{\tau}$ and $(p, q') \in \rel R$.{{<isb definition LTS LTS_Tau.stability_respecting>}}
:::

::: {#def-branching-bisim}
  A symmetric relation $\rel{R}$ is a *branching bisimulation*
  if, for all $(p,q) \in \rel R$, a step $p \step{\alpha} p'$ implies
    (1) $\alpha = \tau$ and $(p', q) \in \rel R$,
    or (2) $q \stepweak q' \step{\alpha} q''$ for some $q', q''$ with $(p, q') \in \rel R$ and $(p', q'') \in \rel R$.{{<isb definition Branching_Bisimilarity LTS_Tau.branching_simulation>}}

  If there is a stability-respecting branching bisimulation $\rel R_{BB^{sr}}$ with $(p_0, q_0) \in \rel R_{BB^{sr}}$, then $p_0$ and $q_0$ are *stability-respecting branching bisimilar*.
:::

The power of @def-hml-srbb to distinguish mirrors exactly the power of @def-branching-bisim to equate:

::: {#thm-srbb-characterization}

$\hmlsrbb$ characterizes stability-respecting branching bisimilarity, that is,
there is a stability-respecting branching bisimulation $\rel R$ with $(p,q) \in \rel R$
precisely if there is no formula $\varphi \in \hmlsrbb$ with $p \in \semantics{\varphi}$ and $q \notin \semantics{\varphi}$.{{<isb lemma Branching_Bisimilarity LTS_Tau.sr_branching_bisim_is_hmlsrbb>}}
:::

The paper proof in @bj2025silentStepSpectroscopyJournal proceeds quite similarly to other Hennessy–Milner theorems, as showcased in @thm-hennessy-milner.

The example process groups of @fig-simple-weak-eq are stability-respecting branching bisimilar, as desired.
But branching bisimilarity is more distinctive than weak bisimilarity:

::: {#exm-non-bb-procs}

Compare $\literal{P_{ab}} \defeq \literal{a} \ccschoice \ccsprefix{\tau} \literal{b} \ccschoice \literal{b}$
and a subgraph-variant $\literal{P_{a\tau b}} \defeq \literal{a} \ccschoice \ccsprefix{\tau} \literal{b}$, where the $\literal{b}$ is *only* possible after committing to its branch.
The processes are not branching bisimilar as
$\hmleps\hmlands\set{\hmlopt{\literal{b}}, \hmleps\hmlobs{\literal{a}}}$ distinguishes them.
Intuitively, the formula expresses that, right at the moment when $\literal{b}$ can happen, $\literal{a}$ is still (weakly) possible.

But the processes are weakly bisimilar, as weak bisimilarity does not care about branching due to $\tau$-steps that can also be achieved by visible actions.
A formal argument would be that $\identity{\states} \cup \set{(\literal{P_{ab}}, \literal{P_{a\tau b}}), (\literal{P_{a\tau b}}, \literal{P_{ab}})}$ is a symmetric weak simulation.
:::

::: {#rem-equivalence-indeed}
#### An Equivalence Indeed

It is a popular anecdote among those who know branching bisimilarity that the proof of its transitivity “assumed” originally does not exist.
Six years after branching bisimilarity's inception, @bastern1996branchingBisimEqIndeed closes the gap by a proof that is surprisingly complex.

In our setting, the transitivity is an *immediate corollary* of having a modal characterization (@thm-srbb-characterization).{{<isb lemma Branching_Bisimilarity LTS_Tau.sr_branching_bisimulated_transitive>}}
This is one of the perks of modal characterizations, indeed (cf. @sec-perks-modal-characterizations).
:::

## Case Studies—and the Need for Other Equivalences {#sec-case-stduies-other-eqs}

### Parallelizing Compiler Optimization

Most of computer speed up in the last two decades has been due to parallelization of computation.
Compilers will usually drift and parallelize sequential commands of a program.
The claim behind such optimizations is that the communication behavior of the program stays the same.^[
  In other regards, the program obviously differs.
  It is the intention to change performance!
]
So naturally, the program and the optimized program should be equivalent with respect to some notion of equivalence.

@bell2014loopParallelizingTransformations ventures to prove that certain parallelizations of loops during compilation are sound.
This runs into the problem that weak bisimilarity is too strong for this use case.
The following example (adapted from @bell2013certifiably) shows why.

:::{#exm-parallelizing-compilation}

Consider the following sequential program $\literal{P_{Seq}}$, which computes `x` (with possible values `A` and `B`), prints a header (`output:`) and then the computed value:

::::{#fig-parallelized-ts .column-margin}

```tikz
\begin{tikzpicture}[auto,node distance=1.5cm]
  \node[] (PSeq){$\literal{P_{Seq}}$};
  \node[below left of=PSeq] (p1){$\circ$};
  \node[below right of=PSeq] (p2){$\circ$};
  \node[below of=p1] (p3){$\literal{p_a}$};
  \node[below of=p2] (p4){$\literal{p_b}$};
  \node[below right of=p3] (p5){$\circ$};
  \path[->]
    (PSeq)
      edge[swap] node {$\tau$} (p1)
      edge node {$\tau$} (p2)
    (p1)
      edge[swap, thick] node {$\literal{ao}$} (p3)
    (p2)
      edge[thick] node {$\literal{ao}$} (p4)
    (p3)
      edge[thick, swap] node {$\literal{A}$} (p5)
    (p4)
      edge[thick] node {$\literal{B}$} (p5);
\end{tikzpicture}
```
```tikz
\begin{tikzpicture}[auto,node distance=1.5cm]
  \node[] (PPara){$\literal{P_{Para}}$};
  \node[below left of=PPara] (p1){$\circ$};
  \node[below right of=PPara] (p2){$\circ$};
  \node[below of=PPara] (p23){$\literal{p_{ab}}$};
  \node[below of=p1] (p3){$\circ$};
  \node[below of=p2] (p4){$\circ$};
  \node[below of=p3, node distance=1cm] (p31){$\circ$};
  \node[below of=p4, node distance=1cm] (p41){$\circ$};
  \node[below right of=p31] (p5){$\circ$};
  \path[->]
    (PPara)
      edge[swap] node {$\tau$} (p1)
      edge node {$\tau$} (p2)
      edge[thick] node {$\literal{ao}$} (p23)
    (p1)
      edge[swap, thick] node {$\literal{ao}$} (p3)
    (p2)
      edge[thick] node {$\literal{ao}$} (p4)
    (p23)
      edge[swap] node {$\tau$} (p3)
      edge node {$\tau$} (p4)
    (p3)
      edge[swap] node {$\tau$} (p31)
    (p4)
      edge node {$\tau$} (p41)
    (p31)
      edge[thick, swap] node {$\literal{A}$} (p5)
    (p41)
      edge[thick] node {$\literal{B}$} (p5);
\end{tikzpicture}
```

Transition systems representing $\literal{P_{Seq}}$ and $\literal{P_{Para}}$.
::::

```ruby
x = compute_A_or_B()
print("output:")
print(x)
```

A parallelization would find that the rendering of the header `output:` is independent of the computation of `x` and can thus be parallelized to $\literal{P_{Para}}$:

```ruby
x = compute_A_or_B() || print("output:")
print(x)
```

The `||` connector is supposed to mean a parallel execution of commands that synchronizes the branches at the end.
In real-world programming languages, this would happen through spawning and joining subprocesses, future objects, or `async` segments.

@fig-parallelized-ts shows the transition systems of the two programs.
The $\tau$-steps mark internal computation or synchronization.
The action $\literal{ao}$ stands for `print("output:")` announcing the coming output, and $\literal{A}$ and $\literal{B}$ are the values of `x` that are actually produced by `print(x)`.

Clearly, $\literal{P_{Seq}}$ and $\literal{P_{Para}}$ have the same weak traces.
But they do not weakly simulate each other:
$\literal{P_{Para}}$ can perform a $\step{\literal{ao}}$-transition, immediately after which $\literal{A}$ and $\literal{B}$ are weakly possible at $\literal{p_{ab}}$.
The sequential $\literal{P_{Seq}}$ has no such states.
:::

@bell2013certifiably proposes “eventual bisimilarity” as a new bisimulation-like notion to equate $\literal{P_{Seq}}$ and $\literal{P_{Para}}$.
In @bm2024contrasimilarityInfComp, we discuss how two more standard notions from the original spectrum neatly equate the processes:
Stable bisimilarity and contrasimilarity.

::: {#def-stablebisim}
#### Stable Bisimulation

A *stable bisimulation* is a relation $\rel R$ where,
for all $(p,q) \in \rel R$ with $\vec w \in \actionsvis$ and $p \stepweakword{\vec w} p'$,
there is a $q'$ with $q \stepweakword{\vec w} q'$,
and, in case $p'$ is stable, moreover $(q', p') \in \rel R \cap \inverse{\rel R}$.
The *stable bisimilarity* $\beq{SB}$ is defined as in @def-weak-bisimilarity.
:::

On the programs of @exm-parallelizing-compilation,
there is a stable bisimulation, connecting $\literal{P_{Seq}}$ and $\literal{P_{Para}}$ as well as the stable states with matching positions.
Intuitively, stable bisimilarity is allowed to “skip” intermediate that would break the bisimulation---such as $\literal{p_{ab}}$ in our example.

As we argue in @bm2024contrasimilarityInfComp, stable bisimilarity, in many ways, is better understood not as a stable variant of bisimilarity, but of *contrasimilarity*: 

::: {#def-contrasim}
#### Contrasimulation

A *contrasimulation* is a relation $\rel R$ where, for all $(p,q) \in \rel R$ with $\vec w \in \actionsvis$ and $p \stepweakword{\vec w} p'$, there is a $q'$ with $q \stepweakword{\vec w} q'$ and $(q', p') \in \rel R$.^[Note that $p'$ and $q'$ swap sides in the consequent!]
The *contrasimulation preorder* $\bpreord{C}$ and *contrasimilarity* $\beq{C}$ are defined as in @def-weak-bisimilarity.
:::

Contrasimilarity allows *local asymmetry* in matching internal transitions.
A witness relation for @exm-parallelizing-compilation would also include $(\literal{p_a}, \literal{p_{ab}})$ and $(\literal{p_b}, \literal{p_{ab}})$.
The intuition is that contrasimulation preorder allows states to slightly get ahead of their counterparts---$\literal{p_a}$ is mor committed than $\literal{p_{ab}}$---as long as the latter can catch up silently.

Contrasimilarity and stable bisimilarity, both are at the weak end of abstractions of bisimilarity,
“weakest” bisimilarities, one could say.
We discuss them and their characterizations in great detail in @bm2024contrasimilarityInfComp.

Contrasimilarity and stable bisimilarity are nice for proofs as they have coninductive characterizations
They also are more well-behaved than Bell's “eventual bisimilarity,” which fails to be an equivalence if the transition system has divergent states [cf. @bell2014loopParallelizingTransformations § 3.3].

As we will establish in @sec-solution-parallelizing-compilation, contrasimilarity and stable bisimilarity indeed are the finest equivalences from the standard spectrum to equate the sequential and the parallel program.

TODO: Remark on other perk / broken definition in @sangiorgi2012.

### Congruence Properties of Abstraction

```ccs
Ae = (idle.Ae + a)
Be = (idle.Be + b)
Al = (idle.Bl + idle.Al + a)
Bl = (idle.Al + idle.Bl + b)

Pe = (op.Ae + op.Be)
Pl = (op.Al + op.Bl)
@compareSilent Pe, Pl

Pte = Pe \csp {idle}
Ptl = Pl \csp {idle}
@compareSilent Pte, Ptl

@comment "Pe/Pl should be (unstable&stable) readiness equivalent"
@comment "Pte/Ptl are stable, but not unstable (!) failure (and readiness) equivalent"

Pe(x=200, y=10)
Pl(x=500, y=10)
Pte(x=200, y=450)
Ptl(x=500, y=450)
"0"(x=365, y=304)
"0 \csp {idle}"(x=411, y=786)

```

... Closing hint: congruence even messier in the weak spectrum, e.g. weak bisim not congruence for +.


## Expressing the Weak Spectrum with Quantities

### Syntactic Expressiveness

We adapt the notions of @sec-strong-notions for the weak spectrum to distinguish the new kinds of conjunctions:

1. Modal depth of *observations* ($\hmlobs{a}$, $\hmlopt{\alpha}$).
2. **New:** Nesting depth of *branching conjunctions* (with one $\hmlopt{\alpha}$-observation conjunct, not starting with $\hmleps$).
3. **New:** Nesting depth of *unstable conjunctions* (that do not enforce stability by a $\hmlneg \hmlobs{\tau} \hmltrue$-conjunct).
4. **New:** Nesting depth of *stable conjunctions* (that do enforce stability by a $\hmlneg \hmlobs{\tau} \hmltrue$-conjunct).
5. Nesting depth of *immediate conjunctions* (that are not preceded by $\hmleps$).
6. Maximal modal depth of *positive conjuncts* in conjunctions.^[To simplify matters, we drop the two kinds of positive conjunct depths.]
7. Maximal modal depth of *negative conjuncts* in conjunctions.
8. Nesting depth of *negations*.

::: {#def-weak-spectrum}
#### Weak Spectrum

We define the *weak notions of observability* using vectors of extended naturals
$$\notions^\literal{weak} ≔
\natsext^8,
$$
ordered by pointwise comparison of vector components.

We capture the family of weak observation languages $\observationsvar[\literal{weak}]{N \in \notions^\literal{weak}}$ by providing an expressiveness price function $\expr[\literal{weak}] \colon \hmlsrbb \rightarrow \notions^\literal{weak}$ with $\observationsvar[\literal{weak}]{N} = \set{ \varphi \mid \expr[\literal{weak}](\varphi) \leq N}$.{{<isb fun Expressiveness_Price expressiveness_price>}}
It is defined in mutual recursion with $\expr[\varepsilon]$ and $\expr[\wedge]$ as follows---if multiple rules apply, pick the first one:
$$
\begin{array}{rl}
  \expr[\literal{weak}]\left(\hmltrue\right) \defeq
  \expr[\varepsilon]\left(\hmltrue\right) & \defeq
  \zerovec
  \\
  \textstyle\expr[\literal{weak}]\left(\hmleps\chi\right) & \defeq
  \textstyle\expr[\varepsilon]\left(\chi\right)
  \\
  \textstyle\expr[\literal{weak}]\left(\hmlands\Psi\right) & \defeq
  \unit{5} + \textstyle\expr[\varepsilon]\left(\hmlands \Psi\right)
  \\
  \expr[\varepsilon]\left(\hmlobs{a}\varphi\right) & \defeq
  \unit{1} + \expr[\literal{weak}]\left(\varphi\right)
  \\
  \textstyle\expr[\varepsilon]\left(\hmlands \Psi\right) & \defeq
  \sup\;\set{ \expr[\wedge]\left(\psi\right) \mid \psi \in \Psi } +
  \begin{cases}
      \unit{4} & \text{if } \hmlneg\hmlobs{\tau}\hmltrue \in \Psi\\
      \unit{2} + \unit{3} & \text{if there is } \hmlopt{\alpha}\varphi \in \Psi \\
      \unit{3} & \text{otherwise}
  \end{cases}
  \\
  \expr[\wedge]\left(\hmlneg\hmlobs{\tau}\hmltrue\right) & \defeq
  (0,0,0,0,0,0,0,1)
  \\
  \expr[\wedge]\left(\hmlneg\varphi\right) & \defeq
  \sup\;\set{ \unit{8} + \expr[\literal{weak}]\left(\varphi\right),\quad
      (0,0,0,0,0,0,\left(\expr[\literal{weak}]\left(\varphi\right)\right)_1,0) }
  \\
  \expr[\wedge]\left(\hmlopt{\alpha}\varphi\right) & \defeq
  \sup\;\set{ \unit{1} + \expr[\literal{weak}]\left(\varphi\right),\quad
      (0,0,0,0,0,1 + \left(\expr[\literal{weak}]\left(\varphi\right)\right)_1,0,0) }
  \\
  \expr[\wedge]\left(\varphi\right) & \defeq
  \sup\;\set{ \hphantom{\unit{8} + {}} \expr[\literal{weak}]\left(\varphi\right),\quad
      (0,0,0,0,0,\left(\expr[\literal{weak}]\left(\varphi\right)\right)_1,0,0) }
\end{array}
$$
:::

### Weak Spectrum

Using @def-weak-spectrum, we can give coordinates to the common notions of the weak behavioral equivalence in @fig-weak-spectrum.

:::{#fig-weak-spectrum fig-env='figure*' fig-pos='t!'}

```tikz
\newcommand*{\EqCoords}[1]{\textcolor{gray}{\small $#1$}}
\begin{tikzpicture}[auto,node distance=2.5cm,align=center]
  \node (BBs){stability-respecting branching bisim $\notionname{BB^{sr}}$\\
    \EqCoords{\infty,\infty,\infty,\infty,\infty,\infty,\infty,\infty}};
  \node (BB)[below left of=BBs]{branching bisim $\notionname{BB}$\\
    \EqCoords{\infty,\infty,\infty,0,\infty,\infty,\infty,\infty}};
  \node (eB)[xshift=-5mm, below left of=BB]{$\eta$-bisim $\notionname{\eta}$\\
    \EqCoords{\infty,\infty,\infty,0,0,\infty,\infty,\infty}};
  \node (DB)[below right of=BB]{delay bisim $\notionname{DB}$\\
    \EqCoords{\infty,0,\infty,0,\infty,\infty,\infty,\infty}};
  \node (B)[below left of=DB]{weak bisim $\notionname{WB}$\\
    \EqCoords{\infty,0,\infty,0,0,\infty,\infty,\infty}};
  \node (S2)[below left of=B]{$2$-nested weak sim $\notionname{2WS}$\\
    \EqCoords{\infty,0,\infty,0,0,\infty,\infty,1}};
  \node (C)[below right of=B]{contrasim $\notionname{C}$\\
    \EqCoords{\infty,0,\infty,0,0,0,\infty,\infty}};
  \node (RS)[below left of=S2]{weak\\ ready sim $\notionname{WRS}$\\
    \EqCoords{\infty,0,\infty,0,0,\infty,1,1}};
  \node (R)[below right of=RS]{unstable\\ readiness $\notionname{WR}$\\
    \EqCoords{\infty,0,1,0,0,1,1,1}};
  \node (PF)[above right of=R]{weak\\ possible futures $\notionname{WPF}$\\
    \EqCoords{\infty,0,1,0,0,\infty,\infty,1}};
  \node (IF)[below right of=PF]{weak\\ impossible futures $\notionname{WIF}$\\
    \EqCoords{\infty,0,1,0,0,0,\infty,1}};
  \node (S)[below left of=RS]{weak sim $\notionname{1WS}$\\
    \EqCoords{\infty,0,\infty,0,0,\infty,0,0}};
  \node (eS)[above left of=RS]{$\eta$-sim $\notionname{\eta S}$\\
    \EqCoords{\infty,\infty,\infty,0,0,\infty,0,0}};
  \node (F)[below right of=R]{unstable failures $\notionname{WF}$\\
    \EqCoords{\infty,0,1,0,0,0,1,1}};
  \node (T)[below left of=F]{weak traces $\notionname{WT}$\\
    \EqCoords{\infty,0,0,0,0,0,0,0}};
  \node (E)[below of=T, node distance=1.2cm]{weak enabledness $\notionname{WE}$\\
    \EqCoords{1,0,0,0,0,0,0,0}};
  
  \node (DBs)[xshift=12mm, above right of=DB, node distance=1.75cm]{s.-r.\ delay bisim $\notionname{DB^{sr}}$\\
    \EqCoords{\infty,0,\infty,\infty,\infty,\infty,\infty,\infty}};
  \node (SB)[below right of=DBs]{stable bisim $\notionname{SB}$\\
    \EqCoords{\infty,0,0,\infty,0,\infty,\infty,\infty}};
  \node (RSs)[below left of=SB]{stable ready sim $\notionname{WRS^s}$\\
    \EqCoords{\infty,0,0,\infty,0,\infty,1,1}};
  \node (Rs)[below of=RSs, node distance=3cm]{stable readiness $\notionname{WR^s}$\\
    \EqCoords{\infty,0,0,1,0,1,1,1}};
  \node (IFs)[below of=SB, node distance=3cm]{stable imposs.\ fut.\ $\notionname{WIF^s}$\\
    \EqCoords{\infty,0,0,1,0,0,\infty,1}};
  \node (Fs)[below right of=Rs]{stable failures $\notionname{WF^s}$\\
    \EqCoords{\infty,0,0,1,0,0,1,1}};
  %
  \path
  (BBs) edge (BB)
  (BB) edge ([xshift=10mm]eB.north)
  (BB) edge (DB)
  ([xshift=10mm]eB.south) edge (B)
  (eB.south) edge (eS)
  (DB) edge (B)
  (B) edge (S2)
  (B) edge (C)
  (C) edge (IF)
  (S2) edge (RS)
  (S2) edge (PF)
  (RS) edge (S)
  (RS) edge (R)
  (PF) edge (R)
  (PF) edge (IF)
  (eS) edge (S)
  (S) edge (T)
  (IF) edge (F)
  (R) edge (F)
  (F) edge (T)
  (T) edge (E)
  ;
  \path
  (BBs) edge (DBs)
  ([xshift=-4mm]DBs.south) edge ([xshift=-9mm,yshift=-5mm]DBs.south)
  (DBs) edge (SB)
  (SB) edge (RSs)
  (SB) edge (IFs)
  (RSs) edge (Rs)
  (Rs) edge (Fs)
  (IFs) edge (Fs)
  (Fs) edge ([xshift=30mm]T.east)
  ([xshift=30mm]T.east) edge (T.east)
  ;
\end{tikzpicture}
```

Hierarchy of weak behavioral equivalences/preorders, by equivalence notion coordinates.
:::


## Discussion

