---
toc-title: "Chapter 8"
---

# Implementations {#sec-implementations}

::: {.content-visible when-format="html"}
{{< include style/macros-html.md >}}
{{< include style/macros.md >}}
:::

## Prototype: *equiv.io* {#sec-equivio}

### Usage

\begin{align*}
\bnfvar{Id}  \grammardef & \set{\bnflit{A},\ldots \bnflit{Z},\bnflit{a}\ldots \bnflit{z},\bnflit{\_},\bnflit{0}\ldots\bnflit{9}}^+\\
\bnfvar{Str} \grammardef & \bnflit{"} \ldots \bnflit{"}\\
\bnfvar{Act}  \grammardef & \bnfvar{Id} \grammaror \bnfvar{Id}\bnflit{!} \grammaror \tau\\
\bnfvar{Def}  \grammardef & \bnfvar{Id} \bnflit{=} \bnfvar{Proc}\\
\bnfvar{Decl} \grammardef & \bnfvar{Id} [\bnflit{(} \ldots \bnflit{)}] \grammaror \bnfvar{Str} [\bnflit{(} \ldots \bnflit{)}]\\
\bnfvar{Meta} \grammardef & \bnflit{@}\!\bnfvar{Id} \; \bnfvar{Id} \, \set{ \bnflit{,} \bnfvar{Id} }^*\\
\end{align*}


### Application to Peterson's Mutual Exclusion

```ruby
ready = {"A": false, "B": false}
turn  = "A"

def process(ownId, otherId):
  while true:
    ready[ownId] = true
    turn = otherId
    
    do # wait...
    until (ready[otherId] == false || turn == ownId)
      
    print "enter critical #{ownId}"
    # critical section goes here.
    print "leave critical #{ownId}"
    ready[ownId] = false

process("A", otherId = "B") || process("B", otherId = "A")
```

### Program Structure

### Benchmarking

## GPU Implementation: *gpuequiv* {#sec-gpu-equiv}

@vogel2024energyGamesWebGPU

### Usage

### Program Structure

### Benchmarking

## Further Implementations

### Computer Game: *The Spectroscopy Invaders* {#sec-spectro-invaders}

@trzeciakiewicz2021ltbtBrowserGame

### CAAL Extension {#sec-spectroscopy-caal}

@ozegowski2023eqCAAL
mention Timo