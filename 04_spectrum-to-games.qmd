---
title: "Approach: Equivalence Problems as Energy Games"
---

::: {.content-hidden when-format="pdf"}
{{< include style/macros.md >}}
:::

Purpose of section:

- Introduce energy games
- Illustrate approach

## Energy Games

### General Energy Games

To introduce energy games, we generalize the definitions on games (@def-game and the following) to include *energy levels*.

::: {#def-energy-game}
#### Energy Reachability Game

Given a partially ordered set of energies $(\abstractenergies, \leq)$, an *energy reachability game* $\game^üó≤$ is a reachability game $(G, G_\defender, \gamemoveblank)$ extended by an edge labeling of energy updates $\abstractupdate \colon (\gamemoveblank) \to (\abstractenergies \to (\set{‚ä•} \cup \abstractenergies))$.

{{<noindent>}} We denote by $\game^üó≤(g_0, e_0)$ the game played from starting position $g_0 ‚àà G$ with initial energy level $e_0 ‚àà \abstractenergies$.
:::

::: {#def-energy-level}
#### Energy Level

For a finite play $œÅ = {g_0}{g_1}‚Ä¶{g_{n-1}} ‚àà G^{*}$ of $\game^üó≤(g_0, e_0)$, its energy level $\energylevel(œÅ)$ is computed recursively:

- $\energylevel(g_0) ‚âî e_0$
- $\energylevel(g_0‚Ä¶{g_{i+1}}) ‚âî
  \begin{cases}
    \abstractupdate({g_{i}},{g_{i+1}})(\energylevel(g_0‚Ä¶{g_{i}})) & \text{if } \energylevel(g_0‚Ä¶{g_{i}}) \neq ‚ä• \\
    ‚ä•  & \text{otherwise}
  \end{cases}$

{{<noindent>}} For infinite plays $œÅ \in G^œâ$, we define energy levels to equal $‚ä•$.

We consider the attacker to be energy-bound and understand $\energylevel(œÅ) = ‚ä•$ to mean that they have run out of energy.
Thus, we declare plays with $\energylevel(œÅ) = ‚ä•$ to be won by the defender.
:::

We lift positional strategies of @def-strategies to be *energy-positional* in the sense that they pick next moves depending on the current energy level, i.e.\ $\rel F ‚äÜ (G_\attacker √ó \abstractenergies √ó G)$.

Instead of a winning region as in @def-winning-region, we define *winning budgets* for game positions:

::: {#def-winning-budgets}
#### Winning Budgets

For each position $g_0 \in G$ of energy game $\game^üó≤$, the *attacker winning energy budgets*, $\attackerwins(g_0) \subseteq \abstractenergies$ are the energies $e_0$ where the attacker wins $\game^üó≤(g_0, e_0)$.
The defender winning budgets $\defenderwins$ are defined analogously.
:::

Classical energy games use $\nats$-vectors for energies and vector addition for updates.

::: {#exm-simple-energy-game}
Consider vector energies $\abstractenergies = \nats^2$ with point-wise order and the energy game with graph in @fig-simple-energy-game.
Edges are labeled by update vectors $\vec{u} \in \ints^2$, each representing an update function
$$e \mapsto
\begin{cases}
  e + \vec{u} & \text{if } e + \vec{u} \geq \zerovec \\
  ‚ä•        & \text{otherwise.}
\end{cases}
$$

::: {#fig-simple-energy-game}
```tikz
\begin{tikzpicture}[>->, shorten <=1pt, shorten >=0.5pt, auto, node distance=2cm,
  posStyle/.style={draw, inner sep=1ex, minimum size=1cm, minimum width=2.25cm, anchor=center, draw, black, fill=gray!5},
  defender/.style={ellipse, inner sep=0ex}]

  \node[posStyle, initial, initial text={}]
    (Att_1){$\literal{g_1}$};
  \node[posStyle]
    (Att_2) [above right = .5cm and 1cm of Att_1] {$\literal{g_2}$};
  \node[posStyle]
    (Att_3) [below right = .5cm and 1cm of Att_1] {$\literal{g_3}$};
  \node[posStyle, defender]
    (Dfn_4) [right = 4cm of Att_1] {$\literal{g_4}$};
  \node[posStyle]
    (Att_5) [right = 4cm of Att_2] {$\literal{g_5}$};
  \node[posStyle, defender]
    (Dfn_6) [right = 4cm of Att_3] {$\literal{g_6}$};

  \path
    (Att_1)
      edge[bend left = 10] node {$+2,-1$} (Att_2)
      edge[bend right = 10, swap] node {$-1,0$} (Att_3)
    (Att_2)
      edge[bend left = 10] node {$0,0$} (Dfn_4)
    (Att_3)
      edge[bend right = 10, swap] node {$0,0$} (Dfn_4)
    (Dfn_4)
      edge[bend left = 10] node {$0,0$} (Att_5)
      edge[bend right = 10, swap] node {$-1,0$} (Dfn_6)
    (Att_5)
      edge[bend left = 10] node {$0,-1$} (Dfn_6)
  ;
\end{tikzpicture}
```

Simple energy game of @exm-simple-energy-game.
:::

Can the attacker win from $\literal{g_1}$ with energy $(0,0)$?

::: spoiler
No, as both outgoing moves would lead to $‚ä•$-energy and thus to the defender winning.

But if the attacker starts with budget $(0,2)$, they can take the upper path to $\literal{g_4}$ with energy $(2,1)$, from where both defender options lead to the defender being stuck in $\literal{g_6}$.

Also, if the attacker starts with $(2,1)$, they win through the lower $\literal{g_3}$-path.

Starting with less energy means that the defender has an option of bankrupting the attacker at $\literal{g_4}$.

Summing up our observations, $(0,2)$ and $(2,1)$ define a Pareto front of minimal budgets where the attacker wins from $\literal{g_4}$, as depicted in @fig-exm-pareto-front.

::: {#fig-exm-pareto-front .column-margin}
```tikz
\begin{tikzpicture}[]
  \begin{scope}[rotate=45, scale=1]
    \draw[help lines] (0,0) grid (3.5,3.5);
    \draw[thick, red, opacity=0.5, text opacity=.8] (0,3.7) -- (0,2) node[below] {$(0,2)$} -- (2,2) -- (2,1) node[below] {$(2,1)$} -- (3.7,1);
  \end{scope}
\end{tikzpicture}
```

Attacker's Pareto front for $\literal{g_1}$ of example energy game.
:::
:::

We can notice two things from the example:

1. A *purely positional strategy would not suffice* for the defender to win reliably at $\literal{g_4}$.
  Say the game starts with energy $(1,1)$, that is, with a budget where the defender should win.
  Then, the level with either be $(0,1)$ or $(3,0)$ at $\literal{g_4}$.
  The defender has to either move to $\literal{g_5}$ or $\literal{g_6}$, depending on the play so far.
  So, either the defender must know the history, or at least the current energy level to make an ideal decision.
2. On this kind of energies, *attacker's winning budgets are upward-closed*, and defender budgets are downward-closed.
:::

::: {#rem-energy-reachability}
Ordinary reachability games can be seen as a special case of energy games with trivial energies, e.g.\ $\abstractenergies = \set{1}$ and $\abstractupdate(\cdot) = \identity{\abstractenergies}$.
:::


### Declining Energy Games

An $N$-dimensional declining energy game is played on energy vectors:

::: {#def-energy-updates}

#### Energies and Energy Updates

For dimensionality $N$, the set of *energies*, $\energies$, is given by $(\nats \cup \set{\infty})^N$.

The set of *energy update labels*, $\energyupdates$, contains $\vectorcomponents[N]{u} \in \energyupdates$ where each component $u_k$ is a symbol of the form

- $u_k \in \set{-1, 0}$ (relative update), or
- $u_k = \mathtt{min}_D$ where $D \subseteq \{1, \ldots, N\}$ and $k \in D$ (minimum selection update).

{{<noindent>}} Applying an update to an energy, $\energyupdate(e, u)$, where $e = \vectorcomponents[N]{e} \in \energies$ and $u = \vectorcomponents[N]{u} \in \energyupdates$, yields a new energy vector $e'$ where $k$th components $e'_k ‚âî e_k + u_k$ for $u_k \in \ints$ and $e'_k ‚âî \min_{d\in D} e_d$ for $u_k = \mathtt{min}_D$.
Updates that would cause any component to become negative are undefined, i.e., $\energyupdate$ is a partial function.
:::

::: {#exm-energy-update}

For example, the update $\energyupdate((2,0,\infty,0,0,0,1,1), (\updmin{1,7},0,-1,0,0,0,0,-1))$ equals $(1,0,\infty,0,0,0,1,0)$.
:::

::: {#def-declining-energy-game}
#### Declining Energy Game

Given a weight labeling $w \colon (\gamemoveblank) \to \energyupdates$, an $N$-dimensional *declining energy game* $\game^üó≤$ is an energy reachability game with energies $\abstractenergies ‚âî \energies$ and with edges labeled $\abstractupdate(m) ‚âî \energyupdate(w(m), \cdot)$.

We write $g \gamemove{\;u\;} g'$ for a move $g \gamemoveblank g'$ labeled by weight $w(g, g') = u$.
:::

::: {#prp-declining-energies}
In this model, energy levels can only decline.

- Updates may only decrease energies, $\energyupdate(u, e) \leq e$.
- Energy level changes are monotonic:
  If $\energylevel(\rho g) \leq \energylevel(\sigma g)$ and $g \gamemoveblank g'$
  then $\energylevel(\rho g g') \leq \energylevel(\sigma g g')$.
- If $e_0 \leq e'_0$ and $\game^üó≤(g_0, e_0)$ has non-$\bot$ play $\rho$, then $\game^üó≤(g_0, e'_0)$ also has non-$\bot$ play $\rho$.
:::

## Characterizing the $\complexityname{P}$-Time Part of the Spectrum

As hinted at in Subsection [-@sec-equivalence-complexities], parts of the strong equivalence spectrum can be decided in polynomial time, whereas others require polynomial space (and thus effectively exponential time).
In this section, we will show how to adapt the standard bisimulation game of @def-bisim-game to decide not just bisimulation, but *all polynomial-time* equivalences of the strong spectrum *at once*.

### The Polynomial Slice

First, let us make explicit which equivalences we include in the polynomial-time slice of the spectrum.
(The fact that they indeed can be decided efficiently is mostly well-known, but also itself a corollary of this section.)

To define the polynomial slice, we only use three dimensions:
1.\ modal depth, 2.\ depth of negative clauses, and 3.\ nesting depth of negations (that is, the first, fifth and sixth dimension of the strong spectrum @def-strong-spectrum).
Components for other dimensions of the strong spectrum are effectively set to $‚àû$.

::: {#def-polynomial-strong-spectrum}

#### Polynomial-Time Strong Spectrum

We denote as *polynomial-time strong spectrum* the projection of the strong spectrum (@def-strong-spectrum) to the first, fifth, and sixth dimension, thus by notions
$$\notions^\literal{poly-strong} ‚âî
\natsext^3,
$$
and the family of strong observation languages
$$\observationsvar{(N_1, N_2, N_3) \in \notions^\literal{poly-strong}}^\literal{poly-strong} ‚âî \observationsvar{(N_1,‚àû,‚àû,‚àû,N_2,N_3)}^\literal{strong}.$$
:::

@fig-polynomial-strong-spectrum gives names to coordinates that correspond to notions discussed previously.

::: {#fig-polynomial-strong-spectrum}
```tikz
\begin{tikzpicture}[auto,node distance=2.5cm,align=center]
  \node (B){bisimulation $\notionname{B}$\\$\infty,\infty,\infty$};
  \node (kB)[below right of=B,node distance=5cm]{$k$-step bisimulation $k\notionname{B}$\\$k,\infty,\infty$};
  \node (S2)[below left of=B]{$k$-nested simulation $k\notionname{S}$\\$\infty,\infty,k-1$};
  \node (RS)[below left of=S2]{ready simulation $\notionname{RS}$~\\$\infty,1,1$};
  \node (S)[below right of=RS]{simulation $\notionname{1S}$\\$\infty,0,0$};
  \node (E)[below right of=S]{enabledness $\notionname{E}$\\$1,0,0$};

  \path
  (B) edge (kB)
  (kB) edge (E)
  (B) edge (S2)
  (S2) edge (RS)
  (RS) edge (S)
  (S) edge (E)
  ;
\end{tikzpicture}
```
Hierarchy of polynomial-time decidable equivalences/preorders.
:::

Except for enabledness, $\notionname{E}$, all coordinates after unfolding them for $\notions^\literal{strong}$ are identical to the ones used previously.
When one unfolds the coordinate for enabledness $(1,0,0)$ to the original strong system, $(1,‚àû,‚àû,‚àû,0,0)$, it differs from the one previously used, namely, $(1,0,0,0,0,0)$.
The characterized language is strictly more expressive, as it contains conjunctions of enabled actions (e.g. $\hmlands\set{\hmlobs{\literal{a}}, \hmlobs{\literal{b}}}$), but it is equally distinctive.{{<isb lemma Priced_Spectrum lts.enabledness_conjunctions_are_neutral>}}


### A Bisimulation Energy Game

Let us recall the bisimulation game of @def-bisim-game.
As we have seen in Subsection [-@sec-bisim-game-hml], the game moves match the distinctive power of productions in the $\observations{\floor{B}}$-grammar of @exm-game-formulas.

Consequently, we can *count* the use of HML constructs in the game.
As the game stands, we can meaningfully count: 1.\ modal depth, 2.\ depth of negative clauses, and 3.\ nesting depth of negations (that is, the first, fifth and sixth dimension of the strong spectrum @def-strong-spectrum).
Adding the respective energy updates to the bisimulation game, we obtain:

<!--
$$
\begin{array}{rcll}
  œÜ^N
    & \grammardef & \hmlobs{Œ±} \hmland{i}{I} œÜ^{N-\unit{1}}_i \\
    & \grammaror  & \hmlneg œÜ^{ (N \sqcap (N_2, \infty, \infty)) - \unit{3} }
\end{array}
$$
-->

::: {#def-bisim-energy-game}
#### Bisimulation Energy Game

For a transition system $\system$, the *bisimulation energy game* ${\game}_\notionname{B}^{üó≤\system}$ is played on the same graph as the *bisimulation game* ${\game}_\notionname{B}^{\system}$ (of @def-bisim-game), but the moves are weighted by the following energy updates:

- The attacker may swap sides
  $$[p, q] \quad \gamemove{\updmin{1,2},0,-1}^üó≤_\notionname{B} \quad [q, p],$$
- or challenge simulation
  $$[p, q] \quad \gamemove{-1,0,0}^üó≤_\notionname{B} \quad (Œ±, p', q) \quad \text{if} \quad p \step{Œ±} p';$$
- and the defender answers simulation challenges
  $$(Œ±, p', q) \quad \gamemove{0,0,0}^üó≤_\notionname{B} \quad (p', q') \quad \text{if} \quad q \step{Œ±} q'.$$
:::

The first dimension thus bounds how often the attacker may challenge simulation down the road,
the third limits how often they may swap sides,
and the middle dimension bounds the amount of simulation moves after a swap.

::: {#exm-bisim-sim-energy-game}

Let us label the bisimulation game of @exm-bisim-sim-game-formulas (distinguishing the ‚Äútrolled philosophers‚Äù) with energy updates.
@fig-bisim-sim-game-energies shows the game graph.
The attacker wins ${\game}_\notionname{B}$ from $[\literal{Q}, \literal{Q'}]$  if they start out with an energy budget of $(2,2,2)$ or above.
But if the budget does not dominate this bound, the attacker loses.
For instance, neither $(1,\infty,\infty)$ nor $(\infty,\infty,1)$ is enough.
The second bound implies that the budgets, $(\infty,1,1)$ and $(\infty,0,0)$ are won by the defender as well.

What this tells us is that the attacker needs at least two simulation moves (after swaps) and two swaps to tell $\literal{Q}$ apart from $\literal{Q'}$.
Telling apart $\literal{Q'}$ from $\literal{Q}$ is slightly easier, only requiring one swap (and only one simulation move after the swap).
:::

::: {#fig-bisim-sim-game-energies}
```tikz

\begin{adjustbox}{max width=\textwidth, center}
  \begin{tikzpicture}[>->, shorten <=1pt, shorten >=0.5pt, auto, node distance=2cm,
    posStyle/.style={draw, inner sep=1ex, minimum size=1cm, minimum width=2.25cm, anchor=center, draw, black, fill=gray!5},
    defender/.style={ellipse, inner sep=0ex},
    defWins/.style={fill=blue!5}]

    \node[posStyle, initial, initial text={}, label={100:$\hmlneg\hmlobs{\tau}\hmlands\set{\hmlneg\hmlobs{\literal{a}}\hmltrue}$}]
      (Att_Q_Qp){$[\literal{Q}, \literal{Q'}]$};
    \node[posStyle, label={100:$\hmlobs{\tau}\hmlands\set{\hmlneg\hmlobs{\literal{a}}\hmltrue}$}]
      (Att_Qp_Q) [below = 2cm of Att_Q_Qp] {$[\literal{Q'}, \literal{Q}]$};
    \node[posStyle, defender, defWins]
      (Dfn_t_qab_Qp) [right = 1.5cm of Att_Q_Qp] {$(\tau, \literal{q_{AB}}, \literal{Q'})$};
    \node[posStyle, defWins]
      (Att_qab_qab) [below right = .1cm and 1.5cm of Dfn_t_qab_Qp] {$[\literal{q_{AB}}, \literal{q_{AB}}]$};
    \node[posStyle, label={100:$\hmlobs{\literal{a}}\hmltrue$}]
      (Att_qab_q3) [above right = .1cm and 1.5cm of Dfn_t_qab_Qp] {$[\literal{q_{AB}}, \literal{q_3}]$};
    \node[posStyle, defender, above right = .1cm and 1.5cm of Att_qab_q3]
      (Dfn_a_q1_q3) {$(\literal{a}, \literal{q_1}, \literal{q_3})$};
    \node[posStyle, defender]
      (Dfn_b_q2_q3) [below right = .1cm and 1.5cm of Att_qab_q3] {$(\literal{b}, \literal{q_2}, \literal{q_3})$};
    \node[posStyle, defender, defWins]
      (Dfn_t_qab_Q) [below = 1cm of Dfn_t_qab_Qp] {$(\tau, \literal{q_{AB}}, \literal{Q})$};
    \node[posStyle, defender]
      (Dfn_t_q3_Q) [below = 1cm of Dfn_t_qab_Q] {$(\tau, \literal{q_{3}}, \literal{Q})$};
    \node[posStyle, label={100:$\hmlneg\hmlobs{\literal{a}}\hmltrue$}]
      (Att_q3_qab) [below = 1cm of Att_qab_qab] {$[\literal{q_3}, \literal{q_{AB}}]$};

    \path
      (Att_Q_Qp)
        edge[bend left = 10] node {$\updmin{1,2},0,-1$} (Att_Qp_Q)
        edge node {$-1,0,0$} (Dfn_t_qab_Qp)
      (Att_qab_q3)
        edge[bend left = 65] node {$\updmin{1,2},0,-1$} (Att_q3_qab)
      (Att_q3_qab)
        edge[bend right = 60] node {} (Att_qab_q3)
      (Dfn_t_qab_Qp)
        edge node {0,0,0} (Att_qab_q3)
        edge node {0,0,0} (Att_qab_qab)
      (Att_qab_qab)
        edge [loop left] node {$\updmin{1,2},0,-1$} ()
      (Att_Qp_Q)
        edge[bend left = 10] node {$\updmin{1,2},0,-1$} (Att_Q_Qp)
        edge node[swap] {$-1,0,0$} (Dfn_t_qab_Q)
        edge node {$-1,0,0$} (Dfn_t_q3_Q)
      (Dfn_t_qab_Q)
        edge node[swap] {0,0,0} (Att_qab_qab)
      (Dfn_t_q3_Q)
        edge node {0,0,0} (Att_q3_qab)
      (Att_qab_q3)
        edge node {$-1,0,0$} (Dfn_a_q1_q3)
        edge node {$-1,0,0$} (Dfn_b_q2_q3)
    ;
  \end{tikzpicture}
\end{adjustbox}
```

The bisimulation energy game of @exm-bisim-sim-energy-game with energy updates.
:::



::: {#lem-bisim-energy-game-characterizations}


TODO: Discussion of characterized eqs

:::

## How to Decide Declining Energy Games

- TODO: Refined algo for energy games
- TODO: Complexities

## Discussion

- Sum up algorithm approach
- Point out limitations (game cannot capture PSPACE eqs!)