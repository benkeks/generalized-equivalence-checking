
# Introduction: What's the difference?

Have you ever looked at two system models and wondered *how equivalent they are*
---or, conversely: how they can be distinguished?

I have run into this question multiple times, for instance when analyzing models or when devising examples for teaching.

The first time, I think, was when working as a student research assistant:
I was tasked with implementing a translation from the process algebra Timed CSP to Timed Automata.^[The aim was to bridge between the tools FDR2 and UPPAAL for Göthel's dissertation [-@goethel12mechanicalVerificationRTS].]
Previous work I was to base the translations on had serious flaws:
One approach introduced spurious deadlocks to the model, the other was unable to handle nesting of choices and parallel composition.
Clearly, we had to change the encoding!

::: {#fig-ltbts2-paper .column-margin}

![](img/ltbts2.png){.lightbox}

The linear-time–branching-time spectrum with silent moves as depicted in @glabbeek1993ltbt.

:::

… But how to tell whether our adapted translation would properly honor the semantics of CSP and Timed Automata?
Did we translate CSP terms to automata *with the same meaning*?
Unfortunately, there are different notions of what counts as “same meaning” in operational semantics.

I then took my very first look into the seminal paper on the landscape of process equivalences, the “Linear-time–branching-time spectrum II” by van Glabbeek [-@glabbeek1993ltbt].
The central figure, reproduced in @fig-ltbts2-paper, mesmerized me.
How could there be so many different notions of equivalence!
Back then, I could not wrap my head around the host of equivalences.
But the fascination remained, and finally lead to the present thesis.

This thesis aims to enable future researchers to tap into the wisdom of the linear-time–branching-time spectrum and to easily determine what equivalences relate their models.

----

Fragments:

Can you subtract two programs?
Or even more generally:
Can you subtract a specification from a program to see what unspecified behavior remains?
(For your program to be correct, there should be no relevant difference!)

There is a rich body of work on *process equivalence checking* and *refinement checking* for programs and specifications.
This thesis argues that most of it can be viewed through one unified lense of *finding differences* in behavior.

## Linear-Time–Branching-Time Spectroscopy

## This Thesis

## Artifacts and Papers

