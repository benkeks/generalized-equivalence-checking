---
toc-title: "Chapter 8"
---

# Implementations {#sec-implementations}

::: {.content-visible when-format="html"}
{{< include style/macros-html.md >}}
{{< include style/macros.md >}}
:::

## Prototype: *equiv.io* {#sec-equivio}

The “Linear-Time–Branching-Time Spectroscope” on {{<equivio>}} is a small webtool to check equivalence relations on CCS processes.

### Usage {#sec-equivio-usage}

The standard workflow of {{<equivio>}} is to specify processes in CCS and then compare them with respect to equivalence spectra.
This is mainly achieved by writing everything into the source editor on the left. 
The specific order of definitions, queries, and declarations in the source generally makes no difference.

{{< paragraph_heading "Process syntax." >}}
CCS processes are written according to the grammar in @def-ccs, with the concrete syntax for subterms following @tbl-ccs-syntax.

| Construct       | Tool syntax      | CCS                                   |
|-----------------|------------------|-----------------------|
| Input prefix    | `a.P`            | $\ccsprefix{\literal a} P$            |
| Output prefix   | `a!P`            | $\ccsprefix{\coaction{\literal a}} P$ |
| Internal action | `tau.P`          | $\ccsprefix{\tau} P$                  |
| Null process    | `0`              | $\ccsnull$                            |
| Recursion       | `P_Name`         | $\literal{P_{Name}}$                  |
| Choice          | `P1 + P2`        | $P_1 \ccschoice P_2$                  |
| Parallel        | `P1 | P2`        | $P_1 \ccspar P_2$                     |
| Restriction     | `P \ {a1, a2}`   | $P_1 \ccsrestrict \set{\literal{a_1}, \literal{a_2}}$ |

: Concrete ASCII syntax for CCS terms {#tbl-ccs-syntax fig-pos='b'}

Literals for actions and process names combine Latin letters, numbers, and underscores in the usual way.

Top-level process definitions are written `X = P`, expressing that $\ccsasg(\literal{X}) \defeq P$ in the semantics (@def-ccs-semantics).
The right-hand pane shows the resulting transition system.

The syntax tree can be clarified by parentheses `(...)`.
Otherwise, the parser reads prefix `a._` with highest operator precedence, then restriction `_ \ {_}`, then choice `+` and parallel `|` at equal level.
In case of ambiguity, it assumes parenthesization from the right.

{{< paragraph_heading "Equivalence queries." >}}
Queries for the behavioral equivalences between states are formulated in the code as well and started by clicking on the arrows that pop up in the gutter.
The output will appear right below the query in the editor.

The standard queries are:

- `@compare P1, P2` –
  Perform a spectroscopy on `P1` and `P2` with respect to the strong spectrum using the game of @sec-strong-spectroscopy.
  The output will have four items, relative to the strong spectrum.
  1. The strongest preorders to relate `P1` to `P2`;
  2. Cheapest formulas to distinguish `P1` from `P2` (and the smallest observation language they are part of);
  3. The list of finest equivalences to equate `P1` and `P2`.
  4. A visualization of the result on the whole spectrum.
     Moreover, there will be a link to a <https://edotor.net/>-visualization of the game graph used to obtain the result.
  The naming of notions in the output follows @tbl-notion-names.

- `@compareSilent P1, P2` – 
  Perform a spectroscopy on `P1` and `P2` with respect to the weak spectrum, treating silent steps along the lines of @sec-silent-step-spectroscopy.
  The output is analogous to `@compare`.
- `@check equivalence-name, P1, P2` –
  Checks for (mutual) preordering between `P1` and `P2` with respect to individual notion `equivalence-name`. 
  The name of the notion to be checked must be one of the ones in @tbl-notion-names.

```{=latex}
% fix to make the table float in spite of Pandoc's hardcoded longtable usage...
\begin{table*}[b!]
\parbox{15cm}{
```

| Strong variant       | Weak variants                      | Stable / stability-respecting variants   |
|:---------------------|:-----------------------------------|:-----------------------------------------|
| `enabledness`          | `weak-enabledness`                   |                                          |
| `trace`                | `weak-trace`                         |                                          |
| `failure`              | `weak-failure`                       | `stable-failure`                         |
| `revivals`             |                                    | `stable-revivals`                          |
| `readiness`            | `weak-readiness`                     | `stable-readiness`                         |
| `failure-trace`        |                                    | `stable-failure-trace`                     |
| `ready-trace`          |                                    | `stable-ready-trace`                       |
| `impossible-future`    | `weak-impossible-future`             |                                          |
| `possible-future`      | `weak-possible-future`               |                                          |
| `simulation`           | `weak-simulation`                    | `stable-simulation`                        |
| `ready-simulation`     | `weak-ready-simulation`              | `s-ready-simulation`                       |
| `2-nested-simulation`  | `2-nested-weak-simulation`           |                                          |
| `bisimulation`         | `contrasimulation`<br> `weak-bisimulation`<br> `delay-bisimulation`<br> `eta-bisimulation`<br> `branching-bisimulation` | `stable-bisimulation`<br> `sr-delay-bisimulation`<br> `sr-branching-bisimulation` |

: Names of supported notions in {{<equivio>}}. {#tbl-notion-names .column-body-outset}

``` {=latex}
}
\end{table*}
```

{{< paragraph_heading "Interacting with the output." >}}
Each output item can be clicked, which displays the preorders, equivalences, and distinctions that have been found between states in the transition system view.

States in the transition system may be dragged to change their position.
The layout information is persisted in the source, as described in the next list.

{{< paragraph_heading "Layout and preprocessing." >}}
The source can also contain layout information and prescribe some preprocessing for processes.

- `P(main)` –
  Highlight process `P` in transition system and prune other sub-processes (unless they are reached from `P`).
  Multiple processes may be declared to be `main`.
- `P(x=100, y=100)` –
  Annotate process `P` to be displayed at certain coordinates.
- `"0"(x=100, y=200)` –
  The annotations may also refer to sub processes
  The CCS expressions are wrapped in `"..."`.
  They must be verbatim the string representation the tool uses for the normalized process.
- `@preprocessing method1, method2...` –
  Apply preprocessing to the transition system after translation of the CCS term (that is, before presentation and queries happen).
  This will affect the whole transition system.
  - `weakness_saturated` – Exchange transition relation to weak transitions, that is, there will be a transition whenever the original system allows $\stepweak\stepopt{\alpha}\stepweak$.
  - `bisim_minimized` – Merge states that are strongly bisimilar (preserves `main` processses).
  - `srbb_minimized`  – Merge states that are stability-respecting branching-bisimilar (preserves `main` processes; enforces `tau`-loops precisely on divergent states).

### Application to Peterson's Mutual Exclusion

```ruby
ready = {"A": false, "B": false}
turn  = "A"

def process(ownId, otherId):
  while true:                         # PC = 1
    ready[ownId] = true
    turn = otherId
    
    do # wait...                      # PC = 2
    until (ready[otherId] == false || turn == ownId)
      
    print "enter critical #{ownId}"   # PC = 3
    # critical section goes here.
    print "leave critical #{ownId}"
    ready[ownId] = false

process("A", otherId = "B") || process("B", otherId = "A")
```

<!--
```tikz
\usetikzlibrary{shapes.geometric, arrows}

\tikzstyle{startstop} = [rectangle, rounded corners, minimum width=3cm, minimum height=1cm,text centered, draw=black, fill=red!30]
\tikzstyle{process} = [rectangle, minimum width=3cm, minimum height=1cm, text centered, draw=black, fill=blue!30]
\tikzstyle{decision} = [diamond, minimum width=3cm, minimum height=1cm, text centered, draw=black, fill=green!30]
\tikzstyle{arrow} = [thick,->,>=stealth]

\begin{tikzpicture}[node distance=2cm]

% Nodes
\node (start) [startstop] {Start};
\node (setReady) [process, below of=start] {ready[ownId] = true};
\node (setTurn) [process, below of=setReady] {turn = otherId};
\node (wait) [decision, below of=setTurn, align=center] {ready[otherId] == false \\ or \\ turn == ownId?};
\node (criticalEnter) [process, right of=wait, xshift=4cm] {Enter critical section};
\node (criticalLeave) [process, below of=criticalEnter] {Leave critical section};
\node (unsetReady) [process, below of=criticalLeave] {ready[ownId] = false};

% Arrows
\draw [arrow] (start) -- (setReady);
\draw [arrow] (setReady) -- (setTurn);
\draw [arrow] (setTurn) -- (wait);
\draw [arrow] (wait.east) |- (criticalEnter.west) node[midway, above] {Yes};
\draw [arrow] (criticalEnter) -- (criticalLeave);
\draw [arrow] (criticalLeave) -- (unsetReady);
\draw [arrow] (unsetReady.east) --++(1,0) |- (setReady.east);
\draw [arrow] (wait.south) -- ++(0,-1) -| (wait.west) node[midway, left] {No};

\end{tikzpicture}
```--->

```ccs
ReadyAf = readyAf!ReadyAf + setReadyAf.ReadyAf + setReadyAt.ReadyAt
ReadyAt = readyAt!ReadyAt + setReadyAf.ReadyAf + setReadyAt.ReadyAt

@snip "----------other storage----------"

ReadyBf = readyBf!ReadyBf + setReadyBf.ReadyBf + setReadyBt.ReadyBt
ReadyBt = readyBt!ReadyBt + setReadyBf.ReadyBf + setReadyBt.ReadyBt

TurnA = turnA!TurnA + setTurnA.TurnA + setTurnB.TurnB
TurnB = turnB!TurnB + setTurnA.TurnA + setTurnB.TurnB

@snip "----------individual processes----------"

A1 = setReadyAt!setTurnB!A2
A2 = readyBf.A3 + turnA.A3
A3 = ecA.lcA.setReadyAf!A1

B1 = setReadyBt!setTurnA!B2
B2 = readyAf.B3 + turnB.B3
B3 = ecB.lcB.setReadyBf!B1

@snip "----------system and spec----------"

Pe = (A1 | B1 | TurnA | ReadyAf | ReadyBf)
    \ {readyAf, readyAt, setReadyAf, setReadyAt, readyBf, readyBt,
       setReadyBf, setReadyBt, turnA, turnB, setTurnA, setTurnB}
Mx = ecA.lcA.Mx + ecB.lcB.Mx

@snip "----------preprocessing----------"

@preprocessing srbb_minimized

Pe(main, x=886, y=335)
Mx(main, x=122, y=225)

@snip "----------spectroscopy queries----------"

@compareSilent Mx, Pe
@compareSilent Pe, Mx

@snip "---------- below here, there's only layout information! ----------"

"(A1 | setTurnA!B2 | TurnA | ReadyAf | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1102, y=548)
"(setTurnB!A2 | B1 | TurnA | ReadyAt | ReadyBf) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=681, y=398)
"(setTurnB!A2 | setTurnA!B2 | TurnA | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=949, y=636)
"(A1 | B2 | TurnA | ReadyAf | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1199, y=767)
"(A1 | B3 | TurnA | ReadyAf | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1452, y=961)
"(setTurnB!A2 | B3 | TurnA | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1310, y=1053)
"(A2 | B1 | TurnB | ReadyAt | ReadyBf) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=681, y=802)
"(A3 | B1 | TurnB | ReadyAt | ReadyBf) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=564, y=967)
"(lcA.setReadyAf!A1 | B1 | TurnB | ReadyAt | ReadyBf) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=441, y=1231)
"(lcA.setReadyAf!A1 | setTurnA!B2 | TurnB | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=548, y=1297)
"(setTurnB!A2 | B1 | TurnB | ReadyAt | ReadyBf) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=756, y=546)
"(A2 | B3 | TurnB | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1161, y=1116)
"(setTurnB!A2 | lcB.setReadyBf!B1 | TurnA | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1473, y=1257)
"(A1 | lcB.setReadyBf!B1 | TurnA | ReadyAf | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1664, y=1102)
"(A2 | lcB.setReadyBf!B1 | TurnB | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1235, y=1348)
"(A2 | setTurnA!B2 | TurnB | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=790, y=1112)
"(A2 | B2 | TurnB | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1067, y=874)
"(setTurnB!A2 | B2 | TurnA | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1033, y=427)
"(A2 | B2 | TurnA | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=902, y=926)
"(setTurnB!A2 | setTurnA!B2 | TurnB | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=910, y=771)
"(A3 | setTurnA!B2 | TurnB | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=671, y=1078)
"(A3 | B2 | TurnA | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=829, y=1146)
"(lcA.setReadyAf!A1 | B2 | TurnA | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=785, y=1350)
"(setReadyAf!A1 | B1 | TurnB | ReadyAt | ReadyBf) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=701, y=1061)
"(A1 | B1 | TurnB | ReadyAf | ReadyBf) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=806, y=794)
"(setReadyAf!A1 | setTurnA!B2 | TurnB | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=869, y=1064)
"(A1 | setTurnA!B2 | TurnB | ReadyAf | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1016, y=535)
"(A1 | B1 | TurnA | ReadyAf | ReadyBf) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=666, y=296)
"(A1 | setReadyBf!B1 | TurnA | ReadyAf | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1542, y=816)
"(setTurnB!A2 | setReadyBf!B1 | TurnA | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1477, y=477)
"(A2 | setReadyBf!B1 | TurnB | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=644, y=761)
"(setReadyAf!A1 | B2 | TurnA | ReadyAt | ReadyBt) \ {readyAf,readyAt,setReadyAf,setReadyAt,readyBf,readyBt,setReadyBf,setReadyBt,turnA,turnB,setTurnA,setTurnB}"(x=1025, y=1064)

"lcA.Mx"(x=181, y=529)
"lcB.Mx"(x=433, y=290)
```

### Program Structure

- Parsing
  {{<code_link "shared/src/main/scala-2.12" io.equiv.eqfiddle.ccs.Parser >}}
  `ccs.Syntax.Definition`
- Interpretation along @def-ccs-semantics ^[
    There is a minor semantical difference:
    The interpreter flattens process restriction in recursion.
    This leads to processes like `P = a.P \ {b}` having a finite process graph instead of an infinite one
    [cf. @ails2007reactiveSystems, Exercise 2.9].
  ]
  {{<code_link "shared/src/main/scala-2.12" io.equiv.eqfiddle.ccs.Interpeter >}}
  `ts.WeakTransitionSystem`
    - Includes minimization if desired
- Spectroscopy
  - Either 
    {{<code_link "shared/src/main/scala-2.12" io.equiv.eqfiddle.spectroscopy.StrongSpectroscopy >}}
  - Or 
    {{<code_link "shared/src/main/scala-2.12" io.equiv.eqfiddle.spectroscopy.WeakSpectroscopy >}}
- Distinguishing formulas.
    - Pricing
        {{<code_link "shared/src/main/scala-2.12" io.equiv.eqfiddle.hml.ObservationNotionWeak >}}
        Check that formula price matches the one predicted by the game
    - Interpretation for validity
        {{<code_link "shared/src/main/scala-2.12" io.equiv.eqfiddle.hml.HMLInterpreter >}}
- `SpectroscopyResult` from
    {{<code_link "shared/src/main/scala-2.12" io.equiv.eqfiddle.spectroscopy.SpectroscopyInterface >}}

### Benchmarks

(TODO: Maybe)

## Student Implementations

### Computer Game: *The Spectroscopy Invaders* {#sec-spectro-invaders}

@trzeciakiewicz2021ltbtBrowserGame

### CAAL Extension {#sec-spectroscopy-caal}

@ozegowski2023eqCAAL
mention Timo

### GPU Implementation: *gpuequiv* {#sec-gpu-equiv}

@vogel2024energyGamesWebGPU