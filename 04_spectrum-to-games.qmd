# Approach: Equivalence Problems as Energy Games {#sec-approach}

::: {.content-hidden when-format="pdf"}
{{< include style/macros.md >}}
:::

Time to get real.
This chapter will demonstrate my core approach by solving the spectroscopy problem in an *easy* instance.

It will be easy in two regards:
Firstly, complexity-wise---we narrow our focus on equivalences of polynomial-time.
Secondly, conceptually---we just use the bisimulation game of Chapter [-@sec-preliminaries], almost directly!

We already know that winning attacker strategies in the bisimulation game correspond to distinguishing formulas, and that these can be computed quite straightforwardly.
All we need on top of this is a way of quantifying the amount of syntactic expressiveness in these formulas *during the game*.
For this, we employ the first core idea of this chapter:

::: {#nte-idea-energy-games .callout-idea .callout-note}
#### Quantitative games for quantitative problems

Spectra of equivalence problems can be encoded as energy games.
:::

\noindent
Energy games are games in which players have limited resources that can be used up or recharged during moves.
Players running out of a resource lose the game.
After introducing such games in @sec-energy-games, we will prove in @sec-characterzing-ptime-part that several core equivalences can be characterized as defender's winning energy budgets by adding three-dimensional energies to the bisimulation game.

The second core idea is how to compute these winning budgets:

::: {#nte-idea-deciding-energy-games .callout-idea .callout-note}
#### Computing cheapest wins

Attacker's winning budgets in energy reachability games can be computed by a generalized shortest paths algorithm.
:::

\noindent
@sec-deciding-energy-games will provide an algorithm to solve a range of energy-game-like quantitative problems as long as the energy updates can be *undone* through a *Galois connection*, which is a generalization of invertibility on monotonic functions.

By combining the two contributions, we arrive at a polynomial-time solution of the spectroscopy problem for the polynomial slice of the strong spectrum.

Effectively, we adapt the game framework of @fig-game-algo-overview to not treat one equivalence, but a spectrum of equivalences.
This approach is summarized in @fig-spectroscopy-poly-big-picture.

::: {#fig-spectroscopy-poly-big-picture}
```tikz
\begin{tikzpicture}[auto,node distance=1.1cm,
  algstep/.style={minimum width=4.3cm, minimum height=1.2cm, draw=gray, rectangle,align=center,rounded corners}]
  \node[algstep, draw] (States) {States $p, q$ in \\ transition system $\system$};
  \node[algstep, draw, right of=States, node distance=8.1cm] (Preorders) {Polynomial notions that fit \\ to preorder $p$ to $q$};
  \node[algstep, draw=TealBlue, below of=States, node distance=2.5cm] (EnergyGame) {Bisimulation \\ energy game ${\game}_\notionname{B}^{üó≤\system}$};
  \node[algstep, draw=Peach, below of=Preorders, node distance=2.5cm] (AttackerWinningBudgets) {Minimal attacker winning \\ budgets $\attackerwinsmin([p,q])$};
  \path
    (States) edge[->, dashed] node {Spectroscopy problem} (Preorders)
    (States) edge[->, draw=TealBlue] node {Definition 4.7} (EnergyGame)
    (AttackerWinningBudgets) edge[->, draw=TealBlue] node[label={[align=center]right:XOR}] {Theorem 4.1} (Preorders)
    (EnergyGame) edge[->, draw=Peach] node {Algorithm 4.1} (AttackerWinningBudgets);
  \node[right=2mm of Preorders] (Chp3) {Chapter 3};
  \node[text=TealBlue, above right=4mm and 2mm of AttackerWinningBudgets] (Sec42) {Section 4.2};
  \node[text=Peach, right=2mm of AttackerWinningBudgets] (Sec43) {Section 4.3};
\end{tikzpicture}
```

How we will employ energy games to solve the spectroscopy problem on an easy spectrum.
:::

## Energy Games {#sec-energy-games}

Energy games extend games as discussed in @sec-games with resources of the players, called energies.
We will focus on reachability games with an energy-bounded attacker.
In most publications, energy games update vector-valued energy levels by vector addition or subtraction.
We work with more general *monotonic energy games* (Subsection [-@sec-monotonic-energy-games]) and then zoom in on *declining energy games* (Subsection [-@sec-deciding-energy-games]), which include updates that combine vector components by taking their minimum.
The latter are exactly what we need for the following @sec-characterzing-ptime-part.

### Monotonic Energy Games {#sec-monotonic-energy-games}

To introduce energy games, we generalize the definitions on games (@def-game and the following) to include *energy levels*.
We define how winning regions then become quantitative winning *budgets*, which can still be characterized inductively.

::: {#def-energy-game}
#### Energy Reachability Game

Given a partially ordered set of energies $(\abstractenergies, \leq)$, an *energy reachability game* $\game^üó≤$ is a reachability game $(G, G_\defender, \gamemoveblank)$ extended by an edge labeling of energy updates $\abstractupdate \colon (\gamemoveblank) \to (\abstractenergies \to (\set{‚ä•} ‚à™ \abstractenergies))$.

We demand the following for monotonic energy games:

- $‚ä• \notin \abstractenergies$ is final in the sense that $\abstractupdate(m)(‚ä•) = ‚ä•$.
- All update functions $u =\abstractupdate(m)$ with $m \in {\gamemoveblank}$ are monotonic and upward-closed with respect to $\leq$.
  More formally, this means that for any energies $e, e' \in \abstractenergies$, if $e \in \domain(u)$ and $e \leq e'$, then $e' \in \domain(u)$ and $u(e) \leq u(e')$, where $\domain(u) := \set{e ‚àà \abstractenergies \mid u(e) \neq \bot}$.

We denote by $\game^üó≤(g_0, e_0)$ the game played from starting position $g_0 ‚àà G$ with initial energy level $e_0 ‚àà \abstractenergies$.
:::

::: {#def-energy-level}
#### Energy Level

For a finite play $œÅ = {g_0}{g_1}‚Ä¶{g_{n-1}} ‚àà G^{*}$ of $\game^üó≤(g_0, e_0)$, its energy level $\energylevel(œÅ)$ is computed recursively:

- $\energylevel(g_0) ‚âî e_0$
- $\energylevel(g_0‚Ä¶{g_{i+1}}) ‚âî \abstractupdate({g_{i}},{g_{i+1}})(\energylevel(g_0‚Ä¶{g_{i}}))$

For infinite plays $œÅ ‚àà G^œâ$, we define energy levels to equal $‚ä•$.

We consider the attacker to be energy-bounded and understand $\energylevel(œÅ) = ‚ä•$ to mean that they have run out of energy.
Thus, we declare plays with $\energylevel(œÅ) = ‚ä•$ to be won by the defender (even if they are stuck).
:::

Strategies and winning strategies work exactly as in the energy-less scenario.
Additionally, we lift positional strategies of @def-strategies to be *energy-positional* in the sense that they pick next moves depending on the current energy level, i.e.\ $\rel f \colon G_\attacker √ó \abstractenergies \to G$.

Instead of a winning region as in @def-winning-region, we define *winning budgets* for game positions:

::: {#def-winning-budgets}
#### Winning Budgets

For each position $g_0 ‚àà G$ of energy game $\game^üó≤$, the *attacker winning energy budgets*, $\attackerwins(g_0) \subseteq \abstractenergies$ are the energies $e_0$ where the attacker wins $\game^üó≤(g_0, e_0)$.
The defender winning budgets $\defenderwins$ are defined analogously.
:::

Classical energy games use $\nats$-vectors for energies and vector addition for updates as in the following example:

::: {#exm-simple-energy-game}
Consider vector energies $\abstractenergies = \nats^2$ with point-wise order and the energy game with graph in @fig-simple-energy-game.
Edges are labeled by update vectors $\vec{u} ‚àà \ints^2$, each representing an update function
$$e \mapsto
\begin{cases}
  e + \vec{u} & \text{if } e + \vec{u} \geq \zerovec \\
  ‚ä•        & \text{otherwise.}
\end{cases}
$$
Can the attacker win from $\literal{g_1}$ with energy $(0,0)$?

:::: {#fig-simple-energy-game}
```tikz
\begin{tikzpicture}[>->, shorten <=1pt, shorten >=0.5pt, auto, node distance=2cm,
  posStyle/.style={draw, inner sep=1ex, minimum size=1cm, minimum width=2.25cm, anchor=center, draw, black, fill=gray!5},
  defender/.style={ellipse, inner sep=0ex}]

  \node[posStyle, initial, initial text={}]
    (Att_1){$\literal{g_1}$};
  \node[posStyle]
    (Att_2) [above right = .5cm and 1cm of Att_1] {$\literal{g_2}$};
  \node[posStyle]
    (Att_3) [below right = .5cm and 1cm of Att_1] {$\literal{g_3}$};
  \node[posStyle, defender]
    (Dfn_4) [right = 4cm of Att_1] {$\literal{g_4}$};
  \node[posStyle]
    (Att_5) [right = 4cm of Att_2] {$\literal{g_5}$};
  \node[posStyle, defender]
    (Dfn_6) [right = 4cm of Att_3] {$\literal{g_6}$};

  \path
    (Att_1)
      edge[bend left = 10] node {$0,0$} (Att_2)
      edge[bend right = 10, swap] node {$-1,0$} (Att_3)
      edge[bend left = 5] node {$-2,-1$} (Dfn_4)
    (Att_2)
      edge[bend left = 10] node {$+2,-1$} (Dfn_4)
    (Att_3)
      edge[bend right = 10, swap] node {$0,0$} (Dfn_4)
    (Dfn_4)
      edge[bend left = 10] node {$0,0$} (Att_5)
      edge[bend right = 10, swap] node {$-1,0$} (Dfn_6)
    (Att_5)
      edge[bend left = 10] node {$0,-1$} (Dfn_6)
  ;
\end{tikzpicture}
```

Simple energy game of @exm-simple-energy-game.
::::

:::: spoiler
No, as all outgoing paths would lead to $‚ä•$-energy and thus to the defender winning.

But if the attacker starts with budget $(0,2)$, they can take the upper path to $\literal{g_4}$ with energy $(2,1)$, from where both defender options lead to the defender being stuck in $\literal{g_6}$.

Also, if the attacker starts with $(2,1)$, they win through the lower $\literal{g_3}$-path.

Moving to $\literal{g_4}$ directly, would be more expensive than the  $\literal{g_2}$/$\literal{g_3}$-alternatives---so we can disregard this option.

Starting with less energy means that the defender has an option of bankrupting the attacker at $\literal{g_4}$.

Summing up our observations, $(0,2)$ and $(2,1)$ define a Pareto front of minimal budgets where the attacker wins from $\literal{g_4}$, as depicted in @fig-exm-pareto-front.

::::: {#fig-exm-pareto-front .column-margin}
```tikz
\begin{tikzpicture}[]
  \begin{scope}[rotate=45, scale=1]
    \draw[help lines] (0,0) grid (3.5,3.5);
    \draw[thick, red, opacity=0.5, text opacity=.8] (0,3.7) -- (0,2) node[below] {$(0,2)$} -- (2,2) -- (2,1) node[below] {$(2,1)$} -- (3.7,1);
  \end{scope}
\end{tikzpicture}
```

Attacker's Pareto front for $\literal{g_1}$ of example energy game.
:::::
::::

We can notice two things from the example:

1. A *purely positional strategy would not suffice* for the defender to win reliably at $\literal{g_4}$.
  Say the game starts with energy $(1,1)$, that is, with a budget where the defender should win.
  Then, the level with either be $(0,1)$ or $(3,0)$ at $\literal{g_4}$.
  The defender has to either move to $\literal{g_5}$ or $\literal{g_6}$, depending on the play so far.
  So, either the defender must know the history, or at least the current energy level to make an ideal decision.
2. *Attacker's winning budgets are upward-closed*, and defender budgets are downward-closed.
:::

Both are effects of @def-energy-game.
More formally, the winning budgets are characterized by the following two propositions:

::: {#prp-winning-budget-upward-closure}
Given an energy game $\game$, the attacker winning budgets $\attackerwins^{\game}$ are point-wise upward-closed, that is, $\upset \attackerwins^{\game}(g) = \attackerwins^{\game}(g)$ for all positions $g \in G$.^[
  This is formalized as Lemma 3.2 in @lemke2024multiweightedEnergyGames.
]
:::

::: {#prp-winning-budget-rules}
Given an energy game $\game$, the attacker winning budgets $\attackerwins^{\game}$ are characterized inductively by the following rules:^[
  Proved as Theorem 3 in @lemke2024multiweightedEnergyGames.
]
$$
\dfrac{
  g_\attacker ‚àà G_\attacker \quad
  g_\attacker \gamemoveblank g' \quad
  \abstractupdate(g_\attacker, g')(e) ‚àà \attackerwins^{\game}(g')
} {
  e ‚àà \attackerwins^{\game}(g_\attacker)
}
$$
$$
\dfrac{
  g_\defender ‚àà G_\defender \quad
  \forall u,g' \ldotp \; g_\defender \gamemoveblank g' \longrightarrow
  \abstractupdate(g_\defender, g')(e) ‚àà \attackerwins^{\game}(g')
} {
  e ‚àà \attackerwins^{\game}(g_\defender)
}
$$
:::

The inductive definition is nice as it allows for local proves of how the attacker wins.
Defender's wins on the other hand would dually be a *coinductive concept* because the defender wins loops.^[
  By the way, to those wondering:
  It is intentional that this thesis aims to achieve all its constructions without recurring to coinduction.
  Therefore, coinduction is only mentioned in side remarks and is not required to understand what is going on.
]

The proofs in @lemke2024multiweightedEnergyGames partially rely on the fact that one can derive reachability games from energy games, by inlining the energies and having the attacker stuck at exhausted energies.

::: {#def-derived-reachability-game}
#### Derived Reachability Game

Given an energy game $\game = (G, G_\defender, \gamemoveblank, \abstractupdate)$ over $(\abstractenergies, \leq)$,
the *derived reachability game* $\game^R = (G^R, G^R_\defender, \gamemoveblank_R)$ is played on tuples $G^R \defeq G \times (\abstractenergies \cup \set{\bot})$ with $G^R_\defender \defeq G_\defender \times \abstractenergies$.
Lifted moves $(g, e) \gamemoveblank_R (g', e')$ are possible iff
$e \neq \bot$, $g \gamemoveblank g'$, and $e' = \abstractupdate(g, g')(e)$.
:::

Note the fine point that positions of exhausted energy that derive from defender positions are transformed to stuck attacker positions!

Winning regions of the reachability game and winning budgets of the energy game correspond.

::: {#prp-derived-reachability-energies}
$(g, e) \in \attackerwins^{\game^R}$ precisely if $e \in \attackerwins^{\game}(g)$.^[
  Lemma 3.4 in @lemke2024multiweightedEnergyGames.
]
:::

::: {#rem-energy-reachability}
Ordinary reachability games can be seen as a special case of energy games with trivial energies, e.g.\ $\abstractenergies = \set{1}$ and $\abstractupdate(\cdot) = \identity{\abstractenergies}$.
On such games, $\game$ and $\game^R$ according to @def-derived-reachability-game have isomorphic game graphs.
:::

::: {#rem-energy-games-in-general}
We deviate in two important points from other work on energy games:

- In the literature, it is more common to consider the defender instead of the attacker to be energy-bounded [e.g. @fjls2011energyGamesMulti].
  This choice follows the intuition that there is a party with scarce resources that wants to keep the system running.
  For our purposes, however we want to bound the resources of an attacker, which is no fundamental change.
  Still, one cannot have both at the same time: @kh2022energyGamesResourceBounded, studying both-bounded energy games, establish that their winner is only decidable if both parties have only one-dimensional energies.
- We define energy-reachability games more abstractly than is common:
  In other publications, energy games work on numbers with component-wise updates as seen in @exm-simple-energy-game.
  We do not demand this as, in the next sections, we will need updates that combine information from different components of the energy vector.
  Even prior generalizations on energy update functions such as @eflq2013kleeneEnergyProblems do not allow sufficient flexibility in this regard.
:::

### Declining Energy Games

We now turn to special kind of monotonic energy games with vector-valued energy levels where updates will never increase energy levels in any component.
An $N$-dimensional *declining energy game* is played on energy vectors:

::: {#def-energy-updates}
#### Energies and Energy Updates

For dimensionality $N$, the set of *energies*, $\energies$, is given by $(\nats ‚à™ \set{\infty})^N$.

The set of *energy update labels*, $\energyupdates$, contains $\vectorcomponents[N]{u} ‚àà \energyupdates$ where each component $u_k$ is a symbol of the form

- $u_k ‚àà \set{-1, 0}$ (relative update), or
- $u_k = \mathtt{min}_D$ where $D \subseteq \{1, \ldots, N\}$ and $k ‚àà D$ (minimum selection update).

{{<noindent>}} Applying an update to an energy, $\energyupdate(u, e)$, where $e = \vectorcomponents[N]{e} ‚àà \energies$ and $u = \vectorcomponents[N]{u} ‚àà \energyupdates$, yields a new energy vector $e'$ where $k$th components $e'_k ‚âî e_k + u_k$ for $u_k ‚àà \ints$ and $e'_k ‚âî \min_{d‚àà D} e_d$ for $u_k = \mathtt{min}_D$.
Updates that would cause any component to become negative yield $\bot$.
:::

::: {#exm-energy-update}
Consider the update label $(\updmin{1,2},0,-1)$.

- $\energyupdate((\updmin{1,2},0,-1), (1,1,0))$ equals $\bot$ because of the last component.
- $\energyupdate((\updmin{1,2},0,-1), (2,1,1))$ equals $(1,1,0)$.
- $\energyupdate((\updmin{1,2},0,-1), (1,1,1))$ equals $(1,1,0)$, as well.
- There is no $e ‚àà \energies$ such that $\energyupdate((\updmin{1,2},0,-1), e) = (1,0,0)$, because the second component would demand a lower first component.

In summary, $\energyupdate((\updmin{1,2},0,-1), \cdot)$ is neither injective nor surjective with respect to $\energies$.
The same is true for most other $u$ and $\energyupdate(u, \cdot)$ with a $\mathtt{min}$-update component.
:::

::: {#def-declining-energy-game}
#### Declining Energy Game

Given a weight labeling $w \colon (\gamemoveblank) \to \energyupdates$, an $N$-dimensional *declining energy game* $\game^üó≤$ is an energy reachability game with energies $\abstractenergies ‚âî \energies$ and with edges labeled $\abstractupdate(m) ‚âî \energyupdate(w(m), \cdot)$.

We write $g \gamemove{\;u\;} g'$ for a move $g \gamemoveblank g'$ labeled by weight $w(g, g') = u$.
:::

\noindent
Declining energy games differ from more common energy games with vector addition updates as seen in @exm-simple-energy-game due to the non-invertibility of updates we encountered in @exm-energy-update.

::: {#prp-declining-energies}
In this model, energy levels can only decline.

- Updates may only decrease energies, $\energyupdate(u, e) \leq e$.
- Updates are monotonic as demanded: If $e_A \leq e_B$, then $\energyupdate(u, e_A) \leq \energyupdate(u, e_B)$.<
<!-- These are actually already covered by the previous subsection 
- Energy level changes are monotonic:
  If $\energylevel(\rho g) \leq \energylevel(\sigma g)$ and $g \gamemoveblank g'$
  then $\energylevel(\rho g g') \leq \energylevel(\sigma g g')$.
- If $e_0 \leq e'_0$ and $\game^üó≤(g_0, e_0)$ has non-$\bot$ play $\rho$, then $\game^üó≤(g_0, e'_0)$ also has non-$\bot$ play $\rho$.-->
:::

## Characterizing the $\complexityname{P}$-Time Part of the Spectrum {#sec-characterzing-ptime-part}

As hinted at in Subsection [-@sec-equivalence-complexities], parts of the strong equivalence spectrum can be decided in polynomial time, whereas others require polynomial space (and thus effectively exponential time).
In this section, we will show how to adapt the standard bisimulation game of @def-bisim-game to decide not just bisimulation, but *all polynomial-time* equivalences of the strong spectrum *at once*.

### The Polynomial Slice {#sec-poly-slice}

First, let us make explicit which equivalences we include in the polynomial-time slice of the spectrum.
(The fact that they indeed can be decided efficiently is mostly well-known, but also itself a corollary of this section.)

To define the polynomial slice, we only use three dimensions:

1. modal depth
2. depth of negative conjuncts, and
3. nesting depth of negations (that is, the first, fifth and sixth dimension of the strong spectrum @def-strong-spectrum).

\noindent
Components for other dimensions of the strong spectrum of the previous chapter are effectively set to $‚àû$.

::: {#def-polynomial-strong-spectrum}

#### Polynomial-Time Strong Spectrum

We denote as *polynomial-time strong spectrum* the projection of the strong spectrum (@def-strong-spectrum) to the first, fifth, and sixth dimension, thus by notions
$$
\notions^\literal{poly-strong} ‚âî \natsext^3,
$$
and the family of strong observation languages
$$
\observationsvar[\literal{poly-strong}]{(N_1, N_2, N_3) ‚àà \notions^\literal{poly-strong}} ‚âî \observationsvar[\literal{strong}]{(N_1,‚àû,‚àû,‚àû,N_2,N_3)}.
$$
:::

\noindent
In effect, $\observationsvar{N ‚àà \notions^\literal{poly-strong}}$ can be characterized by $œÜ^N$ in the following grammar:
$$
\begin{array}{rcll}
  œÜ^N & \grammardef & \hmltrue{} & \\
      & \grammaror  & \hmlobs{Œ±}œÜ^{N - \unit{1}} & \\
      & \grammaror  & \hmlands\set{œà^N, œà^N, œà^N \ldots} & \\
  œà^N & \grammardef &
      \hmlobs{Œ±}œÜ^{N - \unit{1}} & \\
      & \grammaror  &
      \hmlneg \hmlobs{Œ±}œÜ^{(N \sqcap (N_2, \infty, \infty))- \unit{1} - \unit{3}} & \\
\end{array}
$$
@fig-polynomial-strong-spectrum gives names to coordinates that correspond to notions discussed previously.

::: {#fig-polynomial-strong-spectrum fig-pos='th'}
```tikz
\begin{tikzpicture}[auto,node distance=2.5cm,align=center]
  \node (B){bisimulation $\notionname{B}$\\$\infty,\infty,\infty$};
  \node (kB)[below right of=B,node distance=5cm]{$k$-step bisimulation $k\notionname{B}$\\$k,\infty,\infty$};
  \node (S2)[below left of=B]{$k$-nested simulation $k\notionname{S}$\\$\infty,\infty,k-1$};
  \node (RS)[below left of=S2]{ready simulation $\notionname{RS}$~\\$\infty,1,1$};
  \node (S)[below right of=RS]{simulation $\notionname{1S}$\\$\infty,0,0$};
  \node (E)[below right of=S]{enabledness $\notionname{E}$\\$1,0,0$};

  \path
  (B) edge (kB)
  (kB) edge (E)
  (B) edge (S2)
  (S2) edge (RS)
  (RS) edge (S)
  (S) edge (E)
  ;
\end{tikzpicture}
```
Hierarchy of polynomial-time decidable equivalences/preorders.
:::

Except for enabledness, $\notionname{E}$, all coordinates after unfolding them for $\notions^\literal{strong}$ are identical to the ones used previously.
When one unfolds the coordinate for enabledness $(1,0,0)$ to the original strong system, $(1,‚àû,‚àû,‚àû,0,0)$, it differs from the one previously used, namely, $(1,0,0,0,0,0)$.
The characterized language is strictly more expressive, as it contains conjunctions of enabled actions (e.g. $\hmlands\set{\hmlobs{\literal{a}}, \hmlobs{\literal{b}}}$), but it is equally distinctive.{{<isb lemma Priced_Spectrum lts.enabledness_conjunctions_are_neutral>}}

### The Bisimulation *Energy* Game

Let us upgrade the bisimulation game of @def-bisim-game with energies.
The claim is that the resulting game ${\game}_\notionname{B}^üó≤$ will characterize all equivalences of the polynomial-time strong spectrum in the sense that
$p \bpreordvar{\observationsvar{e}} q$ for $e ‚àà \notions^\literal{poly-strong}$ precisely if the defender wins ${\game}_\notionname{B}^üó≤$ from $[p, q]$ with budget $e$.

As we have seen in Subsection [-@sec-bisim-game-hml], the game moves match the distinctive power of productions in the $\observations{\floor{B}}$-grammar of @def-game-formulas.
Consequently, we can *count* the use of HML constructs in the game.
As the game stands, we can meaningfully count the three dimensions used in Subsection [-@sec-poly-slice].^[
  We cannot hope to count the other dimensions of @def-strong-spectrum:
  the bisimulation game washes away the amount of *necessary* conjunctions as its HML has conjunctions under each observation, even though they might not be necessary for a distinguishing formula.
]

We add the computations that happen in the grammar of @def-polynomial-strong-spectrum as energy updates to the bisimulation game and obtain:

::: {#def-bisim-energy-game}
#### Bisimulation Energy Game

For a transition system $\system$, the *bisimulation energy game* ${\game}_\notionname{B}^{üó≤\system}$ is played on the same graph as the *bisimulation game* ${\game}_\notionname{B}^{\system}$ (of @def-bisim-game), but the moves are weighted by the following energy updates:

- Attacker swaps are counted as a negation and limit the further observations to the depth of negative conjuncts:
  $$[p, q] \quad \gamemove{\updmin{1,2},0,-1}^üó≤_\notionname{B} \quad [q, p].$$
- Simulation challenges count as an observation (using up the budget for modal depth):
  $$[p, q] \quad \gamemove{-1,0,0}^üó≤_\notionname{B} \quad (Œ±, p', q) \quad \text{if} \quad p \step{Œ±} p'.$$
- And defender answers come for free:
  $$(Œ±, p', q) \quad \gamemove{0,0,0}^üó≤_\notionname{B} \quad [p', q'] \quad \text{if} \quad q \step{Œ±} q'.$$
:::

\noindent
The first dimension thus bounds how often the attacker may challenge simulation down the road,
the third limits how often they may swap sides,
and the middle dimension bounds the amount of simulation moves after a swap.

::: {#exm-bisim-sim-energy-game}

Let us label the bisimulation game of @exm-bisim-sim-game-formulas (distinguishing the ‚Äútrolled philosophers‚Äù) with energy updates.
@fig-bisim-sim-game-energies shows the game graph,
also exhibiting the cheapest formulas with regards to the polynomial spectrum that correspond to attacker winning strategies.

:::: {#fig-bisim-sim-game-energies}
```tikz

\begin{adjustbox}{max width=\textwidth, center}
  \begin{tikzpicture}[>->, shorten <=1pt, shorten >=0.5pt, auto, node distance=2cm,
    posStyle/.style={draw, inner sep=1ex, minimum size=1cm, minimum width=2.25cm, anchor=center, draw, black, fill=gray!5},
    defender/.style={ellipse, inner sep=0ex},
    defWins/.style={fill=blue!5}]

    \node[posStyle, initial, initial text={}, label={[text=gray]90:$\hmlands\set{\hmlneg\hmlobs{\tau}\hmlands\set{\hmlneg\hmlobs{\literal{a}}\hmltrue}} \in \observationsvar[\literal{poly-strong}]{(2,2,2)}$}]
      (Att_Q_Qp){$[\literal{Q}, \literal{T}]$};
    \node[posStyle, label={[text=gray]270:$\hmlobs{\tau}\hmlands\set{\hmlneg\hmlobs{\literal{a}}\hmltrue} \in \observationsvar[\literal{poly-strong}]{(2,1,1)}$}]
      (Att_Qp_Q) [below = 2cm of Att_Q_Qp] {$[\literal{T}, \literal{Q}]$};
    \node[posStyle, defender, defWins]
      (Dfn_t_qab_Qp) [right = 1.5cm of Att_Q_Qp] {$(\tau, \literal{q_{AB}}, \literal{T})$};
    \node[posStyle, defWins]
      (Att_qab_qab) [below right = .1cm and 1.5cm of Dfn_t_qab_Qp] {$[\literal{q_{AB}}, \literal{q_{AB}}]$};
    \node[posStyle, label={[text=gray]95:$\hmlobs{\literal{a}}\hmltrue \in \observationsvar[\literal{poly-strong}]{(1,0,0)}$}]
      (Att_qab_q3) [above right = .1cm and 1.5cm of Dfn_t_qab_Qp] {$[\literal{q_{AB}}, \literal{q_3}]$};
    \node[posStyle, defender, above right = .1cm and 1.5cm of Att_qab_q3]
      (Dfn_a_q1_q3) {$(\literal{a}, \literal{q_1}, \literal{q_3})$};
    \node[posStyle, defender]
      (Dfn_b_q2_q3) [below right = .1cm and 1.5cm of Att_qab_q3] {$(\literal{b}, \literal{q_2}, \literal{q_3})$};
    \node[posStyle, defender, defWins]
      (Dfn_t_qab_Q) [below = 1cm of Dfn_t_qab_Qp] {$(\tau, \literal{q_{AB}}, \literal{Q})$};
    \node[posStyle, defender]
      (Dfn_t_q3_Q) [below = 1cm of Dfn_t_qab_Q] {$(\tau, \literal{q_{3}}, \literal{Q})$};
    \node[posStyle, label={[text=gray]270:$\hmlands\set{\hmlneg\hmlobs{\literal{a}}\hmltrue} \in \observationsvar[\literal{poly-strong}]{(1,1,1)}$}]
      (Att_q3_qab) [below = 1cm of Att_qab_qab] {$[\literal{q_3}, \literal{q_{AB}}]$};

    \path
      (Att_Q_Qp)
        edge[bend left = 10] node {$\updmin{1,2},0,-1$} (Att_Qp_Q)
        edge node {$-1,0,0$} (Dfn_t_qab_Qp)
      (Att_qab_q3)
        edge[bend left = 65] node {$\updmin{1,2},0,-1$} (Att_q3_qab)
      (Att_q3_qab)
        edge[bend right = 60] node {} (Att_qab_q3)
      (Dfn_t_qab_Qp)
        edge node {0,0,0} (Att_qab_q3)
        edge node {0,0,0} (Att_qab_qab)
      (Att_qab_qab)
        edge [loop left] node {$\updmin{1,2},0,-1$} ()
      (Att_Qp_Q)
        edge[bend left = 10] node {$\updmin{1,2},0,-1$} (Att_Q_Qp)
        edge node[swap] {$-1,0,0$} (Dfn_t_qab_Q)
        edge node {$-1,0,0$} (Dfn_t_q3_Q)
      (Dfn_t_qab_Q)
        edge node[swap] {0,0,0} (Att_qab_qab)
      (Dfn_t_q3_Q)
        edge node {0,0,0} (Att_q3_qab)
      (Att_qab_q3)
        edge node {$-1,0,0$} (Dfn_a_q1_q3)
        edge node {$-1,0,0$} (Dfn_b_q2_q3)
    ;
  \end{tikzpicture}
\end{adjustbox}
```

The bisimulation energy game of @exm-bisim-sim-energy-game with energy updates and implied formulas.
::::

The attacker wins ${\game}^üó≤_\notionname{B}$ from $[\literal{Q}, \literal{T}]$ if they start out with an energy budget of $(2,2,2)$ or above.
But if the budget does not dominate this bound, the attacker loses.
For instance, neither $(1,\infty,\infty)$ nor $(\infty,\infty,1)$ is enough.
The second bound implies that the budgets, $(\infty,1,1)$ and $(\infty,0,0)$ are won by the defender as well.

:::: {#fig-exm-bisim-sim-pareto-front .column-margin}
```tikz
\begin{tikzpicture}[]
  \begin{scope}[rotate=45, scale=1]
    \draw[help lines] (0,0) grid (3.5,3.5);
    \draw[dotted] (2,2) -- (3.5,3.5);
    \draw[thick, red, opacity=0.5, text opacity=.8]
      (3.5,5.2) -- (3.5,3.5) node[below] {$(2,2,2)$} -- (5.2,3.5);
    \draw[thick, red, opacity=0.5, text opacity=.8]
      (3.5,3.5) -- (5,5);
  \end{scope}
\end{tikzpicture}
```
Attacker's Pareto front for $[\literal{Q}, \literal{T}]$ of the example bisim energy game.
::::

On the game-side, this tells us is that the attacker needs at least two simulation moves (after swaps) and two swaps to tell $\literal{Q}$ apart from $\literal{T}$.
Telling apart $\literal{T}$ from $\literal{Q}$ is slightly easier, only requiring one swap (and only one simulation move after the swap).

But, due to the correspondence of the game to modal formulas and of the energy updates to the pricing of formulas in the spectrum, the attacker winning budgets tell us more:
They reveal that one needs two observations and two (or more) negations to distinguish $\literal{Q}$ from $\literal{T}$ using formulas from $\observations{\floor{B}}$.

Thus, $\notions^{\literal{poly-strong}}_{\literal{Q}, \literal{T}} = \set{N ‚àà \notions^\literal{poly-strong} \mid N \nleq (2,2,2)}$ is the solution for the (polynomial-time strong) spectroscopy problem.
$\literal{Q}$ is preordered to $\literal{T}$ by 2-nested simulation, 1-step bisimulation, and all notions below;
but distinguished by all above, in particular, 3-nested simulation and 2-step bisimulation.

This is in line with the solution we thought of for the original strong spectrum in @exm-spectroscopy-front.
:::

### Correctness of Characterization {#sec-correctness-poly-spectroscopy}

We now prove that the bisimulation energy game indeed characterizes the equivalences of the polynomial-time strong spectrum.
In following chapters, we will prove stronger results for more general games.
The approach is to generalize the connection between winning attacks and distinguishing formulas in the  bisimulation game that we have already explored in @lem-attacks-imply-formulas and @lem-formulas-imply-attack to energies and spectrum.

::: {#def-strategy-formulas-poly}
#### Strategy Formulas for ${\game}_\notionname{B}^{üó≤}$

The set of *strategy formulas* for a game position $g$ and a budget $e$, $\strat_\notionname{B}(g, e)$, in the context of a bisimulation energy game ${\game}_\notionname{B}^{üó≤\system}$ is defined inductively by the following rules:
$$
\dfrac{
  [p, q] \gamemove{-1,0,0}^üó≤_\notionname{B} (Œ±, p', q) \quad
  e' = \energyupdate((-1,0,0), e) ‚àà \attackerwins^{\game_\notionname{B}^üó≤}((Œ±, p', q)) \quad
  œÜ ‚àà \strat_\notionname{B}((Œ±, p', q), e')
}{
  (\hmlobs{Œ±} œÜ) ‚àà \strat_\notionname{B}([p, q], e)
}
$$
$$
\dfrac{
  \forall q' ‚àà \derivatives{q, Œ±} \ldotp \quad
  (Œ±, p', q) \gamemove{0,0,0}^üó≤_\notionname{B} [p', q'] \; \land \;
  e ‚àà \attackerwins^{\game_\notionname{B}^üó≤}([p', q']) \; \land \;
  œà_{q'} ‚àà \strat_\notionname{B}([p', q'], e)
}{
  (\hmland{q'}{\derivatives{q, Œ±}} œà_{q'}) ‚àà \strat_\notionname{B}((Œ±, p', q), e)
}
$$
$$
\dfrac{
  [p, q] \gamemove{\updmin{1,2},0,-1}^üó≤_\notionname{B} [q, p] \quad
  e' = \energyupdate((\updmin{1,2},0,-1), e) ‚àà \attackerwins^{\game_\notionname{B}^üó≤}([q, p]) \quad
  \hmlobs{Œ±} œÜ ‚àà \strat_\notionname{B}([q, p], e')
}{
  (\hmlneg  \hmlobs{Œ±} œÜ) ‚àà \strat_\notionname{B}([p, q], e)
}
$$
:::

{{<noindent>}} Effectively, this definition generalizes the construction of distinguishing formulas on ${\game}_\notionname{B}$ we introduced in @lem-attacks-imply-formulas.
So the formulas we encountered before also serve as examples of such strategy formulas.

::: {#lem-bisim-energy-game-soundness}
If $e ‚àà \attackerwins^{\game_\notionname{B}^üó≤}([p, q])$,
then there is $œÜ ‚àà \strat_\notionname{B}([p, q], e)$ with $œÜ ‚àà \observationsvar[\literal{poly-strong}]{e}$, $p ‚àà \semantics{œÜ}$ and $q \notin \semantics{œÜ}$.
:::
::: proof
We prove the following, more general, property by induction.

1. If $e ‚àà \attackerwins^{\game_\notionname{B}^üó≤}([p, q])$,
then there is $œà ‚àà \strat_\notionname{B}([p, q], e)$ of form $œà = \hmlobs{Œ±}œÜ'$ or $\hmlneg\hmlobs{Œ±}œÜ'$ with $\hmlands\set{œà} ‚àà \observationsvar[\literal{poly-strong}]{e}$, $p ‚àà \semantics{œà}$ and $q \notin \semantics{œà}$.
2. If $e ‚àà \attackerwins^{\game_\notionname{B}^üó≤}((Œ±, p', q))$,
then there is $œÜ ‚àà \strat_\notionname{B}((Œ±, p', q), e)$ of form $œÜ = \hmlands Œ®$ with $œÜ ‚àà \observationsvar[\literal{poly-strong}]{e}$, $p' ‚àà \semantics{œÜ}$ and $q \notin \semantics{\hmlobs{Œ±}œÜ}$.

Proof by induction on the inductive characterizations of attacker winning budgets @prp-winning-budget-rules.

1. Assume $e ‚àà \attackerwins^{\game_\notionname{B}^üó≤}([p, q])$.
  This must be due to one of the following moves:
    - Case $[p, q] \gamemoveblank^üó≤_\notionname{B} [q, p]$ with $e' = \energyupdate((\updmin{1,2},0,-1), e) ‚àà \attackerwins^{\game_\notionname{B}^üó≤}([q, p])$.
      By induction hypothesis on $[q, p]$, there is $œà ‚àà \strat_\notionname{B}([q, p], e')$ with $\hmlands\set{œà} ‚àà \observationsvar[\literal{poly-strong}]{e'}$, $q ‚àà \semantics{œà}$ and $p \notin \semantics{œà}$.
      Consider the possible forms of $œà$:
        - $œà = \hmlobs{Œ±}œÜ'$.
          By @def-strategy-formulas-poly of $\strat_\notionname{B}$, we obtain $\hmlneg\hmlobs{Œ±}œÜ' ‚àà \strat_\notionname{B}([p, q], e)$.
          Because of the semantics of $\hml$, $\hmlneg\hmlobs{Œ±}œÜ'$ must distinguish $p$ from $q$.
          Also, $\hmlands\set{\hmlneg\hmlobs{Œ±}œÜ'} ‚àà \observationsvar[\literal{poly-strong}]{e}$, by the calculations of the grammar in @def-polynomial-strong-spectrum.
        - $œà = \hmlneg\hmlobs{Œ±}œÜ'$.
          This can only be in $\strat_\notionname{B}([q, p], e')$ due to $œÜ'$ being in $\strat_\notionname{B}([p, q], \energyupdate((\updmin{1,2},0,-1), e'))$.
          Clearly, $œÜ'$ must distinguish $p$ from $q$ and $\hmlands\set{œÜ'} ‚àà \observationsvar[\literal{poly-strong}]{e}$.
    - Case $[p, q] \gamemoveblank^üó≤_\notionname{B} (Œ±, p', q)$ with $p \step{Œ±} p'$ and $e' = \energyupdate((-1,0,0), e) ‚àà \attackerwins^{\game_\notionname{B}^üó≤}((Œ±, p', q))$.
      By induction hypothesis on $(Œ±, p', q)$, there is $\hmlands Œ® ‚àà \strat_\notionname{B}((Œ±, p', q), e')$ and $\hmlands Œ® ‚àà \observationsvar[\literal{poly-strong}]{e'}$ with $p' ‚àà \semantics{\hmlands Œ®}$ and $q \notin \semantics{\hmlobs{Œ±}\hmlands Œ®}$.
      By @def-strategy-formulas-poly, we obtain $\hmlobs{Œ±}\hmlands Œ® ‚àà \strat_\notionname{B}([p, q], e)$.
      Due to the semantics of $\hml$ and $p \step{Œ±} p'$, $p ‚àà \semantics{\hmlobs{Œ±}\hmlands Œ®}$, thus distinguishing $p$ from $q$.
      Also, $\hmlobs{Œ±}\hmlands Œ® ‚àà \observationsvar[\literal{poly-strong}]{e}$ as $\hmlands Œ® ‚àà \observationsvar[\literal{poly-strong}]{e - \unit{1}}$.
2. Assume $e ‚àà \attackerwins^{\game_\notionname{B}^üó≤}((Œ±, p', q))$.
  This means that $e$ suffices for the attacker to win every $q'$-move $(Œ±, p', q) \gamemoveblank^üó≤_\notionname{B} [p', q']$ with $q \step{Œ±} q'$ that the defender might take, with $e ‚àà \attackerwins^{\game_\notionname{B}^üó≤}([p', q'])$.
  For each $q'$, we employ the induction hypothesis to obtain $œà_{q'} ‚àà \strat_\notionname{B}([p', q'], e)$ of form $œà_{q'} = \hmlobs{Œ±}œÜ'$ or $\hmlneg\hmlobs{Œ±}œÜ'$ with $\hmlands\set{œà_{q'}} ‚àà \observationsvar[\literal{poly-strong}]{e}$, $p' ‚àà \semantics{œà_{q'}}$ and $q' \notin \semantics{œà_{q'}}$.
  By @def-strategy-formulas-poly, $(\hmland{q'}{\derivatives{q, Œ±}} œà_{q'}) ‚àà \strat_\notionname{B}((Œ±, p', q), e)$.
  By the $\hml$-semantics, $(\hmland{q'}{\derivatives{q, Œ±}} œà_{q'})$ must be true for $p'$, and also taking the semantics of observation, $\hmlobs{Œ±}(\hmland{q'}{\derivatives{q, Œ±}} œà_{q'})$ false for $q$.
  Moreover, $(\hmland{q'}{\derivatives{q, Œ±}} œà_{q'}) ‚àà \observationsvar[\literal{poly-strong}]{e}$ by the grammar.\qedhere 
:::

::: {#lem-bisim-energy-game-completeness}
If there is $œÜ ‚àà \observationsvar[\literal{poly-strong}]{e}$ with $p ‚àà \semantics{œÜ}$ and $q \notin \semantics{œÜ}$,
then $e ‚àà \attackerwins^{\game_\notionname{B}^üó≤}([p, q])$.
:::
::: proof
By induction on the grammar of $\observationsvar[\literal{poly-strong}]{e}$.

Consider the cases of $œÜ ‚àà \observationsvar[\literal{poly-strong}]{e}$ with $p ‚àà \semantics{œÜ}$ and $q \notin \semantics{œÜ}$.

- $œÜ = \hmltrue$.
  This cannot be the case as $q \notin \semantics{œÜ}$ and $\semantics{\hmltrue} = \states$.
- $œÜ = \hmlobs{Œ±}œÜ'$ with $œÜ' ‚àà \observationsvar[\literal{poly-strong}]{e - \unit{1}}$.
  As $œÜ$ distinguishes $p$ from $q$, there must be a $p' ‚àà \semantics{œÜ'}$ such that $p \step{Œ±} p'$ and, for all $q' ‚àà \derivatives{q, Œ±}$, $q' \notin \semantics{œÜ'}$.
  Due to the induction hypothesis, $e - \unit{1} ‚àà \attackerwins^{\game_\notionname{B}^üó≤}([p', q'])$ for all such $q' ‚àà \derivatives{q, Œ±}$.
  Therefore, $e - \unit{1} ‚àà \attackerwins^{\game_\notionname{B}^üó≤}((Œ±, p', q))$.
  As the attacker can move $[p, q] \gamemove{-\unit{1}} (Œ±, p', q)$, this proves $e ‚àà \attackerwins^{\game_\notionname{B}^üó≤}([p, q])$ by @prp-winning-budget-rules.
- $œÜ = \hmlands\setŒ®$ one of the $œà ‚àà Œ®$ must be false for $q$.
  Consider the possible forms of $œà$:
    - Case $œà = \hmlobs{Œ±}œÜ'$ with $œÜ' ‚àà \observationsvar[\literal{poly-strong}]{e - \unit{1}}$.
      Then we can apply the same argument as in the case of $œÜ = \hmlobs{Œ±}œÜ'$.
    - Case $œà = \hmlneg\hmlobs{Œ±}œÜ'$ with $œÜ' ‚àà \observationsvar[\literal{poly-strong}]{(e \sqcap (e_2, \infty, \infty)) - \unit{1} - \unit{3}}$.
      Therefore, $\hmlobs{Œ±}œÜ' ‚àà \observationsvar[\literal{poly-strong}]{(e \sqcap (e_2, \infty, \infty)) - \unit{3}}$ distinguishes $q$ from $p$.
      This time, we can employ the same argument as in the case of $œÜ = \hmlobs{Œ±}œÜ'$ to obtain that $(e \sqcap (e_2, \infty, \infty)) - \unit{3} ‚àà \attackerwins^{\game_\notionname{B}^üó≤}([q, p])$.
      The move $[p, q] \gamemove{\updmin{1,2},0,-1}^üó≤_\notionname{B} [q, p]$ and $\energyupdate((\updmin{1,2},0,-1), e) = (e \sqcap (e_2, \infty, \infty)) - \unit{3}$ justify that $e ‚àà \attackerwins^{\game_\notionname{B}^üó≤}([p, q])$.
      \qedhere
:::

::: {#thm-bisim-energy-game-characterization}
$p \bpreordvar{\observationsvar{e}} q$ for $e ‚àà \notions^\literal{poly-strong}$ precisely if the defender wins ${\game}_\notionname{B}^üó≤$ from $[p, q]$ with budget $e$.
:::

\noindent
Thus, we have established that the bisimulation energy game ${\game}_\notionname{B}^üó≤$ characterizes the equivalences of the polynomial-time strong spectrum $\notions^\literal{poly-strong}$.
To exploit this property to decide equivalences and solve the spectroscopy problem algorithmically, we need one more ingredient:
A decision procedure for winning budgets in declining energy games.

## Deciding Energy Games {#sec-deciding-energy-games}

This section is about how to compute which energy budgets are winning for the attacker (or the defender) at positions of an energy game:

::: {#def-energy-game-problem .problem}
#### Monotonic Energy Game Winner Problem

In the context of an energy system $(\abstractenergies, \leq)$ and a finite energy game $\game^üó≤=(G,G_\defender,\gamemoveblank, \abstractupdate)$, the *energy game winner problem* goes:

Input
:  Game position $g ‚àà G$.

Output
:  $\attackerwinsmin(g)$---the Pareto front of minimal winning budgets for the attacker at $g$.
:::

\noindent
We will show how to solve the problem for energy games with monotonic updates.
To this end, we will adapt the idea of back-propagating how the defender loses in reachability games from @alg-deciding-games.

The change is that we have to propagate not just attacker wins, but Pareto fronts of attacker-winning energy levels.
For this, we have to ‚Äúinvert‚Äù the energy update functions.
But, as we have seen in @exm-energy-update, our specific declining energy updates are neither injective nor surjective, and thus cannot be cleanly inverted.

We will see how to tackle these challenges using *Galois connections*.
For details, readers are referred to @lemke2024multiweightedEnergyGames.

### Galois Connections

Galois connections can be thought of as a pair of *monotonic functions that invert each other up to their partial ordering relations*.
Another standard intuition is that Galois connections couple a *concrete* and a more *abstract* domain, and this is what the variable naming in the following definition alludes to.

::: {#def-galois-connection}
A *Galois connection* between two partially ordered sets $(C, \leq_C)$ and $(A,\leq_A)$ is a pair of functions $Œ± \colon C \to A$ and $\gamma \colon A \to C$ such that, for all $a ‚àà A$ and $c ‚àà C$:
$$
Œ±(c) \leq_A a \iff c \leq_C \gamma(a).
$$
:::

\noindent
An illustration of the connection property can be seen in @fig-galois-connection.
(The illustration also illuminates why the $Œ±$-function is often referred to as ‚Äúlower adjoint‚Äú and $\gamma$ as ‚Äúupper adjoint‚Äù of a Galois connection.)

::: {#fig-galois-connection .column-margin}
```tikz
\begin{tikzpicture}[auto, node distance = 1cm, minimum width=.8cm]
  \node (c) {$c$};
  \node (cleq) [above of=c, rotate=90] {$\leq$};
  \node (agamma) [above of=cleq] {$\gamma(a)$};
  \node (C) [above of=agamma] {$C$};
  \node (cabs) [right of=c, node distance=3cm] {$Œ±(c)$};
  \node (aleq) [above of=cabs, rotate=90] {$\leq$};
  \node (a) [above of=aleq] {$a$};
  \node (A) [above of=a] {$A$};
  \node (iff) [right of=cleq, node distance=1.5cm, rotate=-45] {$\iff$};
  \path[->]
    (c) edge[bend right=10, swap] node {$Œ±$} (cabs)
    (a) edge[bend right=10, swap] node {$\gamma$} (agamma);
  \draw (cleq) ellipse (1cm and 1.7cm);
  \draw (aleq) ellipse (1cm and 1.7cm);
\end{tikzpicture}
```
Visualization of Galois connections according to @def-galois-connection.
:::

::: {#exm-galois-abstraction-reals}
Take the non-negative reals $\reals^{\geq 0}$ as concrete domain and the natural numbers $\nats$ as abstract domain.
Then, as function $Œ±_{\reals} \colon \reals^{\geq 0} \to \nats$, take flooring, $x \mapsto \floor{x}$, and for the other direction, the identity $\identity{\nats}$, $n \mapsto n$.
Clearly, $\floor{x} \leq n \iff x \leq n$.
Therefore, $Œ±_{\reals}$ and $\identity{\nats}$ form a Galois connection.
:::

::: {#fig-galois-abstraction-reals .column-margin}
```tikz
\begin{tikzpicture}[]
  \draw[draw=red, thick] (-.25,0) -- ++(.5,0);
  \draw[draw=red, thick] (-.25,1) -- ++(.5,0);
  \draw[draw=red, thick] (-.25,2) -- ++(.5,0);
  \draw[draw=red, thick] (-.25,3) -- ++(.5,0);
  \draw[draw=blue, thick] (1.75,0) -- ++(.5,0);
  \draw[draw=blue, thick] (1.75,1) -- ++(.5,0);
  \draw[draw=blue, thick] (1.75,2) -- ++(.5,0);
  \draw[draw=blue, thick] (1.75,3) -- ++(.5,0);

  \draw[draw=black] (-.125,0) rectangle ++(.25,1);
  \draw[draw=black] (-.125,1) rectangle ++(.25,1);
  \draw[draw=black] (-.125,2) rectangle ++(.25,1);
  \draw[draw=gray] (0,0) -- ++(2,0) -- ++(-2,1);
  \draw[draw=gray] (0,1) -- ++(2,0) -- ++(-2,1);
  \draw[draw=gray] (0,2) -- ++(2,0) -- ++(-2,1);
  \draw[] (0,3.6) node {$\vdots$};
  \draw[] (2,3.6) node {$\vdots$};

  \draw[] (0,-.5) node {$\reals^{\geq 0}$};
  \draw[] (2,-.5) node {$\nats$};

  \path[->, dotted]
    (2,0) edge[bend right=15] (0,0)
    (2,1) edge[bend right=15] (0,1)
    (2,2) edge[bend right=15] (0,2)
    (2,3) edge[bend right=15] (0,3);
\end{tikzpicture}
```
Illustration of the Galois connection of @exm-galois-abstraction-reals between $\reals^{\geq 0}$ and $\nats$ using $\floor{\cdot}$-function, whose mapping is illustrated by the gray triangles.
:::

Any monotonic function naturally induces a Galois-connected abstraction function.

::: {#lem-galois-inversion}
The following are equivalent:

- $\gamma \colon A \to C$ is a monotonic function, and $Œ±(c) = \inf \set{a \mid c \leq_C \gamma(a)}$ for all $c ‚àà C$.
- $Œ±$ and $\gamma$ constitute a Galois connection between $C$ and $A$.^[
  Proposition 4 of @ekms1993primerGaloisConnections.
]
:::

\noindent
We will refer to functions derived like $Œ±(c)$ in @lem-galois-inversion as ‚Äúundo‚Äù functions.
We understand them to generalize inverse functions of monotonic functions as these will always be Galois connected.

::: {#lem-galois-equality}
If a function $f \colon A \to C$ is surjective and injective, it has a unique inverse function $f^{-1} \colon C \to A$ such that $f^{-1} \circ f = \identity{A}$ and $f \circ f^{-1} = \identity{C}$.

If $f$ is monotonic with respect to some partial orders on $C$ and $A$,
then $f^{-1}$ and $f$ must form a Galois connection.
:::
:::proof
Because of injectivity and monotonicity, $f$ and $f^{-1}$, must be (strictly) monotonic.
Together with the definition of function inversion, we can reason
$$f(c) \leq_A a \implies f^{-1}(f(c)) \leq_A f^{-1}(a) \implies c \leq_C f^{-1}(a)$$
and
$$c \leq_C f^{-1}(a) \implies f(c) \leq_A f(f^{-1}(a)) \implies f(c) \leq_A a.$$\qedhere
:::

\noindent
In the following, we will use a $‚Ü∫$-symbol to label the adjoint functions that we use to undo energy updates.

::: {#rem-galois-expr}
@def-spectrum demands monotonicity of our observation languages for a spectrum, $\observationsvar{N \in \notions}$.
If we construct an abstraction function as in @lem-galois-inversion to undo the language selection for a set of formulas $\Phi$, the result would read: 
$$
\alpha_{\observations{}}(\Phi) := \inf \set{N \in \notions \mid \Phi \subseteq \observationsvar{N}}.
$$
The singleton case of this function exactly matches our expressiveness prices of @def-expressiveness-price:
$$
\expr(\varphi) := \inf \set{N \in \notions \mid \varphi \in \observationsvar{N}}.
$$
:::

### The Algorithm

To implement a back-propagation algorithm, we have to assume that we know a function that undoes energy updates, $\abstractupdateinv \colon (\gamemoveblank) \to \abstractenergies \to \abstractenergies$ with $\abstractupdateinv(g, g')(e') = \inf \set{e \mid e' \leq \abstractupdate(g, g')(e)}$.
That means, we assume that there is a Galois connection $(\abstractupdateinv, \abstractupdate)$ between energies $\abstractenergies$ and the domain of updates $\set{e ‚àà \abstractenergies \mid \abstractupdate(e) \neq \bot}$.

@alg-deciding-energy-games can be used to compute the minimal attacker winning budgets.

::: {#alg-deciding-energy-games}

$$
\begin{array}{rl}
   1 &  \kw{def} \variable{compute\_winning\_budgets}(\game^üó≤=(G,G_\defender,\gamemoveblank, \abstractupdate), \abstractupdateinv) \colon \\
   2 &  \quad \variable{attacker\_win} := [ g \mapsto \varnothing \mid g ‚àà G ] \\
   3 &  \quad \variable{todo} := \set{g ‚àà G_\defender \mid g \ngamemoveblank} \\
   4 &  \quad \kw{while} \variable{todo} \neq \varnothing \colon \\
   5 &  \quad \quad \variable{g} := \kw{some} \variable{todo} \\
   6 &  \quad \quad \variable{todo} := \variable{todo} \setminus \set{\variable{g}} \\
   7 &  \quad \quad \kw{if} \variable{g} ‚àà G_\attacker \colon \\
   8 &  \quad \quad \quad \variable{new\_attacker\_win} :=
            \Min( \set{\abstractupdateinv(\variable{g}, g')(\mathit{e'}) \\
     &  \quad \quad \quad \quad \mid {\variable{g} \gamemoveblank g'} \land \mathit{e'} ‚àà \variable{attacker\_win}[g']}) \\
   9 &  \quad \quad \kw{else \colon} \\
  10 &  \quad \quad \quad \variable{new\_attacker\_win} := \set{\zerovec} \\
  11 &  \quad \quad \quad \kw{for} \variable{g'} ‚àà (\variable{g} \gamemoveblank \cdot) \colon \\
  12 &  \quad \quad \quad \quad \variable{new\_attacker\_win} :=
            \Min( \set{ \sup(e_\attacker, \abstractupdateinv(\variable{g}, g')(\mathit{e'})) \mid \\
     &  \quad \quad \quad \qquad e_\attacker ‚àà \variable{new\_attacker\_win} \land
            {\variable{g} \gamemoveblank g'} \land \mathit{e'} ‚àà \variable{attacker\_win}[g']} ) \\
  13 &  \quad \quad \kw{if} \variable{new\_attacker\_win} \neq \variable{attacker\_win}[\variable{g}] \colon \\
  14 &  \quad \quad \quad \variable{todo} := \variable{todo} ‚à™ (\cdot \gamemoveblank \variable{g}) \\
  15 &  \quad \attackerwinsmin := \variable{attacker\_win} \\
  16 &  \quad \kw{return} \attackerwinsmin \\
\end{array}
$$

Algorithm determining the minimal attacker winning budgets $\attackerwinsmin$ of an energy game $\game^üó≤$.
:::

The algorithm can be understood as a generalization of @alg-deciding-games, but as positions might need to be revisited more than once, we have to depart from the option counting trick.
Whenever we learn about a new minimal energy for the attacker to win, we schedule a position to be (re-)visited.
The chain-reaction starts at defender positions with no outgoing moves (lines 3 and 10).
By $\zerovec$, we denote the minimal element of the energy system $\abstractenergies$.

We illustrate the algorithm by running it on the simple energy game of @exm-simple-energy-game.

::: {#exm-simple-energy-game-execution}

Let us execute @alg-deciding-energy-games on the $\nats^2$-game of @exm-simple-energy-game.
The game graph, labeled by the minimal attacker winning energies we find, is reproduced in @fig-simple-energy-game-wins.

::: {#fig-simple-energy-game-wins fig-pos='t'}
```tikz
\begin{tikzpicture}[>->, shorten <=1pt, shorten >=0.5pt, auto, node distance=2cm,
  posStyle/.style={draw, inner sep=1ex, minimum size=1cm, minimum width=2.25cm, anchor=center, draw, black, fill=gray!5},
  defender/.style={ellipse, inner sep=0ex}]

  \node[posStyle, initial, initial text={}, label={100:$(0,2),(2,1)$}]
    (Att_1){$\literal{g_1}$};
  \node[posStyle, label={100:$(0,2)$}]
    (Att_2) [above right = .5cm and 1cm of Att_1] {$\literal{g_2}$};
  \node[posStyle, label={100:$(1,1)$}]
    (Att_3) [below right = .5cm and 1cm of Att_1] {$\literal{g_3}$};
  \node[posStyle, defender, label={10:$(1,1)$}]
    (Dfn_4) [right = 4cm of Att_1] {$\literal{g_4}$};
  \node[posStyle, label={100:$(0,1)$}]
    (Att_5) [right = 4cm of Att_2] {$\literal{g_5}$};
  \node[posStyle, defender, label={100:$(0,0)$}]
    (Dfn_6) [right = 4cm of Att_3] {$\literal{g_6}$};

  \path
    (Att_1)
      edge[bend left = 10] node {$0,0$} (Att_2)
      edge[bend right = 10, swap] node {$-1,0$} (Att_3)
      edge[bend left = 5] node {$-2,-1$} (Dfn_4)
    (Att_2)
      edge[bend left = 10] node {$+2,-1$} (Dfn_4)
    (Att_3)
      edge[bend right = 10, swap] node {$0,0$} (Dfn_4)
    (Dfn_4)
      edge[bend left = 10] node {$0,0$} (Att_5)
      edge[bend right = 10, swap] node {$-1,0$} (Dfn_6)
    (Att_5)
      edge[bend left = 10] node {$0,-1$} (Dfn_6)
  ;
\end{tikzpicture}
```

Computed winning budgets $\attackerwinsmin$ on the game in @exm-simple-energy-game-execution.
:::

\noindent
What we need for the algorithm to run, is some undo function $\abstractupdateinv \colon (\gamemoveblank) \to \abstractenergies \to \abstractenergies$.
We define it as:
$$
\abstractupdateinv(e') := \sup(e - \vec{u}, \zerovec)
$$
We list the steps of the computation in @exm-simple-energy-game-execution, and the mechanics behind them in @tbl-simple-energy-game-execution.

| step | $\variable{g}$ | $\variable{new\_attacker\_win}$ | $\variable{todo}$ |
|-----:|------|---------------------------------|:------------------|
|    0 |   --            |  $\literal{g}_i \mapsto \varnothing$ | $\literal{g_6}$  |
|    1 | $\literal{g_6}$ | $\set{(0,0)}$ | $\literal{g_4}, \literal{g_5}$  |
|    2 | $\literal{g_4}$ | $\varnothing$ | $\literal{g_5}$  |
|    3 | $\literal{g_5}$ | $\set{(0,1)}$ | $\literal{g_4}$  |
|    4 | $\literal{g_4}$ | $\set{(1,1)}$ | $\literal{g_1}, \literal{g_2}, \literal{g_3}$  |
|    5 | $\literal{g_1}$ | $\set{(3,2)}$ | $\literal{g_2}, \literal{g_3}$  |
|    6 | $\literal{g_2}$ | $\set{(0,2)}$ | $\literal{g_3}, \literal{g_1}$  |
|    7 | $\literal{g_3}$ | $\set{(1,1)}$ | $\literal{g_1}$  |
|    8 | $\literal{g_1}$ | $\set{(0,2), (2,1)}$ | $\varnothing$  |

: Steps while solving the game in @exm-simple-energy-game-execution. {#tbl-simple-energy-game-execution tbl-pos="b" layout-ncol="1"}

::: {#fig-game-defender-intersection .column-margin}
```tikz
\begin{tikzpicture}[]
  \begin{scope}[rotate=45, scale=1]
    \draw[help lines] (0,0) grid (3.5,3.5);
    \draw[opacity=0.9, text opacity=.8] (0,3.7) -- (0,1) node[below left] {$\literal{g_5}: (0,1)$} -- (3.7,1);
    \draw[opacity=0.9, text opacity=.8] (1,3.7) -- (1,0) node[below right] {$(1,0)$} -- (3.7,0);
    \path[thick, blue, opacity=0.9, ->] (0,0) edge node[left=-.1] {$\mathit{upd}^{\circlearrowleft}$} (1,0);
    \node[label=270:{$\literal{g_6}: (0,0)$}] at (0,0) {};
    \draw[thick, red, dashed, opacity=0.9, text opacity=.8, shift={(-.05,-.05)}] (1,3.7) -- (1,1) node[above=.5] {$(1,1)$} -- (3.7,1);
  \end{scope}
\end{tikzpicture}
```

Multiplicative combination (dashed red) of successor Pareto fronts (black) at defender position $\literal{g_4}$ in step 4.
:::

::: {#fig-game-attacker-intersection .column-margin}
```tikz
\begin{tikzpicture}[]
  \begin{scope}[rotate=45, scale=1]
    \draw[help lines] (0,0) grid (3.5,3.5);
    \draw[opacity=0.9, text opacity=.8] (0,3.7) -- (0,2) node[below left] {$\literal{g_2}$} -- (3.7,2);
    \draw[opacity=0.9, text opacity=.8] (2,3.7) -- (2,1) node[below right] {} -- (3.7,1);
    \draw[opacity=0.9, text opacity=.8] (3,3.7) -- (3,2) node[below right] {$(3,2)$} -- (3.7,2);
    \path[thick, blue, opacity=0.9, ->] (1,1) edge node[left=-.1] {$\mathit{upd}^{\circlearrowleft}$} (2,1);
    \path[thick, blue, opacity=0.9, ->, bend right=30] (1,1) edge node {} (3,2);
    \node [label=270:{$\literal{g_3},\literal{g_4}: (1,1)$}] at (1,1) {};
    %\draw[thick, red, dashed, opacity=0.9, text opacity=.8] (1,3.7) -- (1,1) node[above=.5] {$(1,1)$} -- (3.7,1);
    \draw[thick, red, dashed, opacity=0.9, text opacity=.8, shift={(-.05,-.05)}] (0,3.7) -- (0,2) node[above=.3] {$(0,2)$} -- (2,2) -- (2,1) node[below right] {$(2,1)$} -- (3.7,1);
  \end{scope}
\end{tikzpicture}
```

Additive combination (dashed red) of successor Pareto fronts (black) at attacker position $\literal{g_1}$ in step 8.
:::

0. The algorithm begins with $\literal{g_6}$ in the $\variable{todo}$-set as this is the only position where the defender is stuck.
1. Updating the defender node $\literal{g_6} ‚àà G_\defender$, we set it its minimal attacker-winning budget to $\zerovec$.
  This means that the attacker wins here with any budget.
  As there has been a change, both predecessors $\literal{g_4}$ and $\literal{g_5}$ are added to the $\variable{todo}$.
  (Their order is undefined; for the sake of the simulation we will always pick the first positions from the $\variable{todo}$.)
2. Updating $\literal{g_4} ‚àà G_\defender$ finds no attacker wins so far because one successor $\variable{attacker\_win}[\literal{g_5}] = \varnothing$.
3. $\literal{g_4} ‚àà G_\attacker$ is updated with the $\abstractupdateinv((0, -1))((0,0)) = \sup((0,0) - (0,-1), \zerovec) = (0,1)$.
  This places $\literal{g_4}$ in $\variable{todo}$ again.
4. Now, we can find attacker winning budgets for $\literal{g_4} ‚àà G_\defender$:
  The two successor options (after undo-update) are $(0,1)$ and $(1,0)$, as depicted in @fig-game-defender-intersection.
  The unless the attacker at least arrives with energy $\sup((0,1), (1,0)) = (1,1)$, the defender has a way of winning.
  Effectively, this amounts to intersecting attacker winning budgets of possible successor positions.
5. For $\literal{g_1} ‚àà G_\attacker$, it suffices to know a winning budget for one successor.
   So we determine as a preliminary winning budget $\abstractupdateinv((-2, -1))((1,1)) = (3,2)$.
6. $\literal{g_2} ‚àà G_\attacker$ also derives its winning budget from $(1,1)$.
  But $(1,1) - (2,-1) = (-1,2)$ would be outside the possible energy levels the attacker could carry here and is thus $\sup$-ed into $\nats^2$, yielding new win $(0,2)$.
7. $\literal{g_3} ‚àà G_\attacker$ just propagates $(1,1)$ from $\literal{g_4}$.
8. Revisiting $\literal{g_1} ‚àà G_\attacker$, we can now combine the three Pareto-fronts of its successors as illustrated in @fig-game-attacker-intersection as $\Min \set{(0,2), (2,1), (3,4)} = \set{(0,2), (2,1)}$.
  This operation corresponds to taking the union of the three sets of attacker winning budgets.
  The previous minimal budget $(3,4)$ of step&nbsp;5 is thus superseded.
  As $\variable{todo}$ is empty, the algorithm terminates.
:::

::: {#thm-energy-game-correctness}
Assume energies form a well-founded bounded $\lub$-semi-lattice $(\abstractenergies, \leq)$.
Given a finite-state energy game $\game^üó≤=(G,G_\defender,\gamemoveblank, \abstractupdate)$
with monotonic $\abstractupdateinv$-functions for all moves
and with computable undo function $\abstractupdateinv(g, g')(e') = \min \set{e \mid e' \leq \abstractupdate(g, g')(e)}$,
@alg-deciding-energy-games computes the Pareto front of minimal attacker winning budgets, solving 
the *monotonic energy game winner problem* (@def-energy-game-problem).
:::
:::proof
@alg-deciding-energy-games is a work-list variant of a fixed-point iteration computing the least fixed point of attacker winning budgets $\attackerwins$ according to the inductive characterization of @prp-winning-budget-rules.

The ‚Äúleast‚Äù here refers to the size of the $\attackerwins$-sets characterized by the $\attackerwinsmin$-Pareto front.

A detailed proof, employing Kleene's fixed point theorem, can be found in @lemke2024multiweightedEnergyGames.
Theorem 5 of @lemke2024multiweightedEnergyGames refers to a variant of @alg-deciding-energy-games, where *all* game positions are updated *simultaneously* in each iteration, which aligns more directly with the underlying functor.
As is common for graph algorithms, @alg-deciding-energy-games with updates of single vertices whose neighborhood has changed computes the same result, and usually in a more efficient manner.
:::

### Complexity

Thanks to @lemke2024multiweightedEnergyGames, we can name quite precise bounds for the running time of the algorithm in terms of size of the game and shape of the energy lattice.

::: {#def-lattice-width-below}
The *width*, $\relwidth_B(b)$, of a (semi-)lattice $(B, \leq)$ below a point $b$ is defined as the maximal size of anti-chains $B' \subseteq \downset \set{b}$. (Cf. @def-lattice.)
:::

::: {#thm-energy-game-complexity}

Consider the following parameters of an energy game problem on $\game^üó≤=(G,G_\defender,\gamemoveblank, \abstractupdate)$ where the energies at least form a well-founded bounded $\lub$-semi-lattice $(\abstractenergies, \leq)$:

- $t_{\sup}$, time to calculate the supremum between two elements of $\abstractenergies$,
- $t_\leq$, time to compare two elements of $\abstractenergies$,
- $t_{\abstractupdateinv}$, time to compute $\abstractupdateinv$ on an energy,
- $e_{\game}$, the highest energy that can be achieved by applying permutations of $\abstractupdateinv(\cdot)$ to $\zerovec$ for $\relsize{G}-1$ times.
- $o_{\gamemoveblank}$, the out-degree of the game graph $\gamemoveblank$.

Then, @alg-deciding-energy-games computes the minimal attacker winning budgets in
$$\bigo{ (\relsize{G}^2 + \relsize{\downset \set{e_{\game}}}) \cdot \relsize{G} \cdot o_{\gamemoveblank} \cdot (\relwidth_{\abstractenergies}(e_{\game}))^2 \cdot (t_{\abstractupdateinv} + t_{\sup} + \relwidth_{\abstractenergies}(e_{\game}) \cdot t_\leq) }.$$

If $\abstractupdateinv$ is declining, then the following suffices:
$$
\bigo{ \relsize{G}^2 \cdot o_{\gamemoveblank} \cdot (\relwidth_{\abstractenergies}(e_{\game}))^2 \cdot (t_{\abstractupdateinv} + t_{\sup} + \relwidth_{\abstractenergies}(e_{\game}) \cdot t_\leq) }.
$$
In both cases, the algorithm needs $\bigo{\relsize{G} \cdot \relwidth_{\abstractenergies}(e_{\game}) \cdot s_{\abstractenergies}}$ space to store the Pareto fronts, where $s_{\abstractenergies}$ bounds the space needed per energy.
(For declining games, it is reasonable to assume $s_{\abstractenergies} \in \bigo{N}$.)
:::
:::proof
As in @thm-energy-game-correctness, we refer to @lemke2024multiweightedEnergyGames for a very detailed proof, where the corresponding fact is proved as Theorem&nbsp;7.

TODO: Add a proof sketch regardless.
:::

### Solving Declining Energy Games

Let us instantiate the previous two subsections to declining energy games.
All we have to do is instantiate $\abstractupdateinv$ to obtain an algorithm and think about the structure of the energies to tell its complexity.

::: {#def-declining-upd-inv}
The undo-update function $\energyupdateinv$ on an $N$-dimensional declining energy game is defined component-wise for $k \in \set{1 ‚Ä¶ N}$ as:
$$
\begin{array}{rl}
(\energyupdateinv(u, e'))_k := \max(
      & \set{e'_k - u_k  \mid  u_k \in \set{0,-1}} \\
  \cup & \set{e'_j        \mid \exists D \ldotp u_j = \mathtt{min}_D \land k \in D}).
\end{array}
$$
:::

TODO: Example

::: {#lem-declining-update-galois}
For all updates $u \in \energyupdates$, $\energyupdateinv(u, \cdot)$ and $\energyupdate(u, \cdot)$ form a Galois connection on the domain $\domain(u)$.
:::
:::proof
As $\energyupdate(u, \cdot)$ is monotonic, all that needs to be shown according to @lem-galois-inversion, is that $\energyupdateinv(u, e') = \min \set{e \mid e' \leq \energyupdate(u, e)}$.

- Soundness: $\energyupdateinv(u, e') \in \set{e \mid e' \leq \energyupdate(u, e)}$.
  This boils down to showing $e'_k \leq (\energyupdate(u, \energyupdateinv(u, e')))_k$.
  Consider the cases of $u_k$.
  - Case $u_k \in \set{0,-1}$.
    Then, we have to show $e'_k \leq \energyupdateinv(u, e') + u_k$.
    Due to $\energyupdateinv$ being increasing, this must be the case as $e'_k \leq e'_k + u_k$.
  - Case there is $D$ such that $u_k = \mathtt{min}_D$ and $k \in D$.
    Then, by definition of $\mathtt{min}$-updates, we have to show $e'_k \leq \min\set{(\energyupdateinv(u, e'))_j \mid j \in D}$,
    that is, $e'_k \leq \energyupdateinv(u, e')_j$ for all $j \in D$.
    We do so by contradiction:
    Assume there were a $j$ where this ordering does not hold, meaning $e'_k > \energyupdateinv(u, e')_j$.
    As $k \in D$, this is impossible due to the definition of $\energyupdateinv$ in terms of $\max$.
- Minimality: For all $e' \leq \energyupdate(u, e)$, we show $\energyupdateinv(u, e') \leq e$.
  More specifically, $(\energyupdateinv(u, e'))_k \leq e_k$.
  Let us define $d' := \max \set{e'_j \mid \exists D \ldotp u_j = \mathtt{min}_D \land k \in D}$.
  Consider the cases of $u_k \in \energyupdates$.
  - Case $u_k \in \set{0,-1}$ and $e'_k - u_k \geq d'$.
    Then $e'_k \leq (\energyupdate(u, e))_k = e_k + u_k$,
    implying $e'_k - u_k \leq (\energyupdate(u, e))_k = e_k$.
    By definition, $(\energyupdateinv(u, e'))_k = \max(e'_k - u_k, d')$.
    As $e'_k - u_k \geq d'$, we can connect to the previous inequality, getting $(\energyupdateinv(u, e'))_k = e'_k - u_k \leq e_k$.
  - Otherwise, $(\energyupdateinv(u, e'))_k = d'$.
    We show $d' \leq e_k$ by contradiction.
    Assume it were the case that $d' > e_k$.
    For this to be true there would need to be $j$ and $D$ such that $u_j = \mathtt{min}_D$, $k \in D$, and $e'_j \geq d' > e_k$.
    By definition of $\mathtt{min}$-update at $j$, we calculate $(\energyupdate(u, e))_j \leq e_k < e'_j$.
    But this would contradict the global assumption that $e' \leq \energyupdate(u, e)$. \qedhere
:::

::: {#lem-declining-update-complexity}
@alg-deciding-energy-games solves the energy game problem on an $N$-dimensional *declining* energy game $\game^üó≤=(G,G_\defender,\gamemoveblank, w)$ in time
$$
\bigo{o_{\gamemoveblank} \cdot \relsize{G}^{2 \cdot N} \cdot (N^2 + \relsize{G}^{N-1} \cdot N)}
$$
and space $\bigo{ \relsize{G}^{N} \cdot N }$.
:::
::: proof
For declining updates, we instantiate the second case of @thm-energy-game-complexity:
$$
\bigo{ \relsize{G}^2 \cdot o_{\gamemoveblank} \cdot (\relwidth_{\abstractenergies}(e_{\game}))^2 \cdot (t_{\abstractupdateinv} + t_{\sup} + \relwidth_{\abstractenergies}(e_{\game}) \cdot t_\leq) }.
$$
For *declining energy games* as defined in @def-declining-energy-game, we can fill in several blanks:

- $t_{\sup}$, the time to calculate the supremum between two elements of $\energies$ is in $\bigo{N}$,
- $t_\leq$, time to compare two elements of $\energies$ is in $\bigo{N}$,
- $t_{\abstractupdateinv}$, time to compute $\energyupdateinv$ on an energy is in $\bigo{N^2}$,
- $e_{\game}$, the highest energy that can be achieved by applying permutations of $\energyupdateinv$ to $\zerovec$ for $\relsize{G}-1$ times, is the $N$-ary vector $(\relsize{G}-1, ‚Ä¶, \relsize{G}-1)$,
- $\relwidth_{\energies}(e_{\game})$, the widest anti-chain under $e_{\game}$, can be bounded $\bigo{\relsize{G}^{N-1}}$.

\noindent
This yields:
$$
\begin{array}{rl}
    & \bigo{ \relsize{G}^2 \cdot o_{\gamemoveblank} \cdot (\relwidth_{\energies}(e_{\game}))^2 \cdot (t_{\abstractupdateinv} + t_{\sup} + \relwidth_{\energies}(e_{\game}) \cdot t_\leq) } \\
  = & \bigo{ \relsize{G}^2 \cdot o_{\gamemoveblank} \cdot (\relsize{G}^{N-1})^2 \cdot (N^2 + N + \relsize{G}^{N-1} \cdot N) } \\
  = & \bigo{ o_{\gamemoveblank} \cdot \relsize{G}^{2N+2-2} \cdot (N^2 + \relsize{G}^{N-1} \cdot N) } \\
  = & \bigo{ o_{\gamemoveblank} \cdot \relsize{G}^{2N} \cdot (N^2 + \relsize{G}^{N-1} \cdot N) } \\
\end{array}
$$
For space complexity, we obtain:
$$
\begin{array}{rl}
    & \bigo{ \relsize{G} \cdot \relwidth_{\energies}(e_{\game}) \cdot N } \\
    & \bigo{ \relsize{G} \cdot \relsize{G}^{N-1} \cdot N } \\
    & \bigo{ \relsize{G}^{N} \cdot N }
\end{array}
$$\qedhere

:::

::: {#def-flattened-energies}

For $N$-dimensional energy games, we define the *flattened energies* as $\energiesflattened := (\set{0,1,\infty})^N$.
A standard energy $e \in \energies$ is cast to $\energiesflattened$ by $\widehat{e}$ where
$$
(\widehat{e})_k :=
\begin{cases}
  e_k     & \text{if } e_k \leq 1 \\
  \infty  & \text{otherwise}
\end{cases}.
$$
We denote as *flattened* monotonic energy game winner problem the variant of @def-energy-game-problem that outputs
$$
\widehat{\attackerwinsmin}(g) := \Min (\attackerwins(g) \cap \energiesflattened).
$$
:::

\noindent
Clearly, @alg-deciding-energy-games can too be used to solve the flattened version of the problem by adapting $\energyupdateinv$ to represent all components above 1 by $\infty$.
Effectively, this decouples the size of Pareto fronts from the game size.
In this instance, @lem-declining-update-complexity becomes:

::: {#lem-declining-update-complexity-flattened}
@alg-deciding-energy-games solves the *flattened* energy game problem on an $N$-dimensional declining energy game $\game^üó≤=(G,G_\defender,\gamemoveblank, w)$ in time
$$
\bigo{ o_{\gamemoveblank} \cdot \relsize{G}^{2N} \cdot (N^2 + 3^{N-1} \cdot N) }
$$
and in space $\bigo{ \relsize{G} \cdot 3^{N-1} \cdot N }$.
:::

\noindent
The bounds we have established are *exponential* with regard to the dimensionality $N$.
But in our use case, we care for energy games of fixed dimensionality.
The time bounds are *polynomial* with regard to game graph size.
The space bounds behave similarly, but in the *flattened* variant fixed energy makes the space usage even drop to be *linear* in terms of game graph size.

### Polynomial Spectroscopy Complexity

We have gathered enough material to have this section prove that the spectroscopy problem for the polynomial-time strong spectrum is indeed solvable in polynomial time, thus justifying the name we chose for the spectrum.

As outlined in @sec-spectro-problem, we consider the spectroscopy problem for $p$ and $q$ solved when we can compute $\Min(\notions \setminus \notions_{p,q})$.
According to @thm-bisim-energy-game-characterization,
$\notions^\literal{poly-strong}_{p,q} = \defenderwins^{\game_\notionname{B}^üó≤}([p,q])$.
By the definitions of winning budgets, $\notions^\literal{poly-strong} \setminus \notions^\literal{poly-strong}_{p,q} = \attackerwins^{\game_\notionname{B}^üó≤}([p,q])$
 and thus
 $\Min(\notions^\literal{poly-strong} \setminus \notions^\literal{poly-strong}_{p,q}) = \attackerwins^{\min\game_\notionname{B}^üó≤}([p,q])$.

::: {#thm-bisim-energy-game-complexity}
Given a transition system $\system$,
the spectroscopy problem for the $\notions^\literal{poly-strong}$-spectrum can be solved in polynomial time with respect to the size of $\system$.
:::
:::proof
@thm-bisim-energy-game-characterization has established that we can solve the spectroscopy problem for the $\notions^\literal{poly-strong}$-spectrum by deciding the winning budgets of the bisimulation energy game ${\game}_\notionname{B}^üó≤$ on $\system=(\states,\actions,\step{})$.
Thus, all that remains to be done is to instantiate the winning budget complexity of @lem-declining-update-complexity for the case $N=3$ with the size of ${\game}_\notionname{B}^üó≤$ according to @def-bisim-energy-game.

The amount of attacker positions is bounded by $\relsize{\states}^2$.
These positions can initiate up to $\relsize{\states} \cdot \relsize{\step{}}$ simulation challenges, leading to a similarly-bounded amount of defender positions, which again can be left by $\relsize{\states} \cdot \relsize{\step{}}$ moves.

In total, this amounts to $o_{\gamemoveblank_\notionname{B}^üó≤}$ in $\bigo{\relsize{\states} \cdot \relsize{\step{}}}$ and to $\relsize{G_\notionname{B}^üó≤}$ in $\bigo{\relsize{\states}^2}$.

Inserting the parameters in the time bounds of @lem-declining-update-complexity yields:
$$
\begin{array}{rlccccccc}
    & O( & o_{\gamemoveblank_\notionname{B}^üó≤} & \cdot & \relsize{G_\notionname{B}^üó≤}^{2N} & \cdot & (N^2 + \relsize{G_\notionname{B}^üó≤}^{N-1} \cdot N) & ) \\
  = & O( & (\relsize{\states} \cdot \relsize{\step{}}) & \cdot & (\relsize{\states}^2)^{2 \cdot 3} & \cdot & (3^2 + (\relsize{\states}^2)^{3-1} \cdot 3) & ) \\
  = & O( & (\relsize{\states} \cdot \relsize{\step{}}) & \cdot & \relsize{\states}^{12} & \cdot & \relsize{\states}^4 & )\\
  = & O( & \relsize{\states}^{17} \cdot \relsize{\step{}} & ).
\end{array}
$$
For space complexity, the approach arrives at $\bigo{ (\relsize{\states} \cdot \relsize{\step{}})^3}$.
The bound drops to $\bigo{ \relsize{\states} \cdot \relsize{\step{}}}$ in the flattened variant of @lem-declining-update-complexity-flattened. \qedhere
:::

## Discussion {#sec-spectrum-approach-discussion}

This chapter has shown how to solve the spectroscopy problem for the $\notions^{\literal{poly-strong}}$ spectrum in polynomial time, thereby deciding all its preorders and equivalences *at once*.

The core ingredient has been to characterize the spectrum's observation languages through an energy game (@nte-idea-energy-games, @thm-bisim-energy-game-characterization) derived from the bisimulation game.
The Pareto front view is slightly more general than other characteristic games, which @hs1996complexityEquivalences for instance use to establish polynomial upper bounds individually for simulation-like notions.

To compute the Pareto fronts, we use a fixed point algorithm (@nte-idea-deciding-energy-games, @alg-deciding-energy-games).
It can be thought of as a generalization of well-known ways to compute shortest distances in graphs:

:::{#rem-shortest-paths}
The energy game problem of this chapter can be seen as a *generalization of the shortest path problem* on directed graphs to account for two players as well as for much more general distances and cost functions.

To see how, consider energy games on $(\nats, \leq)$ where only deadlock positions belong to the defender
and where all updates constitute one-dimensional integer addition.
Then, $e \in \attackerwinsmin(g)$ iff $e$ is the length of a shortest path from $g$ to some defender position (where negative $(-z)$-updates stand for what is usually written as a positive edge weight $z$ for graphs).
In this instance, @alg-deciding-energy-games behaves like the well-known Bellman--Ford algorithm for shortest paths.
:::

\noindent
@alg-deciding-energy-games contains relevant generalizations and practical improvements compared to the one originally used in @bisping2023equivalenceEnergyGames.
Most importantly, the declining energy version loses a dimension of exponentiality.
For the polynomial equivalences we arrive at a reasonably polynomial complexity for the spectroscopy instantiation, including reasonable space complexity for a flattened energy lattice.

Knowing that parts of the strong spectrum are $\complexityname{PSPACE}$-hard, the algorithmic complexity indirectly proves that the bisimulation game cannot be used to characterize the whole spectrum.
(Unless the polynomial hierarchy miraculously collapses to $\complexityname{PSPACE} = \complexityname{P}$.)

Thus, ‚Äúwe're gonna need a bigger ~~boat~~‚Äù *game*, at least exponentially-sized, to also cover $\complexityname{PSPACE}$-hard notions.