
# Introduction: What's the Difference?

\pagenumbering{arabic}

Have you ever looked at two program models and wondered *how equivalent they are*
---or, conversely: how they can be distinguished?

I have run into this problem often, for instance when analyzing models of distributed algorithms or when devising examples for teaching.
But obviously, the question already occurs every time one rewrites a program part and hopes for it to still do its job.

::: {#fig-ltbts2-paper .column-margin}
![](img/ltbts2.png){.lightbox}

The linear-time–branching-time spectrum with silent moves as depicted in @glabbeek1993ltbt.
:::

The first time I had to formally face the question was when working as a student research assistant:
I was tasked with implementing a translation from the process algebra Timed CSP to Timed Automata.^[
    The aim was to bridge between the tools FDR2 and UPPAAL for Göthel's dissertation [-@goethel12mechanicalVerificationRTS].
    Previous work I was to base the translations on had serious flaws:
    One approach introduced spurious deadlocks to the model, the other was unable to handle nesting of choices and parallel composition.
    Clearly, we had to change the encoding!]
… How to tell whether the translation would properly honor the semantics of the two formalisms?
Did it translate CSP terms to automata *with the same meaning*?
Even the definition of the question is tricky, as there are different notions of what counts as “same meaning” in the semantics of programs.

I then took my very first look into the seminal paper on the landscape of process equivalences with internal behavior, the “Linear-time–branching-time spectrum II” by van Glabbeek [-@glabbeek1993ltbt].
Its central figure, reproduced in @fig-ltbts2-paper, mesmerized me.
But, how to use the spectrum to decide for a given pair of processes which of the many equivalences apply, is far from straightforward.
Over the years, I have learned that others too have run into this problem:
For instance, @nestmann1996decoding thinking about process algebra encodings and @bell2013certifiably verifying compiler optimizations.
The problem can be summarized as follows:

> How does one conveniently decide for a pair of systems which notions from a spectrum of behavioral equivalences equate the two?

\noindent
Above question will be the *research question of this thesis*.
We^[
    As you might have noticed, this text uses more personal pronouns than is common in much of computer science literature.
    Their meaning is the same as in a lecture:
    “I” = “The author”; “You” = “The audience”; “We” = “The asynchronous collective of author and readers.”
] want to enable future researchers to tap into the wisdom of the linear-time–branching-time spectrum and to easily determine what equivalences fit their models.

## Linear-Time–Branching-Time Spectroscopy

Van Glabbeek's papers on comparative concurrency semantics [-@glabbeek1990ltbt1;-@glabbeek1993ltbt] treat a zoo of distinct *qualitative questions* of the form “Are processes $p$ and $q$ equivalent with respect to notion $N$?”, where $N$ would for example be trace or bisimulation equivalence.
He unveils an underlying structure where the questions can easily be compared with respect to their distinctive power.
This is analogous to the *spectrum of light* where seemingly qualitative properties (“The light is blue / green / red.”) happen to be *quantitative* (“The distribution of wavelengths peaks at $460 / 550 / 630~\mathrm{nm}$.”).

For light (i.e. electromagnetic radiation), the mix of wavelengths can be determined through a process called *spectroscopy*.
So, we may ask:

> If there exists a “linear-time–branching time spectrum,” does this mean, there also is some kind of “linear-time–branching-time *spectroscopy*”?

{{<noindent>}} This thesis answers the question positively, which is the key step to tackle our research question.
One can compute what mix of (in-)distinguishabilities exists between a pair of processes,
and this places the two on the spectrum of equivalences.
We thus turn a set of qualitative equivalence problems into one quantitative problem of *how equivalent* two systems are.
As we will see, this amounts to an abstract form of subtraction between programs, determining what kinds of differences an outside examiner might observe.

## This Thesis

The algorithm at the core of this thesis describes how to *decide all behavioral equivalences at once* for varying spectra of equivalence using *games that can count* to *limit possible distinctions by attacker energy levels*.
More precisely, we make the following contributions:

- Chapter [-@sec-preliminaries] lays some foundations and makes precise *how bisimilarity games relate to grammars of distinguishing formulas* of Hennessy–Milner modal logic. 
- Chapter [-@sec-spectrum] shows *how to understand the strong linear-time--branching-time spectrum quantitatively* and formalizes the *spectroscopy problem*.
- Chapter [-@sec-approach] introduces the approach of *characterizing equivalence spectra through a class of energy games* and *how to decide such games*.
- TODO Chapter [-@sec-strong-spectrum] applies the approach to decide the whole strong spectrum through one *game for linear-time--branching-time spectroscopy*.
- TODO Chapter [-@sec-weak-spectrum] adapt the game for the *weak spectrum of equivalences accounting for silent-steps*.
- TODO Chapter [-@sec-implementations] showcases implementations to conveniently perform equivalence spectroscopies in web browsers and using GPU parallelization.

## Artifacts and Papers

This thesis ties together the work of several publications in a coherent presentation.
It is written to be understandable on its own.
For details, we usually refer to the original publications or to other artifacts for implementation and machine-checked proofs.

\medskip\noindent
**Publications.** The following four publications (with me as main author) fuel the following chapters:

- **“Deciding All Behavioral Equivalences at Once: A Game for Linear-Time–Branching-Time Spectroscopy”** [LMCS -@bjn2022decidingAllBehavioralEqs] introduces the *spectroscopy problem* and the *core idea* to decide the whole strong spectrum using games that search trees of possible distinguishing formulas.
  [Conference version: TACAS -@bisping2021ltbtsTacas]
- **“Process Equivalence Problems as Energy Games”** [CAV -@bisping2023equivalenceEnergyGames] makes a *big technical leap by using energy games*, removing the necessity for explicit formula construction.
- **“Characterizing Contrasimilarity through Games, Modal Logic, and Complexity”** [Information & Computation -@bm2024contrasimilarityInfComp] closes *gaps in the weak spectrum of equivalences* for games and their complexity and their link to modal logics.
[Isabelle/HOL theory: AFP -@bm2023contrasimilarityAFP; Workshop version: EXPRESS/SOS -@bm2021contrasimilarity]
- **“One Energy Game for the Spectrum Between Branching Bisimilarity and Weak Trace Semantics”** [EXPRESS/SOS -@bj2023silentStepSpectroscopyExpress] adapts the *spectroscopy approach for the weak spectrum*.

\noindent
**Prototype.**
The algorithms of this thesis have been validated through a *Scala prototype implementation*.
It can be tried out in the browser on <https://equiv.io>.
The source is available openly on <https://github.com/benkeks/equivalence-fiddle>.

\medskip\noindent
**Isabelle formalization.**
Instead of swamping the document with technical proofs, these are contained in machine-checkable Isabelle/HOL theories.

- **Equivalence spectrum formalization** contains proofs for the early chapters: <https://benkeks.github.io/ltbt-spectroscopy-isabelle/>.
- **Weak Equivalence Spectroscopy** formalizes the core results of Chapter [-@sec-weak-spectrum]: <https://equivio.github.io/silent-step-spectroscopy>.
  The theory has been developed together with TU Berlin students Lisa Annett Barthel, Leonard Moritz Hübner, Caroline Lemke, Karl Parvis Philipp Mattes, and Lenard Mollenkopf.

\noindent
**Student theses.**
Some parts of this thesis strongly rely on student work that I have supervised, in particular, on the following theses:

- @trzeciakiewicz2021ltbtBrowserGame: *Linear-Time--Branching-Time Spectroscopy as an Educational Web Browser Game* provides a computer game version of the spectroscopy procedure to be discussed in [Subsection -@sec-spectro-invaders].
- @ozegowski2023eqCAAL: *Integration eines generischen Äquivalenzprüfers in CAAL* extends the Concurrency Workbench Aalborg Edition with a spectroscopy feature, reported in [Subsection -@sec-spectroscopy-caal].
- @mattes2024expressivePowerHML: *Measuring Expressive Power of HML Formulas in Isabelle/HOL* proves the approach to modal characterization of @sec-ltbt-spectrum.
- @vogel2024energyGamesWebGPU: *Accelerating Process Equivalence Energy Games using WebGPU*, topic of @sec-gpu-equiv, allows massive parallelization on the GPU of key parts of our algorithm.
- @lemke2024multiweightedEnergyGames: *A Formal Proof of Decidability of Multi-Weighted Declining Energy Games* formalizes the fixedpoint algorithm of @sec-deciding-energy-games.

\noindent
**Other publications.**
Only indirectly connected to this dissertation project are my prior publications in leading me to topic and techniques:

- @bbjrsswpn2016mechanicaProofFLP[ITP]: “Mechanical Verification of a Constructive Proof for FLP.”
- @bn2019coupledsimTacas[TACAS]: “Computing Coupled Similarity.”
- @bnp2020coupledsim30[Acta Informatica]: “Coupled similarity: the first 32 years.”

\noindent
**Other Bachelor theses.**
During my dissertation project, I also supervised several other Bachelor theses, many of which played important roles in shaping the research.
Although they do not appear directly on the following pages, I want to acknowledge the students' vital contribution to the research.

- @peacock2020videoGameEquivalences: *Process Equivalences as a Video Game*
- @le2020coupledSimMcrl2: *Implementing Coupled Similarity as an Automated Checker for mCRL2*
- @wrusch2020gameEquivalences: *Ein Computerspiel zum Erlernen von Verhaltensäquivalenzen*
- @reichert2020visualizingCounterfactuals: *Visualising and Model Checking Counterfactuals*
- @wittig2020processJungle: *Charting the Jungle of Process Calculi Encodings*
- @bulik2021interProcComm: *Statically Analysing Inter-Process Communication in Elixir Programs*
- @montanari2021kontrasimSpiel: *Kontrasimulation als Spiel*
- @pohlmann2021reactiveBisimStrong: *Reducing Strong Reactive Bisimilarity to Strong Bisimilarity*
- @england2021hmlSynthesis: *HML Synthesis of Distinguished Processes*
- @duong2022toolLTBTS: *Developing an Educational Tool for Linear-Time–Branching-Time Spectroscopy*
- @alshukairi2022reaktiveBisimReduktion: *Automatisierte Reduktion von reaktiver zu starker Bisimilarität*
- @adler2022fehlertoleranteAlgorithmen: *Simulation fehlertoleranter Konsensalgorithmen in Hash.ai*
- @sandt2022gameReactiveBisim: *A Video Game about Reactive Bisimilarity*
- @loenne2023gameCounterfactuals: *An Educational Computer Game about Counterfactual Truth Conditions*
- @hauschild2023nonlinearCounterfactuals: *Nonlinear Counterfactuals in Isabelle/HOL*
- @stoecker2024HOcalculiEqs: *Higher-Order Diadic µ-Calculus---An Efficient Framework for Checking Process Equivalences?*
- @kurzan2024mcrl2Contrasim: *Implementierung eines Contrasimilarity-Checkers für mCRL2*