---
toc-title: "Chapter 7"
---

::: {.content-visible when-format="html"}
{{< include style/macros-html.md >}}
{{< include style/macros.md >}}
:::

# Spectroscopy for the Weak Spectrum {#sec-weak-spectroscopy}


::::{#related-7 .column-margin}
`\vspace{-2em}`{=latex}
{{< paragraph_heading "Related publications." >}}
This chapter is based on “One energy game for the spectrum between branching bisimilarity and weak trace semantics.” [@bj2024silentStepSpectroscopyExpress],
its extended draft version [@bj2025silentStepSpectroscopyJournal] and
its Isabelle/HOL formalization [@bbhlmm2025weakSpectroscopyIsabelle].
These publications make the contribution of characterizing the weak spectrum through a *weak spectroscopy* game.
The present thesis is more detailed with respect to complexity and to handling of stable failure traces and related notions.
::::

By applying the ideas we have explored so far, we can derive a game for the weak spectrum of @sec-weak-spectrum.
The key new idea here is how to encode *internal activity* “$\hmleps \dots$” *in game moves*:

::: {#idea-weakening-game .callout-idea .callout-tip}
#### Weakening the attacker

In the game, the places where $\hmleps$ appears in $\hmlsrbb$-formulas mean that the attacker must allow the maximization of defender's $Q$-options with respect to internal $\step{\tau}$-steps.
:::

The basic schematics of how the weak game solves the spectroscopy problem are exactly the same as for the strong spectroscopy in @fig-strong-spectroscopy-big-picture.

What is different this time around is that we have a full *Isabelle/HOL formalization* of game correctness in @sec-weak-spectro-game, and that we can apply the algorithm to real *case studies* that involve internal behavior in @sec-tackling-case-studies.
In @sec-weak-spectro-variants, we discuss how to use our method to check even *more weak equivalences*.  

::::{.content-visible when-format="html" .column-margin}
{{< contents related-7 >}}
::::

## The Weak Spectroscopy Game {#sec-weak-spectro-game}

On the next pages, we *upgrade the spectroscopy game* of @sec-strong-spectro-game to account for the weak spectrum of @sec-weak-spectrum.

### The Game

The weak spectroscopy game, in many respects, is just like the spectroscopy games we have already discussed:
The attacker, trying to distinguish states, has different paths that move closely along the productions of the $\hmlsrbb$-grammar (@def-hml-srbb).
But this time, there are *four* different kinds of non-empty conjunctions!
This makes the following schematic depiction in @fig-weak-spectroscopy-game-schematic already look quite entangled.

:::{#fig-weak-spectroscopy-game-schematic fig-env='figure*' fig-pos='t'}
```tikz
%%| image-class: lightbox
\begin{tikzpicture}[>->,shorten <=1pt,shorten >=0.5pt,auto,node distance=2cm, rel/.style={dashed,font=\it},
  posStyle/.style={draw, inner sep=1ex,minimum size=1cm,minimum width=2cm,anchor=center,draw,black,fill=gray!5}]
  \node[posStyle, initial, initial text={}]
    (Att){$\attackerpos{p,Q}$};
  \node[posStyle]
    (AttDelay) [right = 1.6cm of Att] {$\attackerpos[\varepsilon]{p,Q_\varepsilon}$};
  \node[ellipse, draw, inner sep=1ex, minimum size=1cm,minimum width=2cm,fill=gray!5]
    (Def) [below = 2.2cm of AttDelay] {$\defenderpos{p,Q}$};
  \node[ellipse, draw, inner sep=1ex, minimum size=1cm,minimum width=2cm,fill=gray!5]
    (DefStab) [above right = 1.2cm of Def] {$\defenderpos[s]{p,\set{ q\!\in\!Q_\varepsilon \mid q \nostep{\tau} }}$};
  \node[ellipse, draw, inner sep=1ex, minimum size=1cm,minimum width=2cm,fill=gray!5]
    (DefBranch) [right = 3.3cm of AttDelay] {$\defenderpos[\eta]{p,\alpha,p',Q_\varepsilon \setminus Q_\alpha, Q_\alpha}$};
  \node[posStyle]
    (AttBranch) [above=.9cm of DefBranch] {$\attackerpos[\eta]{p',Q'}$};
  \node[posStyle]
    (AttConj) [below right = 1.2cm and .2cm of DefStab] {$\attackerpos[\land]{p,q}$};
  \node[posStyle, dashed, dash pattern={on 1.055045263157895mm off 0.993586315789474mm}, dash phase=0.405943684210525mm]
    (AttSwap) [right = 2cm of AttConj] {$\attackerpos[\varepsilon]{q,\set{p' \mid p \stepweak p'}}$};
  \node[posStyle, dashed, dash pattern={on 1.051033684210526mm off 0.989808421052632mm}, dash phase=0.423411578947368mm]
    (AttContinue) [above = 1.5cm of AttSwap] {$\attackerpos[\varepsilon]{p,\set{q' \mid q \stepweak q'}}$};
  \node[posStyle, dashed, dash pattern={on 1.03mm off 0.97mm}, dash phase=0.515mm]
    (AttObs) [right = 2cm of AttBranch] {$\attackerpos{p^\prime,Q^\prime}$};
  % draw the bottom left corner nicely:
  \draw[-] (AttSwap.south west) ++(0.2pt,0.2pt) ++(0.07,0) -- ++(-0.07,0) -- ++(0,0.05);
  \draw[-] (AttContinue.south west) ++(0.2pt,0.2pt) ++(0.07,0) -- ++(-0.07,0) -- ++(0,0.05);
  \draw[-] (AttObs.south west) ++(0.2pt,0.2pt) ++(0.07,0) -- ++(-0.07,0) -- ++(0,0.05);

  \path
    (Att) edge
      node[label={-90:$\textcolor{gray}{\zerovec}$}] {$Q \stepweak Q_\varepsilon$} (AttDelay)
    (Att) edge[bend right=15]
      node[pos = .4, label={-150:$\textcolor{gray}{\zerovec}$}] {$Q = \varnothing$} (Def)
    (Att) edge[bend right=60]
      node[pos = .6, label={-130:$\textcolor{gray}{-\unitvec{5}}$}] {$Q \neq \varnothing$} (Def)
    (AttDelay) edge [out=155,in=115,looseness=4, pos=.6] node {$p \step{\tau} \ldots\; \textcolor{gray}{\zerovec}$} (AttDelay)
    (AttDelay.north) edge[bend left=28]
      node[pos=.3, align=center, label={[label distance=0.0cm]-30:$\textcolor{gray}{-\unitvec{1}}$}] {$p\step{a}p'$\\ $Q_\varepsilon \step{a} Q'$} (AttObs)
    (AttDelay) edge
      node[pos =.3, label={[label distance=0cm]-180:$\textcolor{gray}{\zerovec}$}] {$Q = Q_\varepsilon$} (Def)
    (AttDelay) edge
      node[pos=.7,label={[label distance=0.2cm]-175:$\textcolor{gray}{\zerovec}$}] {$p \nostep{\tau}$} (DefStab)
    (AttDelay) edge
      node[pos=.65,align=center,label={[label distance=0cm]-90:$\textcolor{gray}{\zerovec}$}] {$p \stepsoft{\alpha} p'$\\$Q_\alpha \subseteq Q_\varepsilon$} (DefBranch)
    (Def) edge[bend right=17]
      node[pos=.85, label={[label distance=0.1cm]-100:$\textcolor{gray}{-\unitvec{3}}$}] {$q \in Q$} (AttConj)
    (DefStab) edge[bend right=10]
      node[align=right, pos=.85, label={[label distance=0.3cm]-170:$\textcolor{gray}{-\unitvec{4}}$}] {\mbox{}\hspace*{-1.5em}$q \in Q_\varepsilon$\\[2pt]\mbox{}\hspace*{-1.5em}$q \nostep{\tau}$} (AttConj)
    (DefStab) edge[bend left=10]
      node[align=right, pos=.2, label={[label distance=0.3cm]165:$\textcolor{gray}{-\unitvec{4}-\unitvec{8}}$}] {\mbox{}\hspace*{-3em}$\varnothing = Q = \mbox{}$\\[2pt]\mbox{}\hspace*{-3em}$\set{ q\!\in\!Q_\varepsilon \mid q \nostep{\tau} }\;$} (Def)
    (AttConj) edge[bend left=10]
      node[label={[label distance=0.0cm]-75:$\textcolor{gray}{\updmin{1,6},0,0,0,0,0,0,0}$}] {} (AttContinue)
    (AttConj) edge[bend right=15]
      node[above, label={270:$\textcolor{gray}{\updmin{1,7},0,0,0,0,0,0,-1}$}] {$p \neq q$} (AttSwap)
    (DefBranch) edge
      node[pos=.42, label={[label distance=0.1cm]-0:$\textcolor{gray}{\updmin{1,6},-1,-1,0,0,0,0,0}$}] {$Q_\alpha\! \stepsoft{\alpha} Q'$} (AttBranch)
    (AttBranch) edge
      node[below]{$\textcolor{gray}{-\unitvec{1}}$} (AttObs)
    (DefBranch) edge[bend left=5]
      node[pos=.07, align=center, label={[label distance=0.05cm]-180:$\textcolor{gray}{-\unitvec{2}-\unitvec{3}}$}] {$q \in Q_\varepsilon \setminus Q_\alpha$} (AttConj);
\end{tikzpicture}
```

Schematic weak spectroscopy game of @def-weak-spectroscopy-game.
:::

Formally, the game rules are defined as follows:

::: {#def-weak-spectroscopy-game}
#### Weak spectroscopy game

For a system $\system=(\states,\actions,\step{})$,
the $8$-dimensional *weak spectroscopy game*
$\gamespectroscopyw^{\system}=(G,G_{\defender},\gamemoveblank,w)$
consists of

- *attacker (immediate) positions* $\attackerpos{p,Q} \in G_\attacker$,
- **new:** *attacker delayed positions* $\attackerpos[\varepsilon]{p,Q} \in G_\attacker$,
- *attacker conjunct positions* $\attackerpos[\land]{p,q} \in G_\attacker$,
- **new:** *attacker branching positions* $\attackerpos[\eta]{p,Q} \in G_\defender$,
- *defender conjunction positions* $\defenderpos{p,Q} \in G_\defender$,
- **new:** *defender stable conjunction positions* $\defenderpos[s]{p,Q} \in G_\defender$,
- **new:** *defender branching positions* $\defenderpos[\eta]{p,\alpha,p',Q,Q_\alpha} \in G_\defender$,

where $p, q \in \states$ and $Q, Q_\alpha \in \powerset{\states}$, and the following sixteen kinds of moves.{{<isb inductive Spectroscopy_Game LTS_Tau.spectroscopy_moves>}}

Moves to allow *internal behavior* “$\hmleps \dots$” between observations:
$$
\begin{array}{rrcll}
  \textit{delay}
  & \attackerpos{p,Q}
  & \gamemove{0,0,0,0,0,0,0,0}
  & \attackerpos[\varepsilon]{p,Q'}
  & \text{if $Q \stepweak Q'$,}
  \\
  \textit{procrastination}
  & \attackerpos[\varepsilon]{p,Q}
  & \gamemove{0,0,0,0,0,0,0,0}
  & \attackerpos[\varepsilon]{p',Q}
  & \text{if $p \step{\tau} p'$, $p \neq p'$,}
\end{array}
$$
moves to represent the *known $\hml$ constructs* “$\hmlobs{a}\dots$”, “$\hmlands \set{\dots}$”, and “$\hmlneg \dots$” in the now *two* contexts:
$$
\begin{array}{rrcll}
  \textit{observation}
  & \attackerpos[\varepsilon]{p,Q}
  & \gamemove{-1,0,0,0,0,0,0,0}
  & \attackerpos{p',Q'}
  & \text{if $p \step{a} p'$, $Q \step{a} Q'$, $a \neq \tau$,}
  \\
  \textit{finishing}
  & \attackerpos{p,\varnothing}
  & \gamemove{0,0,0,0,0,0,0,0}
  & \defenderpos{p,\varnothing},
  &
  \\
  \textit{immediate conj.}
  & \attackerpos{p,Q}
  & \gamemove{0,0,0,0,-1,0,0,0}
  & \defenderpos{p,Q}
  & \text{if $Q \neq \varnothing$,}
  \\
  \textit{late conj.}
  & \attackerpos[\varepsilon]{p,Q}
  & \gamemove{0,0,0,0,0,0,0,0}
  & \defenderpos{p,Q},
  &
  \\
  \textit{conj. answer}
  & \defenderpos{p,Q}
  & \gamemove{0,0,-1,0,0,0,0,0}
  & \attackerpos[\land]{p,q}
  & \text{if $q \in Q$,}
  \\
  \textit{positive conjunct}
  & \attackerpos[\land]{p,q}
  & \gamemove{\updmin{1,6},0,0,0,0,0,0,0}
  & \attackerpos[\varepsilon]{p,Q}
  & \text{if $\set{q} \stepweak Q$,}
  \\
  \textit{negative conjunct}
  & \attackerpos[\land]{p,q}
  & \gamemove{\updmin{1,7},0,0,0,0,0,0,-1}
  & \attackerpos[\varepsilon]{q,Q}
  & \text{if $\set{p} \stepweak Q$ and $p \neq q$,}
\end{array}
$$
moves to encode *stable conjunctions* “$\hmlands \set{\hmlneg\hmlobs{\tau}\hmltrue, \psi, \psi, ...}$”:
$$
\begin{array}{rrcll}
  \textit{stable conj.}\vphantom{I^{I^I}}
  & \attackerpos[\varepsilon]{p,Q}
  & \gamemove{0,0,0,0,0,0,0,0}
  & \defenderpos[s]{p,Q'}
  & \text{if } Q' = \set{ q \in Q \mid q \nostep{\tau}}, p \nostep{\tau},
  \\
  \textit{stable conj. answer}
  & \defenderpos[s]{p,Q}
  & \gamemove{0,0,0,-1,0,0,0,0}
  & \attackerpos[\land]{p,q}
  & \text{if $q \in Q$,}
  \\
  \textit{stable finishing}
  & \defenderpos[s]{p,\varnothing}
  & \gamemove{0,0,0,-1,0,0,0,-1}
  & \defenderpos{p,\varnothing},
\end{array}
$$
:::
and moves to encode *branching conjunctions* “$\hmlands \set{\hmlsoft{\alpha}\varphi, \psi, \psi, ...}$”:
$$
\begin{array}{rrcll}
  \textit{branching conj.}\vphantom{I^{I^I}}
  & \attackerpos[\varepsilon]{p,Q}
  & \gamemove{0,0,0,0,0,0,0,0}
  & \defenderpos[\eta]{p,\alpha,p',Q \setminus Q_\alpha,Q_\alpha}
  & \text{if $p \stepsoft{\alpha} p'$, $Q_\alpha \subseteq Q$,}
  \\
  \textit{branch. answer}
  & \defenderpos[\eta]{p,\alpha,p',Q,Q_\alpha}
  & \gamemove{0,-1,-1,0,0,0,0,0}
  & \attackerpos[\land]{p,q}
  & \text{if $q \in Q$,}
  \\
  \textit{branch. observation}
  & \defenderpos[\eta]{p,\alpha,p',Q,Q_\alpha}
  & \gamemove{\updmin{1,6},-1,-1,0,0,0,0,0}
  & \attackerpos[\eta]{p',Q'}
  & \text{with $Q_\alpha \stepsoft{\alpha} Q'$,}
  \\
  \textit{branch. accounting}
  & \attackerpos[\eta]{p,Q}
  & \gamemove{-1,0,0,0,0,0,0,0}
  & \attackerpos{p,Q}.
\end{array}
$$
Intuitively, the attacker is heavily weakened in the weak spectroscopy game due to the requirement to pass delay-moves in order to formulate observation attacks.
Following @idea-weakening-game, these moves grow the right-hand-sets, which increases defender options.
At the same time, there are several new tactical possibilities for the attacker that correspond to the special weak conjunctions, as can be seen in the following example.

::: {#exm-phil-weak-spectroscopy}
#### Failures of philosophy

For our standard philosopher system of @fig-ts-determinism, @exm-phil-weak-eqs has determined that $\literal P$ and $\literal Q$ are not weakly bisimilar, but weakly similar (and thus weakly trace-equivalent).

The stable failure $\hmleps\hmlands\set{\hmlneg\hmleps\hmlobs{\literal{a}}}$ discussed in @sec-abstraction-failures corresponds to the following game moves, which need budget $(1,0,0,1,0,0,1,1)$:
$$
\begin{array}{rlc}
  \attackerpos{\literal{P}, \set{\literal{Q}}} \;
  \gamemove{\;\zerovec\;} &
  \attackerpos[\epsilon]{\literal{P}, \set{\literal{Q}, \literal{q_{ab}}}}
  & \text{(delay)} \\
  \gamemove{\;\zerovec\;} &
  \attackerpos[\epsilon]{\literal{p_b}, \set{\literal{Q}, \literal{q_{ab}}}}
  & \text{(procrastination)} \\
  \gamemove{\;\zerovec\;} &
  \defenderpos{\literal{p_b}, \set{\literal{q_{ab}}}}
  & \text{(stable conj.)} \\
  \gamemove{-\unitvec{4}} & 
  \attackerpos[\land]{\literal{p_b}, \literal{q_{ab}}}
  & \text{(stable conj. answer)} \\
  \gamemove{\updmin{1,7},0,0,0,0,0,0,-1} &
  \attackerpos[\epsilon]{\literal{q_{ab}}, \set{\literal{p_b}}}
  & \text{(negative conjunct)} \\
  \gamemove{-\unitvec{1}} &
  \attackerpos{\literal{q_1}, \varnothing}
  & \text{($\literal{a}$-observation)} \\
  \gamemove{\;\zerovec\;} &
  \defenderpos{\literal{q_1}, \varnothing} \quad \ngamemoveblank
  & \text{(finishing)}
\end{array}
$$
A similar sequence of moves works for weak failures.
For weak simulation, we know that $\literal{P}$ is strongly simulated by $\literal{Q}$, which transfers to the weak game in the sense that we also cannot find a weak simulation distinction in this direction. The attacker must pass through a negative-conjunct move to exploit that $\literal{P}$ resolves the choice more quickly than $\literal{Q}$.

<!--
The weak failure $\hmleps\hmlands\set{\hmlneg\hmleps\hmlobs{\literal{a}}}$ discussed in @sec-abstraction-failures corresponds to the following game moves, needing budget $(1,0,1,0,0,0,1,1)$ for delay--procrastination--late conj.--conj.answer--negative conjunct:$$\attackerpos{\literal{P}, \set{\literal{Q}}} \gamemove{\;\zerovec\;}
  \attackerpos[\epsilon]{\literal{P}, \set{\literal{Q}, \literal{q_{ab}}}} \gamemove{\;\zerovec\;}
  \attackerpos[\epsilon]{\literal{p_1}, \set{\literal{Q}, \literal{q_{ab}}}} \gamemove{\;\zerovec\;}
  \defenderpos{\literal{p_1}, \set{\literal{Q}, \literal{q_{ab}}}} \gamemove{-\unitvec{1}}$$

  and by stable failure $\hmleps\hmlands\set{\hmlneg\hmlobs{\tau}, \hmlneg\hmlobs{\literal{a}}}
-->

For the other direction, @exm-phil-weak-eqs has established that weak simulation, $\literal{Q} \bpreord{WS} \literal{P}$, holds as well.
But how does this go together with @exm-spectroscopy-classic-ts mentioning that strong simulation is disproved by the $\hml$ formula $\hmlobs{\tau}\hmlands\set{\hmlobs{\literal{a}}, \hmlobs{\literal{b}}}$?
In the weak game, there are no strong $\tau$-observation moves.
The closest weak equivalent is to just use delay/procrastination, corresponding to the $\hmlsrbb$ formula $\mathhl{\hmleps}\hmlands\set{\hmleps\hmlobs{\literal{a}}, \hmleps\hmlobs{\literal{b}}}$.
But this fails to be a distinction in the weak game as the defender can just stay at $\literal P \in \set{\literal{P}, \literal{p_a}, \literal{p_b}}$.

However, other forms of abstracted simulation can be used to force the defender out of $\literal{P}$ without negations:

- *$\eta$-simulation* allows branching conjunction moves:
  $\attackerpos[\epsilon]{\literal{q_{ab}}, \set{\literal{P}, \literal{p_a}, \literal{p_b}}}
  \gamemove{\;\zerovec\;} \defenderpos[\eta]{\literal{q_{ab}}, \literal{a}, \literal{q_1}, \set{\literal{p_a}}, \set{\literal{P}, \literal{p_b}}}$.
  After this, $\literal{p_a}$ is discharged through a positive conjunct $\literal b$-observation, possible from $\literal{q_{ab}}$;
  and the $\set{\literal{P}, \literal{p_b}}$-option directly ends in $\gamemoveblank \attackerpos[\eta]{\literal{q_1}, \varnothing}\gamemoveblank\gamemoveblank\defenderpos{\literal{q_1}, \varnothing}\ngamemoveblank$, as neither $\literal{P}$ nor $\literal{p_b}$ allow immediate $\step{\literal{a}}$-steps.
  These moves cost $(1,1,1,0,0,1,0,0)$ and correspond to the distinguishing formula $\hmleps\hmlands\set{\hmlsoft{\literal a}, \hmleps\hmlobs{\literal b}}$.
- *Stable simulation* allows stable conjunction moves:
  $\attackerpos[\epsilon]{\literal{q_{ab}}, \set{\literal{P}, \literal{p_a}, \literal{p_b}}}
  \gamemove{\;\zerovec\;} \defenderpos[s]{\literal{q_{ab}}, \set{\cancel{\literal{P}}, \literal{p_a}, \literal{p_b}}}$.
  After this, $\literal{q_{ab}}$ can out-maneuver $\literal{p_a}$ through positive conjunct $\literal b$-observation,
  and  $\literal{p_b}$ through positive conjunct $\literal a$-observation.
  The moves need $(1,0,1,1,0,1,0,1)$ energy and match the distinguishing formula $\hmleps\hmlands\set{\hmlneg\hmlobs{\tau}, \hmleps\hmlobs{\literal a}, \hmleps\hmlobs{\literal{b}}}$.

In summary, the game moves show that $\literal{P}$ and $\literal{Q}$ are weakly similar, but no notion besides or above in the weak spectrum (@fig-weak-spectrum) can hold because weak failures, stable failures, $\eta$-simulation, and stable simulation can be disproven by attacker moves for at least one direction.
This reasoning, of course, depends on the weak spectroscopy game being correct …
:::

### Correctness {#sec-correctness-weak-spectroscopy}

Establishing correctness now proceeds mostly as we are used to from @sec-correctness-poly-spectroscopy and -@sec-correctness-strong-spectroscopy.
This subsection limits itself to citing the lemma heads and the inductive predicates used in the full proofs of @bj2025silentStepSpectroscopyJournal.

The following facts moreover have been fully formalized in Isabelle/HOL, which will be the topic of the following @sec-isabelle-formalization.

::: {#def-strategy-formulas-weak}
#### Strategy formulas for $\gamespectroscopyw$

The set of *strategy formulas* for a game position $g$ and a budget $e$, $\stratweak(g, e)$, in the context of a weak spectroscopy game $\gamespectroscopyw^{\system}$ is defined inductively by the rules in @fig-weak-spectroscopy-strategy-formulas.{{<isb inductive Strategy_Formulas weak_spectroscopy_game.strategy_formula>}}
:::

:::{#fig-weak-spectroscopy-strategy-formulas .column-body-outset fig-pos='p' fig-env="figure*"}
$$
\inferrule[delay]{
  \attackerpos{p,Q} \gamemove{u} \attackerpos[\varepsilon]{p,Q'} \quad
  e' = \energyupdate(u, e) \in \attackerwins(\attackerpos[\varepsilon]{p,Q'}) \quad
  \chi \in \stratweak(\attackerpos[\varepsilon]{p,Q'}, e')
} {
  \hmleps\chi \in \stratweak(\attackerpos{p,Q}, e)
}
$$
$$
\inferrule[procrastination]{
  \attackerpos[\varepsilon]{p,Q} \gamemove{u} \attackerpos[\varepsilon]{p',Q} \quad
  e' = \energyupdate(u, e) \in \attackerwins(\attackerpos[\varepsilon]{p',Q}) \quad
  \chi \in \stratweak(\attackerpos[\varepsilon]{p',Q}, e')
} {
  \chi \in \stratweak(\attackerpos[\varepsilon]{p,Q}, e)
}
$$
$$
\inferrule[observation]{
  \attackerpos[\varepsilon]{p,Q} \gamemove{u} \attackerpos{p',Q'} \quad
  e' = \energyupdate(u, e) \in \attackerwins(\attackerpos{p',Q'}) \\
  p \step{a} p' \quad
  Q \step{a} Q' \quad
  \varphi \in \stratweak(\attackerpos{p',Q'}, e')
} {
  \hmlobs{a}\varphi \in \stratweak(\attackerpos[\varepsilon]{p,Q}, e)
}
$$
$$
\inferrule[immediate\, conj.]{
  \attackerpos{p,Q} \gamemove{u} \defenderpos{p,Q} \quad
  e' = \energyupdate(u, e) \in \attackerwins(\defenderpos{p,Q}) \quad
  \varphi \in \stratweak(\defenderpos{p,Q}, e')
} {
  \varphi \in \stratweak(\attackerpos{p,Q}, e)
}
$$
$$
\inferrule[late\, conj.]{
  \attackerpos[\varepsilon]{p,Q} \gamemove{u} \defenderpos{p,Q} \quad
  e' = \energyupdate(u, e) \in \attackerwins(\defenderpos{p,Q}) \quad
  \chi \in \stratweak(\defenderpos{p,Q}, e')
} {
  \chi \in \stratweak(\attackerpos[\varepsilon]{p,Q}, e)
}
$$
$$
\inferrule[conj.\, answer]{
  \defenderpos{p,Q} \gamemove{u_q} \attackerpos[\land]{p,q} \\
  \forall q \in Q \ldotp \;
  e_q = \energyupdate(u_q, e) \in \attackerwins(\attackerpos[\land]{p,q}) \; \land \;
  \psi_q \in \stratweak(\attackerpos[\land]{p,q}, e_q)
} {
  \hmlands\set{ \psi_q \mid q \in Q} \in \stratweak(\defenderpos{p,Q}, e)
}
$$
$$
\inferrule[positive\, conjunct]{
  \attackerpos[\land]{p,q} \gamemove{u} \attackerpos[\varepsilon]{p,Q'} \quad
  e' = \energyupdate(u, e) \in \attackerwins(\attackerpos[\varepsilon]{p,Q'}) \quad
  \chi \in \stratweak(\attackerpos[\varepsilon]{p,Q'}, e')
} {
  \hmleps\chi \in \stratweak(\attackerpos[\land]{p,q}, e)
}
$$
$$
\inferrule[negative\, conjunct]{
  \attackerpos[\land]{p,q} \gamemove{u} \attackerpos[\varepsilon]{q,P'} \quad
  e' = \energyupdate(u, e) \in \attackerwins(\attackerpos[\varepsilon]{q,P'}) \quad
  \chi \in \stratweak(\attackerpos[\varepsilon]{q,P'}, e')
} {
  \hmlneg \hmleps\chi \in \stratweak(\attackerpos[\land]{p,q}, e)
}
$$
$$
\inferrule[stable\, conj.]{
  \attackerpos[\varepsilon]{p,Q} \gamemove{u} \defenderpos[s]{p,Q'} \quad
  e' = \energyupdate(u, e) \in \attackerwins(\defenderpos[s]{p,Q'}) \quad
  \chi \in \stratweak(\defenderpos[s]{p,Q'}, e')
} {
  \chi \in \stratweak(\attackerpos[\varepsilon]{p,Q}, e)
}
$$
$$
\inferrule[stable\, conj.\, answer]{
  \defenderpos[s]{p,Q} \gamemove{u_q} \attackerpos[\land]{p,q} \quad
  Q \neq \varnothing \\
  \forall q \in Q \ldotp \;
  e_q = \energyupdate(u_q, e) \in \attackerwins(\attackerpos[\land]{p,q}) \; \land \;
  \psi_q \in \stratweak(\attackerpos[\land]{p,q}, e_q)
} {
  \hmlands \left(\set{\hmlneg\hmlobs{\tau}\hmltrue } \cup \set{ \psi_q \mid q \in Q }\right) \in \stratweak(\defenderpos[s]{p,Q}, e)
}
$$
$$
\inferrule[stable\, finishing]{
  \defenderpos[s]{p,\varnothing} \gamemove{u} \defenderpos{p,\varnothing} \quad
  e' = \energyupdate(u, e) \in \attackerwins(\defenderpos{p,\varnothing})
} {
  \hmlands \set{\hmlneg\hmlobs{\tau}\hmltrue } \in \stratweak(\defenderpos[s]{p,Q}, e)
}
$$
$$
\inferrule[branching\, conj.]{
  \attackerpos[\varepsilon]{p,Q} \gamemove{u} \defenderpos[\eta]{p,\alpha,p',Q',Q_\alpha} \quad
  e' = \energyupdate(u, e) \in \attackerwins(\defenderpos[\eta]{p,\alpha,p',Q',Q_\alpha}) \\
  \chi \in \stratweak(\defenderpos[\eta]{p,\alpha,p',Q',Q_\alpha}, e')
} {
  \chi \in \stratweak(\attackerpos[\varepsilon]{p,Q}, e)
}
$$
$$
\inferrule[branch.\, answer]{
  g_\mathrm{d} = \defenderpos[\eta]{p,\alpha,p',Q,Q_\alpha} \gamemove{u_\alpha} \attackerpos[\eta]{p',Q'} \gamemove{u'_\alpha} \attackerpos{p',Q'} \\
  e_\alpha = \energyupdate(u'_\alpha, \energyupdate(u_\alpha, e)) \in \attackerwins(\attackerpos{p',Q'}) \quad
  \varphi_\alpha \in \stratweak(\attackerpos{p',Q'}, e_\alpha)\\
  \forall q \in Q \ldotp \;
  g_\mathrm{d} \gamemove{u_q} \attackerpos[\land]{p,q} \; \land \;
  e_q = \energyupdate(u_q, e) \in \attackerwins(\attackerpos[\land]{p,q}) \; \land \;
  \psi_q \in \stratweak(\attackerpos[\land]{p,q}, e_q)
} {
  \hmlands \left(\set{\hmlsoft{\alpha} \varphi_\alpha } \cup \set{ \psi_q \mid q \in Q }\right) \in \stratweak(\defenderpos[\eta]{p,\alpha,p',Q,Q_\alpha}, e)
}
$$

Strategy formulas for the weak spectroscopy.
:::

Attacker winning budgets can be translated into strategy formulas of matching price, as illustrated in @exm-phil-weak-spectroscopy.

::: {#lem-weak-spectroscopy-game-formulas}
#### Distinction formulatability

If $e \in \attackerwins^{\gamespectroscopyw}(\attackerpos{p,Q})$, then there is $\varphi \in \stratweak (\attackerpos{p,Q}, e)$ with $\expr[\literal{weak}](\varphi) \leq e$.{{<isb lemma Strategy_Formulas weak_spectroscopy_game.winning_budget_implies_strategy_formula>}}
:::
:::proof
#### Approach

By induction over game positions $g$ and energies $e$ according to the inductive characterization of attacker winning budgets @prp-winning-budget-rules and with respect to the following property:

1. If $e \in \attackerwins(\attackerpos{p,Q})$,
  then there is $\varphi \in \stratweak(\attackerpos{p,Q}, e)$ with $\expr[\literal{weak}](\varphi) \leq e$;
2. If $e \in \attackerwins(\attackerpos[\varepsilon]{p,Q})$,
  then there is $\chi \in \stratweak(\attackerpos[\varepsilon]{p,Q}, e)$ with $\expr[\varepsilon](\chi) \leq e$;
3. If $e \in \attackerwins(\attackerpos[\land]{p,q})$,
  then there is $\psi \in \stratweak(\attackerpos[\land]{p,q}, e)$ with $\expr[\land](\psi) \leq e$;
4. If $e \in \attackerwins(\defenderpos{p,Q})$,
  then there is $\hmlands \Psi \in \stratweak(\defenderpos{p,Q}, e)$ with $\expr[\varepsilon](\hmlands \Psi) \leq e$;
5. If $e \in \attackerwins(\defenderpos[s]{p,Q})$,
  then there is $\hmlands \left(\set{\hmlneg\hmlobs{\tau}\hmltrue } \cup \Psi\right) \in \stratweak(\defenderpos[s]{p,Q}, e)$ with $\expr[\varepsilon](\hmlands \left(\set{\hmlneg\hmlobs{\tau}\hmltrue } \cup \Psi\right)) \leq e$;
6. If $e \in \attackerwins(\defenderpos[\eta]{p,\alpha,p',Q \setminus Q_\alpha,Q_\alpha})$,
  then there is $\hmlands \left(\set{\hmlsoft{\alpha}\varphi' } \cup \Psi\right) \in \stratweak(\defenderpos[\eta]{p,\alpha,p',Q \setminus Q_\alpha,Q_\alpha}, e)$ with $\expr[\varepsilon](\hmlands \left(\set{\hmlsoft{\alpha}\varphi' } \cup \Psi\right)) \leq e$. \qedhere
:::

Weak strategy formulas distinguish the left state from the set of states on the right, where we lift @def-distinctions to sets as follows:

:::{#def-distinguishes-set}
#### Distinguishes from set

We say a formula $\varphi$ distinguishes a state $p \in \states$ from a set of states $Q \subseteq \states$ iff $p \in \semantics{\varphi}$ and $Q \cap \semantics{\varphi} = \varnothing$.
:::

::: {#lem-weak-spectroscopy-game-soundness}
#### Distinction soundness

If $\varphi \in \stratweak(\attackerpos{p,Q}, e)$,
then $\varphi$ distinguishes $p$ from $Q$.{{<isb lemma Strategy_Formulas weak_spectroscopy_game.strategy_formulas_distinguish>}}
:::
:::proof
#### Approach

By induction over the derivation of $~\cdots \in \stratweak(g, e)$ according to @def-strategy-formulas-weak on the following inductive property:

1. If $\varphi \in \stratweak(\attackerpos{p,Q}, e)$,
  then $\varphi$ distinguishes $p$ from $Q$;
2. If $\chi \in \stratweak(\attackerpos[\varepsilon]{p,Q}, e)$ and $Q \stepweak Q$,
  then $\hmleps\chi$ distinguishes $p$ from $Q$;
3. If $\psi \in \stratweak(\attackerpos[\land]{p,q}, e)$,
  then $\psi$ distinguishes $p$ from $\set{ q }$;
4. If $\hmlands \Psi \in \stratweak(\defenderpos{p,Q}, e)$,
  then $\hmlands \Psi$ distinguishes $p$ from $Q$;
5. If $\hmlands \left(\set{\hmlneg\hmlobs{\tau}\hmltrue } \cup \Psi\right) \in \stratweak(\defenderpos[s]{p,Q}, e)$
  and $p$ is stable,
  then the stable conjunction $\hmlands \left(\set{\hmlneg\hmlobs{\tau}\hmltrue } \cup \Psi\right)$ distinguishes $p$ from $Q$;
6. If $\hmlands \left(\set{\hmlsoft{\alpha}\varphi' } \cup \Psi\right) \in \stratweak(\defenderpos[\eta]{p,\alpha,p',Q \setminus Q_\alpha,Q_\alpha}, e)$,
    $p \stepsoft{\alpha} p'$ and $Q_\alpha \subseteq Q$,
  then the branching conjunction $\hmlands \left(\set{\hmlsoft{\alpha}\varphi' } \cup \Psi\right)$ distinguishes $p$ from $Q$. \qedhere
:::

Distinguishing formulas certify the existence of equally cheap ways for the attacker to win.

::: {#lem-weak-spectroscopy-game-completeness}
#### Distinction completeness

If $\varphi \in \hmlsrbb$ distinguishes $p$ from $Q$, then $\expr[\literal{weak}](\varphi) \in \attackerwins^{\gamespectroscopyw}(\attackerpos{p,Q})$.{{<isb lemma Distinction_Implies_Winning_Budgets weak_spectroscopy_game.distinction_implies_winning_budgets>}}
:::
:::proof
#### Approach

By mutual structural induction on $\varphi$, $\chi$, and $\psi$ with respect to the following claims:

1. If $\varphi \in \hmlsrbb$ distinguishes $p$ from $Q \neq \varnothing$,
  then $\expr[\literal{weak}](\varphi) \in \attackerwins(\attackerpos{p,Q})$;
2. If $\chi$ distinguishes $p$ from $Q \neq \varnothing$ and $Q$ is closed under $\stepweak$ (that is $Q \stepweak Q$),
  then $\expr[\varepsilon](\chi) \in \attackerwins(\attackerpos[\varepsilon]{p,Q})$;
3. If $\psi$ distinguishes $p$ from $q$,
  then $\expr[\land](\psi) \in \attackerwins(\attackerpos[\land]{p,q})$;
4. If $\hmlands \Psi$ distinguishes $p$ from $Q \neq \varnothing$,
  then $\expr[\varepsilon](\hmlands \Psi) \in \attackerwins(\defenderpos{p,Q})$;
5. If $\hmlands \set{ \hmlneg\hmlobs{\tau}\hmltrue } \cup \Psi$ distinguishes $p$ from $Q \neq \varnothing$
  and the processes in $Q$ are stable,
  then $\expr[\varepsilon](\hmlands \set{ \hmlneg\hmlobs{\tau}\hmltrue } \cup \Psi) \in \attackerwins(\defenderpos[s]{p,Q})$;
6. If $\hmlands \set{ \hmlsoft{\alpha}\varphi' } \cup \Psi$ distinguishes $p$ from $Q$,
  then, for any $p \stepsoft{\alpha} p' \in \semantics{\varphi'}$ and $Q_\alpha = Q \setminus \semantics{\hmlobs{\alpha}\varphi'}{}{}$, $\expr[\varepsilon](\hmlands \set{ \hmlsoft{\alpha}\varphi'\! } \cup \Psi) \in \attackerwins(\defenderpos[\eta]{p,\alpha,p'\!,Q \setminus Q_\alpha, Q_\alpha})$. \qedhere
:::

::: {#thm-weak-spectroscopy-game-characterization}
#### $\notions^\literal{weak}$-characterization

For all $N \in \notions^\literal{weak}$, $p \in \states$, $Q \in \powerset{\states}$, the following are equivalent:{{<isb theorem Silent_Step_Spectroscopy weak_spectroscopy_game.spectroscopy_game_correctness>}}

- There exists a formula $\varphi \in \hmlsrbb$ with price $\expr[\literal{weak}](\varphi) \leq N$ that distinguishes $p$ from $Q$.
- Attacker wins $\gamespectroscopyw^{\system}$ from $\attackerpos{p,Q}$ with $N$ (that is, $N \in \attackerwins^{\gamespectroscopyw^{\system}}(\attackerpos{p,Q})$).
:::

### Isabelle/HOL Formalization {#sec-isabelle-formalization}

@bbhlmm2025weakSpectroscopyIsabelle formalize the correctness result for the weak spectroscopy game in the interactive proof assistant Isabelle/HOL. 
The preceding definitions and facts have already linked to their respective Isabelle/HOL counterparts.
This subsection is devoted to providing some insights into the formalization.^[
  For questions on the Isabelle/Isar language, consult *The Isabelle/Isar reference manual* [@wenzel2025isabelleIsar].
]
We take a tour through roughly a hundred of the most interesting lines of the 6500 line theory development.

The weak spectroscopy game (@def-weak-spectroscopy-game) is modelled through a *parametric datatype* `('s, 'a) spectroscopy_position` for its positions and a *partial function* `spectroscopy_moves` to determine the moves connecting them.^[
  To be precise: “Partial function” here means that it returns `option`-values, which might either be `Some x` with an output or `None` otherwise.
  All functions in higher-order logic are *total*.
]
The parameter types `'s` and `'a` capture the states $\states$ and actions $\actions$ of the transition system on which we operate.{{<isb datatype Spectroscopy_Game spectroscopy_position>}}

```isabelle
datatype ('s, 'a) spectroscopy_position =
  Attacker_Immediate
    (attacker_state: ‹'s›) (defender_states: ‹'s set›)
| Attacker_Delayed
    (attacker_state: ‹'s›) (defender_states: ‹'s set›)
  [...]
| Defender_Branch
    (attacker_state: ‹'s›) (attack_action: ‹'a›)
    (attacker_state_succ: ‹'s›)
    (defender_states: ‹'s set›)
    (defender_branch_states: ‹'s set›)

fun spectroscopy_moves (in LTS_Tau) ::
  ‹('s, 'a) spectroscopy_position ⇒ ('s, 'a) spectroscopy_position
    ⇒ energy update option›
where
  delay: ‹spectroscopy_moves
    (Attacker_Immediate p Q) (Attacker_Delayed p' Q')
  = (if p' = p ∧ Q ↠S Q' then id_up else None)›
| [...]
```

The game itself is then built as a combination of the *locale* for transition systems with internal actions `LTS_Tau` (with a transition relation `step`)
and an `energy_game` locale.
The latter is instantiated with the moves, a predicate `spectroscopy_defender` singling out defender positions, and the $\leq$-relation on 8-dimensional energies.{{<isb locale Spectroscopy_Game weak_spectroscopy_game>}}

```isabelle
locale weak_spectroscopy_game =
  LTS_Tau step τ
  + energy_game ‹spectroscopy_moves› ‹spectroscopy_defender› ‹(≤)›
  for step :: ‹'s ⇒ 'a ⇒ 's ⇒ bool› (‹_ ↦_ _› [70, 70, 70] 80)
    and  τ :: 'a
```

Within the locale, we can establish our correctness results.

The strategy formulas $\stratweak$ appear as three mutually *inductive predicates*,
because the grammar of $\hmlsrbb$ (@def-hml-srbb) is implemented as three mutually recursive data types (one per non-terminal).{{<isb inductive Strategy_Formulas weak_spectroscopy_game.strategy_formula>}}

```isabelle
inductive
  strategy_formula :: ‹('s, 'a) spectroscopy_position
    ⇒ energy ⇒ ('a, 's) hml_srbb ⇒ bool›
and
  strategy_formula_inner :: ‹('s, 'a) spectroscopy_position
    ⇒ energy ⇒ ('a, 's) hml_srbb_inner ⇒ bool›
and
  strategy_formula_conjunct :: ‹('s, 'a) spectroscopy_position
    ⇒ energy ⇒ ('a, 's) hml_srbb_conjunct ⇒ bool›
where
  delay: ‹strategy_formula (Attacker_Immediate p Q) e (Internal χ)›
  if ‹∃Q'. spectroscopy_moves
        (Attacker_Immediate p Q) (Attacker_Delayed p Q') = id_up
      ∧ attacker_wins e (Attacker_Delayed p Q')
      ∧ strategy_formula_inner (Attacker_Delayed p Q') e χ›
| [...]
```

We then reproduce the induction of @lem-weak-spectroscopy-game-formulas on attacker winning budgets in the following lemma.
For this, the theory uses the inductive characterization of $\attackerwins$ in @prp-winning-budget-rules as definition for `attacker_wins`.{{<isb lemma Strategy_Formulas weak_spectroscopy_game.winning_budget_implies_strategy_formula>}}

```isabelle
lemma winning_budget_implies_strategy_formula:
  assumes ‹attacker_wins e g›
  shows
    ‹case g of
        Attacker_Immediate p Q ⇒
        ∃φ. strategy_formula g e φ ∧ expressiveness_price φ ≤ e
      | Attacker_Delayed p Q ⇒
        ∃χ. strategy_formula_inner g e χ ∧ expr_pr_inner χ ≤ e
      | Attacker_Conjunct p q ⇒
        ∃ψ. strategy_formula_conjunct g e ψ
          ∧ expr_pr_conjunct ψ ≤ e
      | Defender_Conj p Q ⇒
        ∃χ. strategy_formula_inner g e χ ∧ expr_pr_inner χ ≤ e
      | Defender_Stable_Conj p Q ⇒
        ∃χ. strategy_formula_inner g e χ  ∧ expr_pr_inner χ ≤ e
      | Defender_Branch p α p' Q Qa ⇒
        ∃χ. strategy_formula_inner g e χ ∧ expr_pr_inner χ ≤ e
      | Attacker_Branch p Q ⇒
        ∃φ. strategy_formula
              (Attacker_Immediate p Q) (e - E 1 0 0 0 0 0 0 0) φ
          ∧ expressiveness_price φ ≤ e - E 1 0 0 0 0 0 0 0›
  using assms
proof (induction rule: attacker_wins.induct)
  [...]
```

There are superficial differences due to the different medium.
For instance, note that the inductive predicate in the Isabelle theory has a seventh case for `Attacker_Branch` / $\attackerpos[\eta]{\dots}$ that does not exist in the “paper version” of @lem-weak-spectroscopy-game-formulas.
This is more natural for the “`case ... of ...`” formulation in the formalization, and addresses a technicality that @bj2025silentStepSpectroscopyJournal handle in the proof body.

The (mutual) induction on the formula structure to establish the distinctiveness of $\stratweak$-formulas of @lem-weak-spectroscopy-game-soundness begins:{{<isb lemma Strategy_Formulas weak_spectroscopy_game.strategy_formulas_distinguish>}}

```isabelle
lemma strategy_formulas_distinguish:
  ‹(strategy_formula g e φ ⟶
      (case g of
        Attacker_Immediate p Q ⇒
          distinguishes_from φ p Q
      | Defender_Conj p Q ⇒
          distinguishes_from φ p Q
      | _ ⇒ True))
    ∧
    (strategy_formula_inner g e χ ⟶
      (case g of
        Attacker_Delayed p Q ⇒
          (Q ↠S Q) ⟶ distinguishes_from (Internal χ) p Q
      | Defender_Conj p Q ⇒
          hml_srbb_inner.distinguishes_from χ p Q
      | Defender_Stable_Conj p Q ⇒
          (∀q. ¬ p ↦ τ q)
          ⟶ hml_srbb_inner.distinguishes_from χ p Q
      | Defender_Branch p α p' Q Qa ⇒
          (p ↦a α p')
          ⟶ hml_srbb_inner.distinguishes_from χ p (Q∪Qa)
      | _ ⇒ True))
    ∧
    (strategy_formula_conjunct g e ψ ⟶
      (case g of
        Attacker_Conjunct p q ⇒
          hml_srbb_conj.distinguishes ψ p q
      | _ ⇒ True))›
proof (induction rule:
  strategy_formula_strategy_formula_inner_[...].induct)
  [...]
```

For the other direction, the following expresses distinction completeness (@lem-weak-spectroscopy-game-completeness) that attacks exist for formulas.{{<isb lemma Distinction_Implies_Winning_Budgets weak_spectroscopy_game.distinction_implies_winning_budgets>}}

```isabelle
lemma distinction_implies_winning_budgets:
  assumes ‹distinguishes_from φ p Q›
  shows ‹attacker_wins (expressiveness_price φ)
                       (Attacker_Immediate p Q)›
```

The main theorem @thm-weak-spectroscopy-game-characterization combines the previous facts and the upward-closedness of attacker winning budgets `win_a_upwards_closure`.
This is quite straightforward.
The following listing reproduces it in full to convey an idea of what Isar proofs look like.{{<isb theorem Silent_Step_Spectroscopy weak_spectroscopy_game.spectroscopy_game_correctness>}}

```isabelle
theorem spectroscopy_game_correctness:
  shows
    ‹(∃φ. distinguishes_from φ p Q ∧ expressiveness_price φ ≤ e)
    ⟷ attacker_wins e (Attacker_Immediate p Q)›
proof
  assume
    ‹∃φ. distinguishes_from φ p Q ∧ expressiveness_price φ ≤ e›
  then obtain φ where φ_spec:
    ‹distinguishes_from φ p Q› ‹expressiveness_price φ ≤ e›
    by blast
  from distinction_implies_winning_budgets φ_spec(1) have
    ‹attacker_wins
      (expressiveness_price φ) (Attacker_Immediate p Q)› .
  thus ‹attacker_wins e (Attacker_Immediate p Q)›
    using win_a_upwards_closure φ_spec(2) by simp
next
  assume ‹attacker_wins e (Attacker_Immediate p Q)›
  with winning_budget_implies_strategy_formula have
    ‹∃φ. strategy_formula (Attacker_Immediate p Q) e φ
       ∧ expressiveness_price φ ≤ e›
    by force
  hence
    ‹∃φ. strategy_formula (Attacker_Immediate p Q) e φ
       ∧ expressiveness_price φ ≤ e›
    by blast
  thus ‹∃φ. distinguishes_from φ p Q ∧ expressiveness_price φ ≤ e›
    using strategy_formulas_distinguish by fastforce
qed
```

In @sec-preliminaries, we started our journey of connecting attacker strategies and distinguishing formulas in @thm-game-formulas.
In retrospect, it is just a corollary of this formalized theorem.

### Complexity

The complexity of spectroscopy using the weak game is quite comparable to the strong spectroscopy (@thm-strong-spectroscopy-complexity).

::: {#thm-weak-spectroscopy-complexity}
#### Weak spectroscopy complexity

Given a transition system $\system$,
the spectroscopy problem for the $\notions^\literal{weak}$-spectrum can be solved by the game approach in exponential time and space with respect to the state space size $\relsize{\states}$.
:::
:::proof
According to @thm-weak-spectroscopy-game-characterization, we can solve the spectroscopy problem for the $\notions^\literal{weak}$-spectrum by deciding the winning budgets of the weak spectroscopy game $\gamespectroscopyw^{\system}$ on $\system=(\states,\actions,\step{})$.
We instantiate the winning budget complexity of @lem-declining-update-complexity for the case $d=8$ with the size of $\gamespectroscopyw$ according to @def-weak-spectroscopy-game.

The number of attacker positions $\attackerpos{\dots}$ (and their delayed $\attackerpos[\varepsilon]{\dots}$ and branching $\attackerpos[\eta]{\dots}$ variants) is bounded by $\bigo{\relsize{\states} \cdot 2^{\relsize{\states}}}$.
The number of conjunction moves and defender conjunction positions $\defenderpos{\dots}$ is bounded by $\relsize{\states} \cdot 2^{\relsize{\states}}$, also for the stable variant $\defenderpos[s]{\dots}$.

However, for the branching conjunction moves, we find a bound of $\bigo{\relsize{\step{}} \cdot 2^{\relsize{\states}}}$ per attacker delayed position (which is a slight over-approximation).
Collectively, these moves reach $\bigo{\relsize{\step{}} \cdot 3^{\relsize{\states}}}$ defender branching positions $\defenderpos[\eta]{p, \alpha, p', Q \setminus Q_\alpha, Q_\alpha}$, due the three-coloring of states into $Q \setminus Q_\alpha$, $Q_\alpha$ and $\states \setminus Q$.

The maximal out-degree for attacker delayed positions of $\bigo{\relsize{\step{}} \cdot 2^{\relsize{\states}}}$ dominates that of other positions, in particular, of defender conjunction, stable conjunction, and branching positions with $\bigo{\relsize{\states}}$ outgoing options.

This amounts to $o_{\gamemoveblank_\nabla}$ in $\bigo{\relsize{\step{}} \cdot 2^{\relsize{\states}}}$ and to $\relsize{G_{\nabla}}$ in $\bigo{\relsize{\step{}} \cdot 3^{\relsize{\states}}}$.
Inserting the parameters in the time bounds of @lem-declining-update-complexity yields:
$$
\begin{array}{rlccccccc}
    & O( & o_{\gamemoveblank} & \cdot & \relsize{G}^{2 \cdot d} & \cdot & (\smash{d}^2 + \relsize{G}^{d-1} \cdot d) & ) \\
  = & O( & (\relsize{\step{}} \cdot 2^{\relsize{\states}}) & \cdot & (\relsize{\step{}} \cdot 3^{\relsize{\states}})^{2 \cdot 8} & \cdot & (8^2 + (\relsize{\step{}} \cdot 3^{\relsize{\states}})^{8-1} \cdot 8) & ) \\
  = & O( & \relsize{\step{}} \cdot 2^{\relsize{\states}} & \cdot & \relsize{\step{}}^{16} \cdot 3^{16\relsize{\states}} & \cdot & \relsize{\step{}}^7 \cdot 3^{7\relsize{\states}} & ) \\
  ⊆ & O( & \relsize{\step{}}^{24} & \cdot & 3^{24\relsize{\states}} & ).
\end{array}
$$
For space complexity, we arrive at $\bigo{ \relsize{\step{}}^8 \cdot 3^{8\relsize{\states}}}$.
:::

The exponential out-degree is due to branching conjunction moves.
That these would need exponentially many outgoing moves seems off:
These moves are for $\eta$- and branching bisimilarity,
which are known to be at the less expensive end of equivalence problems in the spectrum [sub-cubic by @gjkw2017branching].
Frutos Escrig et al.'s -@ekw2017gamesBisimAbstraction branching bisimulation game is polynomially-sized.
Thus, a derived reachability game of the weak spectroscopy game for branching bisimilarity in the spirit of @sec-deriving-eq-games should, too, be polynomial in size if we apply clever optimizations.
@sec-optimized-branching-conj will later show how to simplify the spectroscopy game to achieve this reduction of size around branching conjunctions.

## Tackling Our Case Studies {#sec-tackling-case-studies}

We now return to our examples from @sec-case-studies-other-eqs, and see how the spectroscopy approach can handle the two, and thus support research in concurrency theory.
For this project, we will use the {{<equivio>}} CCS dialect.

### Parallelizing Compilers {#sec-solution-parallelizing-compilation}

In @exm-parallelizing-compilation, we have discussed the example of *parallelizing compilation*.
@bell2013certifiably reports on the search for a fitting notion of equivalence to prove the equivalence of sequential and parallelized program, $\literal{P_{Seq}}$ and $\literal{P_{Para}}$.

We model the computation of $\literal{A} / \literal{B}$ as a parallel process `Compute` that outputs one of the two options (`computeA`/`computeB`).
In `P_Seq`, the computation has to happen before the visible output action `printOutput!` starts, followed by the printing of the computed value, `printA!` or `printB!`.
In `P_Para`, the `printOutput!` happens in parallel, and the two processes synchronize on `join` before continuing to print the computed value.
For both processes, the synchronizing actions, that is, `computeA`, `computeB`, and `join`, are restricted to internal use.

```ccs
Compute = computeA!Compute + computeB!Compute

P_Seq = (
    Compute 
  | computeA.printOutput!printA!
    + computeB.printOutput!printB!
) \ {computeA, computeB}

P_Para = (
    Compute
  | printOutput!join!
  | computeA.join.printA!
    + computeB.join.printB!
) \ {computeA, computeB, join}

@compareSilent P_Para, P_Seq

@snip "---- layout ----"

P_Seq(main, x=80, y=69)
P_Para(main, x=587, y=55)
"(Compute | 0 | 0) \ {computeA,computeB,join}"(x=505, y=382)
"(Compute | 0 | printB!0) \ {computeA,computeB,join}"(x=588, y=323)
"(Compute | 0) \ {computeA,computeB}"(x=179, y=366)
"(Compute | printA!0) \ {computeA,computeB}"(x=128, y=297)
"(Compute | printB!0) \ {computeA,computeB}"(x=259, y=283)
```

The statement `@compareSilent P_Para, P_Seq` invokes the *weak spectroscopy* on the pair of processes.

As a cheapest distinguishing formula of `P_Para` from `P_Seq`, the spectroscopy reports `⟨ϵ⟩⟨printOutput!⟩⟨ϵ⟩⋀{⟨ϵ⟩⟨printA!⟩⊤,⟨ϵ⟩⟨printB!⟩⊤}`.
This formula disproves weak simulation plus weak readiness and everything above in the weak spectrum.
The minimality means that all other notions must hold.
These are the equivalences of contrasimilarity and stable bisimilarity, and below.

This nicely shows that our spectroscopy algorithm allows to survey the whole spectrum of possible equivalences between such small processes in milliseconds.
Such a mechanized survey would certainly have facilitated the research behind @bell2013certifiably. 

### $\tau$-Abstraction and Failures

@sec-abstraction-failures has introduced a transition system with two states $\literal{P}_e$ and $\literal{P}_\ell$ that perform a nondeterministic $\literal{op}$-step.
Only $\literal{P}_\ell$ can correct the choice while $\literal{idle}$-ing.
Though both processes are weak-failure-equivalent, their variants $\literal{P}^\tau_e$ and $\literal{P}^\tau_\ell$ where $\literal{idle}$-steps are relabelled to $\tau$-steps are not.

To reconstruct this result on {{<equivio>}}, we first have to translate the processes of @fig-idle-process-abstraction to CCS.
We express $\literal{P}_e$ and $\literal{P}_\ell$ as `P_e` and `P_t` through mutual recursion in the following model:

```ccs
Ae = idle.Ae + a
Be = idle.Be + b
Al = idle.Bl + idle.Al + a
Bl = idle.Al + idle.Bl + b

P_e = op.Ae + op.Be
P_l = op.Al + op.Bl

@snip "---- abstracted processes ----"

Idle = idle!Idle
P_te = (P_e | Idle) \ {idle}
P_tl = (P_l | Idle) \ {idle}

@snip "---- checks and comparison ----"

@check weak-failure, P_e, P_l
@check weak-failure, P_te, P_tl

@compareSilent P_e, P_l
@compareSilent P_te, P_tl

@snip "---- layout ----"

P_e(x=200, y=10, main)
P_l(x=500, y=10, main)
P_te(x=200, y=450, main)
P_tl(x=500, y=450, main)
"0"(x=365, y=304)
"(0 | Idle) \ {idle}"(x=350, y=780)
```

To implement the *hiding* of `idle` in CCS, we use a parallel process that provides unlimited `idle!`-actions to synchronize instead of the environment.
Hence, $\literal{P}^\tau_e$ and $\literal{P}^\tau_\ell$ are expressed as `P_te` and `P_tl`:

```ccs
@nolink
Idle = idle!Idle
P_te = (P_e | Idle) \ {idle}
P_tl = (P_l | Idle) \ {idle}
```

We can now use the derived equivalence checkers (along the lines of @sec-deciding-individual-eqs) to establish that `P_e` and `P_l` are weak-failure-equivalent, but `P_te` and `P_tl` are not:

```ccs
@nolink
@check weak-failure, P_e, P_l
  > "States are equivalent."
@check weak-failure, P_te, P_tl
  > "States are inversely preordered (only from right to left)."
```

How does this influence research in concurrency theory?
@gfm2020congruenceOperator[Corollary 9] claim that weak failure equivalence would be a congruence for the hiding operator.
In light of our finding, this cannot be right.^[
  The bug in the otherwise intriguing paper [@gfm2020congruenceOperator] is that the modal logic of weak failures is not closed under adding of weak observation sequences at $\hmleps$-operators:
  $\hmleps\hmlobs{\literal{a}}\hmleps\hmlands\set{\hmlneg\hmleps\hmlobs{\literal{a}}} \in \observations{WF}$, but
  $\hmleps\hmlobs{\literal{a}}\hmleps\hmlands\set{\hmlneg\mathhl{\hmleps\hmlobs{\literal{a}}}\hmleps\hmlobs{\literal{a}}}$ is too strong for weak failure equivalence.
  Their requirement (ABS) together with the definition of $\mathcal{T}^{-1}_H$ would prescribe that the greatest logic to characterize weak failures contains both, for hiding to be a congruence.
  Their Corollary 9 assumes in error that this kind of pumping were sound for weak failures.
]

We can go even further and decide *all* weak equivalences of our spectrum:

```ccs
@nolink
@compareSilent P_e, P_l
  > "Equated by:
     weak-readiness
     stable-readiness"
@compareSilent P_te, P_tl
  > "Equated by:
     stable-bisimulation"
```

This provides us with the general answer that notions can only be congruences for hiding if they are not below weak/stable readiness, or if they moreover fall into the hierarchy below stable bisimulation.

## Variants {#sec-weak-spectro-variants}

At this point in the thesis, it hopefully has become quite apparent how our approach can be varied with respect to game moves and HML hierarchies in order to add more equivalences or to cut resolution.

This section mainly presents two tricks that are used in the implementation of {{<equivio>}}:
@sec-optimized-branching-conj shows how to get rid of the subset construction in branching conjunctions.
@sec-covering-revivals presents a modification to add stable revivals, stable failure traces and stable ready traces as notions.
In @sec-extending-to-other-eqs, we close with some hints how even more nuances in weak equivalences could be covered.

### Optimizing Branching Conjunctions {#sec-optimized-branching-conj}

@bj2025silentStepSpectroscopyJournal show how to reduce the out-degree $o_{\gamemoveblank}$ of the weak spectroscopy game to be linear.
For this, we reformulate the branching conjunction part of the game to be closer to the operational @def-branching-bisim of branching bisimilarity.
We can still solve the main spectroscopy problem, but lose some resolution about the number of nested conjunctions.

If we read @def-branching-bisim directly as a game, it differs from the branching conjunction moves in
@def-weak-spectroscopy-game, because the latter require the attacker to name as $Q_\alpha$ ex-ante which $q'$ to challenge directly and which ones only after the $\alpha$ step, and to have one continuation for the whole $Q_\alpha$ group.
The *simplified* weak spectroscopy game $\gamespectroscopywsimple$ in @fig-weak-spec-game-simplified rephrases this part to match the operational characterization.
(This might not be “simpler” conceptionally, but it will be for the algorithm.)

:::{#fig-weak-spec-game-simplified fig-env='figure*' fig-pos='t'}

```tikz
%%| image-class: lightbox
\definecolor{etaColor}{cmyk}{0.8, 0, 0, 0.3}
\begin{adjustbox}{max width=\linewidth, center}
  \begin{tikzpicture}[>->,shorten <=1pt,shorten >=0.5pt,auto,node distance=2cm, rel/.style={dashed,font=\it},
    posStyle/.style={draw, inner sep=1ex,minimum size=1cm,minimum width=2cm,anchor=center,black,fill=gray!5},
    specialStyle/.style={draw=etaColor, fill=etaColor!3},
    specialEdgeStyle/.style={draw=etaColor, text=etaColor}]
      \node[posStyle, initial, initial text={}]
        (Att){$\attackerpos{p,Q}$};
      \node[posStyle]
        (AttDelay) [right = 1.6cm of Att] {$\attackerpos[\varepsilon]{p,Q_\varepsilon}$};
      \node[ellipse, draw, inner sep=1ex, minimum size=1cm,minimum width=2cm,fill=gray!5]
        (Def) [below = 3.2cm of AttDelay] {$\defenderpos{p,Q}$};
      \node[ellipse, draw, inner sep=1ex, minimum size=1cm,minimum width=2cm,fill=gray!5]
        (DefStab) [above right = 1.2cm of Def] {$\defenderpos[s]{p,\{ q\!\in\!Q_\varepsilon \mid q \nostep{\tau} \}}$};
      \node[ellipse, draw, inner sep=1ex, minimum size=1cm,minimum width=2cm,specialStyle]
        (DefBranch) [right = 1.5cm of AttDelay,yshift=-.7cm] {$\defenderpos[\eta]{p,\alpha,p',Q_\varepsilon}$};
      \node[posStyle, specialStyle]
        (AttBranchClause) [right=1.5cm of DefBranch] {$\attackerpos[\eta]{p,\alpha,p',q}$};
      \node[posStyle, specialStyle]
        (AttBranch) [above=1.2cm of AttBranchClause] {$\attackerpos[\eta]{p',Q'_\alpha}$};
      \node[posStyle]
        (AttConj) [below right = 1.2cm and .2cm of DefStab] {$\attackerpos[\land]{p,q}$};
      \node[posStyle, dashed, dash pattern={on 1.055045263157895mm off 0.993586315789474mm}, dash phase=0.405943684210525mm]
        (AttSwap) [right = 2cm of AttConj] {$\attackerpos[\varepsilon]{q,\{p' \mid p \stepweak p'\}}$};
      \node[posStyle, dashed, dash pattern={on 1.051033684210526mm off 0.989808421052632mm}, dash phase=0.423411578947368mm]
        (AttContinue) [above = 1.5cm of AttSwap] {$\attackerpos[\varepsilon]{p,\{q' \mid q \stepweak q'\}}$};
      \node[posStyle, dashed, dash pattern={on 1.03mm off 0.97mm}, dash phase=0.515mm]
        (AttObs) [above right = 1.5cm of AttBranch] {$\attackerpos{p^\prime,Q^\prime}$};
      \node[posStyle, dashed, ellipse, dash pattern={on 1.03mm off 0.97mm}, dash phase=0.515mm]
          (DefContinue) [below right = -.5cm and 1.5cm of AttBranch] {$\defenderpos{p',Q'_\alpha}$};
      % draw the bottom left corner nicely:
      \draw[-] (AttSwap.south west) ++(0.2pt,0.2pt) ++(0.07,0) -- ++(-0.07,0) -- ++(0,0.05);
      \draw[-] (AttContinue.south west) ++(0.2pt,0.2pt) ++(0.07,0) -- ++(-0.07,0) -- ++(0,0.05);
      \draw[-] (AttObs.south west) ++(0.2pt,0.2pt) ++(0.07,0) -- ++(-0.07,0) -- ++(0,0.05);

      \path
        (Att) edge
          node[label={-90:$\textcolor{gray}{\zerovec}$}] {$Q \stepweak Q_\varepsilon$} (AttDelay)
        (Att) edge[bend right=15]
          node[pos = .4, label={-170:$\textcolor{gray}{\zerovec}$}] {$Q = \varnothing$} (Def)
        (Att) edge[bend right=60]
          node[pos = .6, label={-155:$\textcolor{gray}{-\unitvec{5}}$}] {$Q \neq \varnothing$} (Def)
        (AttDelay) edge [out=155,in=115,looseness=4, pos=.6] node {$p \step{\tau} \ldots\; \textcolor{gray}{\zerovec}$} (AttDelay)
        (AttDelay.north) edge[bend left=28]
          node[pos=.3, align=center, label={[label distance=0.0cm]-30:$\textcolor{gray}{-\unitvec{1}}$}] {$p\step{a}p'$\\ $Q_\varepsilon \step{a} Q'$} (AttObs)
        (AttDelay) edge
          node[label={[label distance=0cm]-180:$\textcolor{gray}{\zerovec}$}] {$Q = Q_\varepsilon$} (Def)
        (AttDelay) edge
          node[pos=.87,label={[label distance=0.2cm]-177:$\textcolor{gray}{\zerovec}$}] {$p \nostep{\tau}$} (DefStab)
        (AttDelay) edge[specialEdgeStyle]
          node[align=center,pos=0.3,label={[label distance=0.1cm]-100:$\textcolor{etaColor!50}{\zerovec}$}] {$p \stepsoft{\alpha} p'$\\$Q_\varepsilon \neq \varnothing$} (DefBranch)
        (Def) edge[bend right=17]
          node[pos=.85, label={[label distance=0.1cm]-100:$\textcolor{gray}{-\unitvec{3}}$}] {$q \in Q$} (AttConj)
        (DefStab) edge[bend right=10]
          node[align=right, pos=.85, label={[label distance=0.3cm]-170:$\textcolor{gray}{-\unitvec{4}}$}] {\mbox{}\hspace*{-1.5em}$q \in Q_\varepsilon$\\[2pt]\mbox{}\hspace*{-1.5em}$q \nostep{\tau}$} (AttConj)
        (DefStab) edge[bend left=10]
          node[align=right, pos=.2, label={[label distance=0.3cm]165:$\textcolor{gray}{-\unitvec{4}-\unitvec{8}}$}] {\mbox{}\hspace*{-3em}$\varnothing = Q = \mbox{}$\\[2pt]\mbox{}\hspace*{-3em}$\set{ q\!\in\!Q_\varepsilon \mid q \nostep{\tau} }\;$} (Def)
        (AttConj) edge[bend left=10]
          node[label={[label distance=0.0cm]-75:$\textcolor{gray}{\updmin{1,6},0,0,0,0,0,0,0}$}] {} (AttContinue)
        (AttConj) edge[bend right=15]
          node[above, label={270:$\textcolor{gray}{\updmin{1,7},0,0,0,0,0,0,-1}$}] {$p \neq q$} (AttSwap)

        (DefBranch) edge[specialEdgeStyle]
          node[label={[label distance=0.1cm]270:$\textcolor{etaColor!50}{-\unitvec{2}-\unitvec{3}}$}] {$q \in Q_\varepsilon$} (AttBranchClause)
        (AttBranchClause) edge[specialEdgeStyle]
          node[pos=.55, align=right] {$\{q\} \stepsoft{\alpha} Q'_\alpha$ \\
                                      $\textcolor{etaColor!50}{\updmin{1,6},0,0,0,0,0,0,0}$} (AttBranch)
        (AttBranchClause) edge[specialEdgeStyle, bend left=5]
          node[pos=.4, swap, align=center] {$\textcolor{etaColor!50}{\zerovec}$} (AttConj)
        (AttBranch) edge[specialEdgeStyle, pos=.6]
          node[align=center, pos=0.4]{$Q'_\alpha \stepweak Q'$ \\
                            $\textcolor{etaColor!50}{-\unitvec{1}-\unitvec{3}}$} (AttObs)
        (AttBranch) edge[specialEdgeStyle, bend left=30, pos=.5]
          node[label={0:$\textcolor{etaColor!50}{-\unitvec{1}-\unitvec{5}}$}]{$Q'_\alpha \neq \varnothing$} (DefContinue)
        (AttBranch) edge[specialEdgeStyle, bend right=30, swap, pos=.6]
          node[label={0:$\textcolor{etaColor!50}{-\unitvec{1}}$}]{$Q'_\alpha = \varnothing$} (DefContinue);
  \end{tikzpicture}
\end{adjustbox}
```

Schematic *simplified* weak spectroscopy game $\gamespectroscopywsimple$.
:::

Intuitively, the simplified game part encodes nested conjunctions of the form $\hmlands\set{ \hmlsoft{\alpha} \mathhl{\hmlands \Psi'}, \psi_1, \ldots}$ or the cheaper form $\hmlands\set{ \hmlsoft{\alpha} \mathhl{\hmleps \hmlands \Psi'}, \psi_1, \ldots}$.
The $\Psi'$ are the formulas from after branching observation moves $\attackerpos[\eta]{p,\alpha,p',q} \gamemoveblank \attackerpos[\eta]{p', Q_\alpha'} \gamemoveblank \attackerpos{p', Q'}$, while the $\psi_i$ come from the resets $\attackerpos[\eta]{p,\alpha,p',q} \gamemoveblank \attackerpos[\wedge]{p,q}$.

In @bj2025silentStepSpectroscopyJournal, we discuss this game's strategy formulas in detail and prove its correctness, resulting in the following theorem.^[
  Credit for the proof details goes to Jansen.
]

::: {#thm-weak-spectroscopy-game-simplified-characterization}
#### $\widehat{\notions}^\literal{weak}$ characterization

Let the simplified weak notions $\widehat{\notions}^\literal{weak}$ be the union of $\nats \times \set{ 0 } \times \nats^6$
and $\nats \times \set{ \infty } \times \set{ 0, \infty} \times \nats \times \set{ 0, \infty} \times \nats^3$.
Let simplified expressiveness prices be defined by rounding up the prices of @def-weak-spectrum:
$\exprabst[\literal{weak}] = \min \set{ N \in \widehat{\notions}^\literal{weak} \mid \expr[\literal{weak}](\varphi) \leq N }$.
Then, on the simplified weak game $\gamespectroscopywsimple$ of @fig-weak-spec-game-simplified:

For all $N \in \widehat{\notions}^\literal{weak}$, $p \in \states$, $Q \in \powerset{\states}$, the following are equivalent:

- There exists a formula $\varphi \in \hmlsrbb$ with price $\exprabst[\literal{weak}](\varphi) \leq N$ that distinguishes $p$ from $Q$.
- Attacker wins $\gamespectroscopywsimple^{\system}$ from $\attackerpos{p,Q}$ with $N$.
:::

Complexity-wise, for the simplified game, $\gamespectroscopywsimple$,
we have just
$\relsize{G_{\swsimple}} \in \bigo{ \relsize{\step{}} \cdot 2^{\relsize{\states}}}$
and also $o_{\swsimple} \in \bigo{ \relsize{\step{}}}$.
Following the same argument as in @thm-weak-spectroscopy-complexity,
deciding the whole game still has exponential time complexity of
$\bigo{\relsize{\step{}} \cdot
(\relsize{\step{}} \cdot 2^{\relsize{\states}})^{16} \cdot
(\relsize{\step{}} \cdot 2^{\relsize{\states}})^{7}}
= \bigo{ \relsize{\step{}}^{24} \cdot 2^{23 \relsize{\states}} }
$,
and space complexity
$\bigo{ \relsize{\step{}}^8 \cdot 2^{8 \relsize{\states}} }$.
But these are much lower bounds than in the original game $\gamespectroscopyw$,
where we found $\bigo{ \relsize{\step{}}^{24} \cdot 3^{24\relsize{\states}} }$ for time and
$\bigo{ \relsize{\step{}}^8 \cdot 3^{8\relsize{\states}}}$ for space.

The practical difference is huge on transition systems exposing relevant branching-degree with respect to internal behavior such as the initial Peterson system of @fig-peterson-mutex:
With the optimization, the tool solves it in fractions of a second, as reported in @tbl-weak-spectro-results.
Without it, the exponential conjunctions lead to a game with 121,773 moves, taking 90 seconds.

Moreover, we can again use the trick to work with *flattened energies*, according to @lem-declining-update-complexity-flattened.
After all, $\gamespectroscopywsimple$ itself is only correct with respect to a simplified spectrum according to @thm-weak-spectroscopy-game-simplified-characterization.
If we bound the energy lattice to $\{0, 1, \infty\}^8$ the size of Pareto fronts is decoupled from the game size.
This further improves space complexity to
$\bigo{ \relsize{\step{}} \cdot 2^{\relsize{\states}} }$ and overall time complexity to
$\bigo{ \relsize{\step{}} \cdot
(\relsize{\step{}} \cdot 2^{\relsize{\states}})^{16} } =
\bigo{ \relsize{\step{}}^{17} \cdot 2^{16 \relsize{\states}} }$.

### Covering Revivals and Decorated Traces {#sec-covering-revivals}

In the weak spectrum of @sec-weak-spectrum-quantities, we left out the notions of revivals, failure traces, and ready traces, which we had included in the strong spectrum of @sec-strong-notions.
Their stable variants are relevant to the CSP community [see @roscoe2009revivalsHierarchy].

As discussed in @exm-failure-trace-distinguished, these notions need to differentiate between a deepest “revival” conjunct and other positive conjuncts.
Thus, these equivalences need an additional dimension for $\expr$-measurements, and an even more sophisticated handling of conjunctions in the game.

@fig-weak-spec-game-revivals illustrates how one could incorporate revivals into stable conjunctions, analogously to @sec-strong-spectroscopy.
Note, that we now have two kinds of conjunct positions: for the stable non-revival context and for the other contexts.
The maximal depth of conjuncts is still managed by dimension 6.
But stable non-revival conjuncts receive a new dedicated dimension 7 to bound their depth.
The previous dimensions 7 and 8 now come 8th and 9th.

:::{#fig-weak-spec-game-revivals fig-env='figure*' fig-pos='t'}

```tikz
%%| image-class: lightbox
\definecolor{etaColor}{RGB}{100,100,100}%{cmyk}{0.8, 0, 0, 0.3}
\definecolor{stabilityColor}{cmyk}{0, 0.7, 0.7, 0.4}
\begin{adjustbox}{max width=\linewidth, center}
  \begin{tikzpicture}[>->,shorten <=1pt,shorten >=0.5pt,auto,node distance=2cm, rel/.style={dashed,font=\it},
    posStyle/.style={draw, inner sep=1ex,minimum size=1cm,minimum width=2cm,anchor=center,draw,black,fill=gray!5}]
      \node[posStyle, initial, initial text={}]
        (Att){$\attackerpos{p,Q}$};
      \node[posStyle]
        (AttDelay) [right = 1.6cm of Att] {$\attackerpos[\varepsilon]{p,Q_\varepsilon}$};
      \node[ellipse, draw, inner sep=1ex, minimum size=1cm,minimum width=2cm,fill=gray!5]
        (Def) [below = 2.2cm of AttDelay] {$\defenderpos{p,Q}$};
      \node[ellipse, draw=stabilityColor, fill=stabilityColor!3, inner sep=1ex, minimum size=1cm,minimum width=2cm]
        (DefStab) [above right = 2cm and .1 of AttDelay] {$\defenderpos[s]{p,Q_s \setminus Q_*, Q_*}$};
      \node[dotted, cloud, cloud puffs=9,cloud puff arc=105, aspect=2, draw=etaColor, inner sep=1ex, minimum size=1cm,minimum width=2cm,fill=etaColor!3]
        (DefBranch) [below right = 1.1cm and 1.5cm of AttDelay] {$\dots$};
      \node[posStyle]
        (AttConj) [below right = 1.2cm and 0.1cm of DefBranch] {$\attackerpos[\land]{p,q}$};
      \node[posStyle, dashed, dash pattern={on 1.055045263157895mm off 0.993586315789474mm}, dash phase=0.405943684210525mm]
        (AttSwap) [right = 2cm of AttConj] {$\attackerpos[\varepsilon]{q,\set{p' \mid p \stepweak p'}}$};
      \node[posStyle, dashed, dash pattern={on 1.051033684210526mm off 0.989808421052632mm}, dash phase=0.423411578947368mm]
        (AttContinue) [above = 1cm of AttSwap] {$\attackerpos[\varepsilon]{p,\set{q' \mid q \stepweak q'}}$};
      \node[posStyle, dashed, dash pattern={on 1.03mm off 0.97mm}, dash phase=0.515mm]
        (AttObs) [right = 7cm of AttDelay] {$\attackerpos{p^\prime,Q^\prime}$};
      \node[posStyle, draw=stabilityColor, fill=stabilityColor!3]
        (AttConjStab) [right = 2cm of DefStab] {$\attackerpos[s]{p,q}$};
      \node[posStyle, dashed, dash pattern={on 1.055045263157895mm off 0.993586315789474mm}, dash phase=0.405943684210525mm]
        (AttSwapStab) [right = 2cm of AttConjStab] {$\attackerpos[\varepsilon]{q,\set{p}}$};
      \node[posStyle, dashed, dash pattern={on 1.051033684210526mm off 0.989808421052632mm}, dash phase=0.423411578947368mm]
        (AttContinueStab) [above = 1cm of AttSwapStab] {$\attackerpos[\varepsilon]{p,\set{q}}$};
      
      % draw the bottom left corner nicely:
      \draw[-] (AttSwap.south west) ++(0.2pt,0.2pt) ++(0.07,0) -- ++(-0.07,0) -- ++(0,0.05);
      \draw[-] (AttContinue.south west) ++(0.2pt,0.2pt) ++(0.07,0) -- ++(-0.07,0) -- ++(0,0.05);
      \draw[-] (AttObs.south west) ++(0.2pt,0.2pt) ++(0.07,0) -- ++(-0.07,0) -- ++(0,0.05);

      \path
        (Att) edge
          node[label={-90:$\textcolor{gray}{\zerovec}$}] {$Q \stepweak Q_\varepsilon$} (AttDelay)
        (Att) edge[bend right=15]
          node[pos = .4, label={-150:$\textcolor{gray}{\zerovec}$}] {$Q = \varnothing$} (Def)
        (Att) edge[bend right=60]
          node[pos = .6, label={-130:$\textcolor{gray}{-\unitvec{5}}$}] {$Q \neq \varnothing$} (Def)
        (AttDelay) edge [out=155,in=115,looseness=4, pos=.6] node {$p \step{\tau} \ldots\; \textcolor{gray}{\zerovec}$} (AttDelay)
        (AttDelay) edge[bend right=0]
          node[pos=.5, align=center, label={[label distance=0.0cm]below:$\textcolor{gray}{-\unitvec{1}}$}] {$p\step{a}p'$\\ $Q_\varepsilon \step{a} Q'$} (AttObs)
        (AttDelay) edge
          node[pos =.3, label={[label distance=0cm]-180:$\textcolor{gray}{\zerovec}$}] {$Q = Q_\varepsilon$} (Def)
        (AttDelay.north) edge[draw=stabilityColor]
          node[pos=.7, align=center, label={[label distance=0.1cm]-10:$\textcolor{stabilityColor!50}{\zerovec}$}] {
            $\textcolor{stabilityColor}{p \nostep{\tau}}$ \\
            $\textcolor{stabilityColor}{Q_* \subseteq Q_s = \set{q \in Q_\varepsilon \mid q \nostep{\tau}}}$
          } (DefStab)
        (AttDelay) edge[draw=etaColor]
          node[pos=.65,align=center] {$\dots$} (DefBranch)
        (Def) edge[bend right=17]
          node[pos=.85, label={[label distance=0.1cm]-100:$\textcolor{gray}{-\unitvec{3}}$}] {$q \in Q$} (AttConj)
        (DefStab) edge[draw=stabilityColor]
          node[align=center, pos=.6, label={[label distance=-0.1cm]92:$\textcolor{stabilityColor!50}{0,0,0,-1,0,0,\updmin{6,7},0,0}$}] {\mbox{}\hspace*{-1.5em}$\textcolor{stabilityColor}{q \in Q_s \setminus Q_*}$} (AttConjStab)
        (DefStab) edge[draw=stabilityColor, bend left=15]
          node[align=right, pos=.2, label={[label distance=0.1cm]180:$\textcolor{stabilityColor!50}{-\unitvec{4}-\unitvec{9}}$}] {$\textcolor{stabilityColor}{Q = \varnothing}$} (Def)
        (DefStab) edge[draw=stabilityColor, bend right=5]
          node[pos=.7, align=left] {$\textcolor{stabilityColor}{Q' = Q_*, p' = p}$\\$\textcolor{stabilityColor!50}{\updmin{1,6},0,0,-1,0,0,0,0,0}$} (AttObs)
        (AttConj) edge[bend left=10]
          node[label={[label distance=0.0cm]-75:$\textcolor{gray}{\updmin{1,6},0,0,0,0,0,0,0,0}$}] {} (AttContinue)
        (AttConj) edge[bend right=15]
          node[above, label={270:$\textcolor{gray}{\updmin{1,8},0,0,0,0,0,0,0,-1}$}] {$p \neq q$} (AttSwap)

        (DefBranch) edge[draw=etaColor, dashed]
          node[pos=.5] {$\dots$} (AttObs)
        (DefBranch) edge[draw=etaColor]
          node[pos=.5] {$\dots$} (AttConj)
        (AttConjStab) edge[bend left=10, draw=stabilityColor]
          node[label={[label distance=0.0cm]-75:$\textcolor{gray}{\updmin{1,\textcolor{stabilityColor}{7}},0,0,0,0,0,0,0,0}$}] {} (AttContinueStab)
        (AttConjStab) edge[bend right=15, draw=stabilityColor]
          node[above, text=stabilityColor, label={270:$\textcolor{gray}{\updmin{1,8},0,0,0,0,0,0,0,-1}$}] {$p \neq q$} (AttSwapStab);
  \end{tikzpicture}
\end{adjustbox}
```

Modifying stable conjunction moves to include revivals (brick red part).
The branching bisimulation part is left out.
:::

In this game, stable revivals end up at $(\infty, 0, 0, \mathhl{1}, 0, \mathhl{1}, \mathhl{0}, 1, 1)$,
stable failure traces at $(\infty, 0, 0, 1, 0, \mathhl{\infty}, 0, 1, 1)$,
and stable ready traces at $(\infty, 0, 0, 1, 0, \mathhl{\infty}, \mathhl{1}, 1, 1)$,
analogously to their strong counterparts in @fig-strong-ltbt-spectrum.

Of course, one could again use the “look-ahead trick” of @sec-clever-strong-spectro to reduce the number of partitions to consider.

In fact, the implementation on {{<equivio>}} does employ this formulation, thereby actually using a 9-dimensional game with richer stable conjunctions.
Although this thesis remains short on providing a theorem for the game that contains the stable revival move, tests in the tool (and the theorems for the strong spectrum) suggest correctness of the variant in @fig-weak-spec-game-revivals.

### Extending to Other Equivalences {#sec-extending-to-other-eqs}

At this point, we have covered most interesting parts of strong and weak spectrum.
But there are still more notions one could reach for.

{{< paragraph_heading "Divergence and completed observations." >}}
Logic and game, as we have presented them, are blind to *divergence* and *completed observations*.
Van Glabbeek -@glabbeek1993ltbt uses additional modalities:
$\Delta$ for divergence with $\semantics{\Delta} \defeq \{p \mid p \step{\tau}^\omega\}$;
$0$&nbsp;for completed observations with $\semantics{0} \defeq \set{p \mid \forall \alpha \in \actions. \nostep{\alpha} }$
(and $\lambda \defeq 0 \lor \Delta$).

@bj2024silentStepSpectroscopyExpress decide against including these modalities in the game.
At least on finite-state systems, they may be understood to be *special action observations*.
Divergence and completion can be added through pre-processing into a system $\system$ before turning to our game of equivalence questions on $\system'$.

For $0$, the transformation from $\system$ to $\system'$ is obvious:
Add a $p \step{\checkmark} \bot$ to the transition system for each $p \in \states$ where $p \nostep{a}$ for every $a \in \actionsvis$ (with $\checkmark$ and $\bot$ fresh).
Then $\semantics{\hmlobs{\checkmark}\hmltrue}^{\smash{\system'}} = \semantics{0}^{\smash{\system}}$.

For divergence on finite-state systems, one may use an argument from @gjkw2017branching:
Add a state $\bot$, an action $\delta \notin \actions$ and transitions $p \step{\delta} \bot$ to the transition system for each $p \in \states$ that lives on a $\tau$-cycle $p \mathrel{\smash{\step{\tau}}^+} p$.
Then $\semantics{\hmleps\hmlobs{\delta}\hmltrue}^{\smash{\system'}} = \semantics{\Delta}^{\smash{\system}}$.
@fokkinkGL19DivCong3 define a unary *diverges-while* operator $\Delta \varphi$ to characterize divergence-preserving branching bisimilarity; this operator is then naturally expressed as branching conjunction $\hmleps\hmlands\set{\hmlsoft{\delta}\hmltrue, \varphi}$.

For infinite systems, divergence is more tricky.
Just like infinite traces, it depends on the possibility of characterizing infinite-duration attacks.^[And not just unbounded attack strategies as we support them now.]
On the game level, for infinite plays to be winnable by the attacker, the game must have a parity-game winning condition:
The attacker wins a subgame about divergence-distinction if they can make infinitely much $\tau$-progress, but the defender cannot. 
Such a richer game model is the route taken by @ekw2017gamesBisimAbstraction to characterize various divergence-aware bisimilarities.

{{< paragraph_heading "Behavioral congruences." >}}
Famously, many of the unstable weak equivalences need to be refined in order to be congruences for CCS with choice “$\ccschoice$” [cf. @gfm2020congruenceOperator; @sangiorgi2012].
For instance, *rooted* weak bisimulation congruence is achieved by allowing an $\hmleps\hmlobs{\tau}...$-observation at the outermost level of the HML characterization.
Otherwise, weak bisimulation formulas have no $\hmlobs{\tau}$-parts (see @fig-weak-grammars-bisim-like).

This thesis is not going deeper into congruences.
But let us note that, clearly, the weak spectroscopy game could be extended by some prefix to enable such special observations for the attacker at the beginning if rootedness is desired.

{{< paragraph_heading "Coupled simulation." >}}
As mentioned in @sec-weak-spectrum-discussion, we have glimpsed over coupled similarity.
It can be thought of as the syntactic combination of weak similarity and contrasimilarity in the sense that each weak conjunction must either contain purely positive *or* purely negative conjuncts, as outlined in @bm2024contrasimilarityInfComp.
This possibility does not align nicely with our game formulation because it means that the attacker has to dedicate a conjunction to positivity or negativity before entering, and not make up their mind on the fly whether $q \in Q$ are addressed positively or negatively.
If desired, this could be treated by a new dimension in modal conjunctions and game positions.
Who urgently needs to compute coupled similarity relations, may otherwise fall back to the coupled simulation game by @bn2019coupledsimTacas.

## Discussion

This chapter has shown that the spectroscopy approach can readily be extended to handle weak behavioral equivalences as well.

{{< paragraph_heading "The weak spectrum, gamified." >}}
With the weak spectroscopy game, @bj2024silentStepSpectroscopyExpress provide the *first generalized game characterization of the silent-step spectrum*.

Previously, there have only been partial characterizations of individual equivalences:
@ekw2017gamesBisimAbstraction treat the diamond of weak, delay, $\eta$ and branching bisimilarity.
@bnp2020coupledsim30 and Bisping & Montanari [-@bm2021contrasimilarity; -@bm2024contrasimilarityInfComp] cover the area of coupled notions and contrasimilarity.
@tan2002evidence describes subset-construction variants of the bisimulation game for weak trace equivalence and stable failure equivalence.
With the weak spectroscopy game, we have moved beyond such individual equivalence games in order to achieve genericity,
covering both linear-time and branching-time as well as stable and unstable notions.

In principle, this chapter only executes @idea-modal-first to translate modal constructions to game moves appearing in $\hmlsrbb$, which follows @idea-weak-hml.
The important trick is to weaken the attacker according to @idea-weakening-game,
but this departs from prior approaches in weakened games and involves many technicalities.
Therefore, it is relieving to have the Isabelle formalization of @sec-isabelle-formalization by @bbhlmm2025weakSpectroscopyIsabelle to verify the construction.

{{< paragraph_heading "Analyzing systems." >}}
The mini case studies of @sec-tackling-case-studies show how the spectroscopy automates away the tedious kind of work of finding out the precise relationship between transformed processes that went, for instance, into @bell2013certifiably.
Similar searches for weak bisimilarities have happened around @parrow1992 and @nestmann1996decoding, where coupled similarity turned out to be the most fitting for encodings between models of differing synchronicity.^[
  Nice accounts of Nestmann's search can be found in @concur2022tot2021interview and in the historical remarks of @bnp2020coupledsim30.
]

Concise distinguishing formulas can be interesting diagnostic information to compare models.
Like @mg2024minDepthDistBranchBisim, we find minimal-depth distinguishing formulas for branching bisimilarity without until, but we solve the problem for all weak notions at once.
@hmy2023whenPrivacyFails report how inequivalence with respect to more distinctive modal logics can reveal privacy vulnerabilities in ePassports, which have been overlooked in a purely trace-based view.

For a full understanding of a system's relationship to its specification, it is often helpful to pinpoint exactly how difficult it would be for an attacker to tell the two apart.
In the next chapter, we will return to the initial @exm-peterson-mutex of Peterson's mutex and explain how the prototype implementation of the weak spectroscopy algorithm handles it.

{{< paragraph_heading "To be continued." >}}
Some applications would demand more specialized modal logics.
As outlined in @sec-extending-to-other-eqs, matching adaptions in game or semantic model are usually straightforward thanks to the clear connection of productions in the modal grammar and mechanics in the spectroscopy game.

So much for the theory.
