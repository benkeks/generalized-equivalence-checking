---
toc-title: "Chapter 3"
---

# Context: The Spectrum of Equivalences {#sec-spectrum}

::: {.content-visible when-format="html"}
{{< include style/macros-html.md >}}
{{< include style/macros.md >}}
:::

::::{#related-3 .column-margin}
`\vspace{-2em}`{=latex}
{{< paragraph_heading "Related publications." >}}
This chapter presents the spectrum of modal languages from “Process equivalence problems as energy games” [@bisping2023equivalenceEnergyGames] in a slightly clarified manner.
The used hierarchy itself derives from @bjn2022decidingAllBehavioralEqs.
The alignment to the authoritative work by @glabbeek1990ltbt1 has been formalized by @mattes2024expressivePowerHML.
::::

We will now take a deeper dive into the question how groups of behavioral equivalences and preorders can be ranked in equivalence spectra.

For the following chapters, we will focus on the main “linear-time--branching-time spectrum” for the semantics of concrete processes treated by @glabbeek1990ltbt1, the so-called “strong spectrum.”
However, we will order the equivalences using the approach of parameterized *notions of observability* from the later “weak spectrum” by @glabbeek1993ltbt.

The first core idea of this chapter is:

::: {#idea-hierarchy .callout-idea .callout-tip}
#### Notions of observability bring order

Groups of equivalences can be defined and ranked in lattices of notions of observability.
:::

In particular, @sec-ltbt-spectrum will introduce such a spectrum, forming a hierarchy of modal logics for the *strong spectrum*.
From there, we quickly run into our core question:

::: {#idea-spectroscopy-prob .callout-idea .callout-tip}
#### We have a spectroscopy problem

We can ask what notions of equivalence from a spectrum are the most fitting to relate two states.
:::

@sec-spectroscopy will define the *spectroscopy problem* formally and give lower bounds for its complexity on the strong spectrum.

::::{.content-visible when-format="html" .column-margin}
{{< contents "related-3" >}}
::::

## Observability Hierarchies {#sec-obs-hierarchies}

Let us begin to pick up the idea from @sec-perks-modal-characterizations that modal logics can nicely rank equivalences.
The intuition is that $\hml$ sublogics capture what we consider to be *observable*.
The more we mark as observable, the finer the resulting equivalence relations become.

### Understanding the Equivalence Hierarchy through Modal Logics

As promised, we revisit the hierarchy between bisimilarity, similarity, and trace equivalence of @sec-hierarchy-equivalences, modally.
So far, we have only looked into the characterization of bisimilarity through the whole of $\hml$ in @thm-hennessy-milner or through $\observations{\floor{B}}$ in @lem-game-formula-hml.
From now on, we will be working with *hierarchies of Hennessy–Milner theorems*.

::: {#def-sim-trace-logics}
#### Logics of simulation and traces

We define the two $\hml$ sublogics $\observations{T}$, the *linear positive fragment+, and $\observations{S}$, the *positive fragment*, by the grammars starting at $φ^\mathrm{T}$ and $φ^\mathrm{S}$.

$$
\begin{array}{rclll}
  φ^\mathrm{T} & \grammardef &
    \hmlobs{α}φ^\mathrm{T}
    & \grammaror & \hmltrue \\
  φ^\mathrm{S} & \grammardef &
    \hmlobs{α}φ^\mathrm{S}
    & \grammaror & \hmland{i}{I}\hmlobs{α_i}φ^\mathrm{S}_i
\end{array}
$$
:::

The logics characterize trace and simulation preorder (and equivalence):

::: {#lem-trace-logics}
#### Trace characterizations

$p \bpreord{T} q$ precisely if $p \bpreordvar{\observations{T}} q$.{{<isb theorem HML_Spectrum lts.observations_traces_characterizes_trace_preorder>}}
:::

::: {#lem-sim-logics}
#### Simulation characterization

$p \bpreord{S} q$ precisely if $p \bpreordvar{\observations{S}} q$.{{<isb theorem HML_Spectrum lts.observations_simulation_characterize_simulation_preorder>}}
:::

{{<noindent>}} Clearly, $\observations{T} \subset \observations{S} \subset \hml$.
So, @prp-difference-contraposition that sublogics will equate at least as much as their parent logic, yields another way of establishing the entailment hierarchy between bisimilarity, similarity, and trace equivalence of @sec-hierarchy-equivalences.^[Taking the two preceding lemmas together with @thm-hennessy-milner for $\beq{B}$ and $\hml$.]

In the modal realm, equivalences become naturally comparable.
Contrast this with preceding definitions that live in different worlds:
relational definition for (bi-)similarity of @def-bisimilarity and denotational definition for trace equivalence of @def-trace-eq.
Heterogenous definitions lead to complicated proofs.

The modal view also reveals an intuitive hierarchy of “testing scenarios” for the equivalences, framed as *black box tests* in @glabbeek1990ltbt1:

Trace equivalence
: matches an observer that can see *sequences of events*.
They *just watch repeated executions* of the program, but are oblivious to possibilities and decisions.

Similarity
: matters to an experimenter that can also explore different *branches of possibilities*.
This is valid if the experimenter can somehow *copy the system state* during the execution.

Bisimilarity
: captures that the experimenter can moreover determine if a future course of events is *impossible at some point*.
This means that the experimenter can not only copy the execution state but also exhaustively test *every* possibility of how the system may continue.

\noindent
But such levels of observability do not need to be linear, as we will see in the next subsection …

### Incomparabilities {#sec-incomparabilities}

Often, things we compare are comparable with respect to *different dimensions*.
For instance, one can compare smartphone sizes with respect to width and height, as seen in @fig-hermanns-hartmanns-smartphone-spectrum.
This phenomenon of *orthogonal dimensions* also occurs for behavioral equivalences. 

:::{#fig-hermanns-hartmanns-smartphone-spectrum .column-margin}
![](img/hermanns-hartmanns-spectrum.jpg){.lightbox}

Participants of ETAPS'22 discussing the spectrum of smartphone sizes.
(Which is dominated by Hermanns's phone, at the bottom of the picture.)  
(Photo: ETAPS Association)
:::

A well-known and natural notion of equivalence is that of *failure equivalence*.
Intuitively, a failure says that the experimenter may follow a trace and see which actions are *impossible* at its end.
Its standard definition is based on *failure* denotations:

::: {#def-failures}
#### Failures

The set of failures of a process $\failures{p} \subseteq \actions^* \times \powerset{\actions}$ is recursively defined as

- $(\emptyword, X) ∈ \failures{p}$ if $X \cap \initials{p} = \varnothing$,
- $(α \vec{w}, X) ∈ \failures{p}$ if there is $p'$ with $p \step α p'$ and $(\vec w, X) ∈ \failures{p'}$.
:::

For instance, the failure $(\tau, \set{\literal{a}})$ is in $\failures{\literal{P}}$ but not in $\failures{\literal{Q}}$ on @fig-ts-determinism.

But would it not be nice if we could prevent the invention of new mathematical objects as denotations for each new notions of observability we consider?
Fortunately, we can save the work, by directly employing modal logics:

::: {#def-failures-modal}
#### Failure logic

We define failure observations $\observations{F}$ by the grammar:
$$
  φ^\mathrm{F} \grammardef
    \hmlobs{α}φ^\mathrm{F}
    \quad\grammaror\quad
    \hmland{i}{I} \hmlneg \hmlobs{α_i}\hmltrue 
$$
:::

Clearly, this encompasses what we may observe via traces,
but is something that we cannot observe using simulation.
We consider $\bpreord{F}$ given by $\bpreordvar{\observations{F}}$.

The distinguishing failure $(\tau, \set{\literal{a}})$ can be expressed as $\hmlobs{τ}\hmlands\set{\hmlneg\hmlobs{\literal a}\hmltrue} \in \observations{F}$ in HML.
The formula distinguishes $\literal P$ from $\literal Q$ on @fig-ts-determinism, $\literal{P} \nbpreord{F} \literal{Q}$.
This sets failures apart from simulation, as  $\literal P \bpreord{S} \literal Q$ (cf. @exm-phil-sim).
On the other hand, no failure from $\observations{F}$, distinguishes $\literal Q$ from $\literal P$, implying $\literal Q \bpreord{F} \literal P$, but $\literal Q \nbpreord{S} \literal P$.

:::: {#fig-failure-hierarchy .column-margin}
```tikz
\begin{tikzpicture}[auto,node distance=2.1cm,
  notion/.style={minimum width=2.5cm, minimum height=.8cm, rectangle,align=center,rounded corners}]
  \node[notion] (B){Bisimilarity};
  \node[notion, below left of=B] (S){Similarity};
  \node[notion, below right of=B] (F){Failure equivalence};
  \node[notion, below right of=S] (T){Trace equivalence};
  \path[->]
    (B)
      edge node {} (S)
    (B)
      edge node {} (F)
    (S)
      edge node {} (T)
    (F)
      edge node {} (T);
\end{tikzpicture}
```

Equivalence hierarchy including failures.
::::

As a consequence, simulation preorder and failure preorder are *incomparable*, that is, neither one implies the other.
The same is true of the corresponding equivalences: similarity and failure equivalence.
The situation is summed up by the non-linear hierarchy in @fig-failure-hierarchy.
After a quick glance at the diamond-like figure, it probably comes as no surprise what kind of mathematical structure we employ to handle the hierarchy: lattices.

### Lattices

To handle non-linearity, we will work with *lattices* of notions of behavioral equivalence.
The following definition gives the preliminaries to talk about this kind of partial orders.

::: {#def-lattice}
#### Lattices, bounds, chains

A *lattice* is a partially ordered set $(B, \leq)$, where there are greatest lower bounds $\inf\set{b_1, b_2}$ and least upper bounds $\sup\set{b_1, b_2}$ between each pair of elements $b_1, b_2 \in B$.

- The *greatest lower bound* of a set $B' \subseteq B$ is called its *infimum*, $\inf B'$.
  It refers to the greatest element $b \in B$ such that $b \leq b'$ for all $b' \in B'$.^[
    Note that not necessarily $b \in B'$!
    Moreover, some sets do not have lower/upper bounds.
  ]
- Dually, the *least upper bound* of a set $B' \subseteq B$ is called its *supremum*, $\sup B'$.
  It refers to the least element $b \in B$ such that $b \geq b'$ for all $b' \in B'$.
- For the pair-wise infimum we also use infix notation $b_1 \glb b_2 = \inf \set{b_1, b_2}$, and analogously $b_1 \lub b_2 = \sup \set{b_1, b_2}$.
- If a lattice $(B, \leq)$ not only allows infima and suprema for pairs but for any set $B' \subseteq B$, it is called *complete*.
  We say $\inf$-complete or $\sup$-complete if only one of the two is true.
- We call a totally ordered subset $B' \subseteq B$ a *chain*.
- Dually, some $B' \subseteq B$ with no two elements $b_1, b_2 \in B'$ such that $b_1 \leq b_2$ is called an *anti-chain*.
:::

::: {#fig-set-lattice .column-margin}

```tikz
\begin{tikzpicture}[auto,node distance=2cm,align=center]
  \node (B123){$\set{1,2,3}$};
  \node (B13)[below of=B123]{$\set{1,3}$};
  \node (B12)[left of=B13]{$\set{1,2}$};
  \node (B23)[right of=B13]{$\set{2,3}$};
  \node (B2)[below of=B13]{$\set{2}$};
  \node (B1)[left of=B2]{$\set{1}$};
  \node (B3)[right of=B2]{$\set{3}$};
  \node (Bnil)[below of=B2]{$\varnothing$};
  
  \path
  (B123)
    edge (B12)
    edge (B13)
    edge (B23)
  (B12)
    edge (B1)
    edge (B2)
  (B13)
    edge (B1)
    edge (B3)
  (B23)
    edge (B2)
    edge (B3)
  (B1)
    edge (Bnil)
  (B2)
    edge (Bnil)
  (B3)
    edge (Bnil);
  \path[dotted, thick, blue, transform canvas={xshift=1mm}]
    (B123) edge (B12)
    (B12) edge (B1)
    (B1) edge (Bnil);
  \path[dashed, thick, red]
    (B1) edge (B2)
    (B2) edge (B3);
\end{tikzpicture}
```

Lattice of subsets from @exm-set-lattice.
Solid lines stand for inclusion from bottom to top, transitive lines are left out. 
:::

::: {#exm-set-lattice}
#### Subset lattice

Given any set $B$, its subsets ordered by set inclusion $(\powerset{B}, {\subseteq})$ form a complete lattice.

The *greatest lower bound* is given by set intersection $\bigcap B'$ with $B' \subseteq B$.
The *least upper bound* is set union $\bigcup B'$ with $B' \subseteq B$.
The empty set $\varnothing \in \powerset{B}$ is the least element, $B \in \powerset{B}$ is itself the greatest element.

Consider the subset lattice over $B = \set{1,2,3}$.
It is “cube-like,” as can be seen in its Hasse diagram in @fig-set-lattice.
An example of a (maximal) chain would be $\set{\varnothing, \set{1}, \set{1,2}, B}$ (the nodes connected by a blue dotted line in the figure), because its members are ordered linearly $\varnothing \subset \set{1} \subset \set{1,2} \subset B$.
The set $\set{\set{1}, \set{2}, \set{3}}$ forms a (maximal) anti-chain (the nodes connected by a red dashed line in the figure), because its members do not include each other.
Their respective subsets are chains / anti-chains as well.
:::

::: {#fig-nat-lattice .column-margin}
```tikz
\begin{tikzpicture}[]
  \begin{scope}[rotate=45, scale=.85]
    \draw[help lines] (0,0) grid (2.5,2.5);
    \draw (-.25,-.25) node {$(0,0)$};
    \draw (1,-.25) node {$1$};
    \draw (2,-.25) node {$2$};
    \draw (-.25,1) node {$1$};
    \draw (-.25,2) node {$2$};
    \node[gray] (NInf0) at (3.4,0) {$(\infty, 0)$};
    \node[gray] (N0Inf) at (0,3.4) {$(0, \infty)$};
    \node[gray] (NInfInf) at (3.4,3.4) {$(\infty, \infty)$};
    \path[dotted, gray]
      (2.5,0) edge (NInf0)
      (0,2.5) edge (N0Inf)
      (N0Inf) edge (NInfInf)
      (NInf0) edge (NInfInf);
  \end{scope}
\end{tikzpicture}
```

Visualization of the infinitary grid of $\nats^2$ (and in gray, $\natsext^2$) in @exm-nat-lattice.
:::

::: {#exm-nat-lattice}
#### Vector lattice

Given a linearly ordered set $(B, \leq_B)$, its $d$-ary Cartesian product with pointwise order $(B^d, \leq)$ forms a lattice, where $b \leq b'$ iff $b_k \leq b'_k$ for all $k \in \set{1, …, d}$.
Greatest lower bounds and least upper bounds can be transferred pointwise from $B$.

For instance, pairs of natural numbers, $(\nats^2, \leq)$, form a lattice, as visualized in @fig-nat-lattice.
It is $\inf$-complete, that is, for any set from $\nats^2$, one can pick a greatest lower bound.
However, the lattice is not $\sup$-complete: For instance, the set $\nats \times \set{0}$ has no upper bound.
If we take the natural numbers extended with an upper bound $\infty$, $\natsext$, as basis, then $(\natsext^2, \leq)$ forms a complete lattice.
:::

When working with vectors, we assume standard notation, in particular, for $d$-dimensional *vector addition* $b + c ≔ (b_1 + c_1, …, b_d + c_d)$.
By $\unitvec{k}$, we denote the *unit vector* where the $k$-th component is 1 and all other components equal 0.
For example, $\unitvec{2}$ in a 3-dimensional context equals $(0,1,0)$.
The *zero vector* $(0,…,0)$ is denoted by $\zerovec$.

## The Linear-Time–Branching-Time Spectrum {#sec-ltbt-spectrum}

Van Glabbeek's two papers on the “linear-time--branching-time spectrum” [-@glabbeek1990ltbt1 ;-@glabbeek1993ltbt] show how all common equivalences can be understood to form a lattice of sublanguages of $\hml$ (and a variant of $\hml$ for equivalences with silent steps).
His hierarchy of equivalences derives from a hierarchy of *notions of observability*.^[
  In particular, the weak spectrum [@glabbeek1993ltbt] makes this concept of notions really formal.

  Also, we usually implicitly refer to the full version of the strong spectrum [@glabbeek2001ltbtsiReport].
]
We will introduce a similar construction: at first, in a generic form, then for the strong spectrum of @glabbeek1990ltbt1.

### Spectra as Observability Lattices

We will discuss various equivalence spectra.
Van Glabbeek [-@glabbeek1990ltbt1;-@glabbeek1993ltbt] already gives two different ones.
Let us first introduce an abstract description of such spectra.

::: {#def-spectrum}
#### Equivalence spectrum

An *equivalence spectrum* $(\notions, \leq,\allowbreak \observationsvar{N \in \notions})$ consists of

- a lattice of notions of observability, $\notions$, partially ordered by ${\leq} \subseteq \notions \times \notions$, and
- corresponding logics $\observationsvar{N} \colon \powerset{\hml}$ for $N \in \notions$.

\noindent
$\observationsvar{N \in \notions}$ must be monotonic, that is:
for any two notions $N,M \in \notions$, it holds that
$$N \leq M \text{ implies } \observationsvar{N} \subseteq \observationsvar{M}.$$
:::

Let us use our new definition to construct a subset lattice as in @exm-set-lattice to recreate the hierarchy of @fig-failure-hierarchy.

::: {#exm-simple-spectrum}
#### Diamond spectrum

Consider the notions
$$\notions^\literal{simple} ≔
\powerset{\set{\literal{⊕}, \literal{⊗} }},
$$
ordered by subset inclusion,
and the family of observation languages $\observationsvar[\literal{simple}]{N \in \notions}$ given by the family of grammars with some conditional productions:
$$
\begin{array}{rcll}
  φ^N & \grammardef & \hmltrue{} & \\
      & \grammaror  & \hmlobs{α}φ^N & \\
      & \grammaror  & \hmland{i}{I}φ^N_i & \text{ if $\literal{⊕} \in N$} \\
      & \grammaror  & \hmland{i}{I} \hmlneg \hmlobs{α_i}\hmltrue & \text{ if $\literal{⊗} \in N$} \\
      & \grammaror  & \hmlneg φ^N & \text{ if $\set{\literal{⊕}, \literal{⊗} } = N$.}
\end{array}
$$
Clearly, $N \subseteq M$ implies $\observationsvar{N} \subseteq \observationsvar{M}$ for $N, M \in \notions^\literal{simple}$.
We obtain the diamond hierarchy of @fig-sample-hierarchy.
It matches the diamond of @fig-failure-hierarchy, but this time, the hierarchy is an effect of the ordered notions.

:::: {#fig-sample-hierarchy .column-margin}

```tikz
\begin{tikzpicture}[auto,node distance=2.1cm,
  notion/.style={minimum width=2.5cm, minimum height=.8cm, rectangle,align=center,rounded corners}]
  \node[notion] (B){Bisimilarity \\ $\set{\literal{⊕}, \literal{⊗}}$};
  \node[notion, below left of=B] (S){Similarity \\ $\set{\literal{⊕}}$};
  \node[notion, below right of=B] (F){Failure equivalence \\ $\set{\literal{⊗}}$};
  \node[notion, below right of=S] (T){Trace equivalence \\ $\varnothing$};
  \path
    (B)
      edge node {} (S)
    (B)
      edge node {} (F)
    (S)
      edge node {} (T)
    (F)
      edge node {} (T);
\end{tikzpicture}
```
Hierarchy of simple notions of equivalence.
::::
:::

\noindent
While the incomparable languages of @sec-obs-hierarchies form no lattice, e.g. $\observations{S} \cup \observations{F} \neq \hml$, the *notions* of the present @exm-simple-spectrum do form a lattice, as $\set{\literal{⊕}} \cup \set{\literal{⊗}} = \set{\literal{⊕}, \literal{⊗}}$.
This is one of the reasons why it is convenient to add *notions of observability* as an abstraction layer.

We can also ask what the least notion is to include a specific formula:

::: {#def-expressiveness-price}
#### Syntactic expressiveness price

In the context of a spectrum $(\notions, \leq, \observationsvar{N \in \notions})$, the *syntactic expressiveness price* of a formula $\varphi$ that appears in one of the logics (i.e. $\varphi \in \bigcup_{N \in \notions} \observationsvar{N}$) is defined as
$$\expr(\varphi) ≔ \min \set{N \in \notions \mid \varphi \in \observationsvar{N}}.$$
:::

Note that, given our definition of spectra, the minimum of @def-expressiveness-price does not need to exists---but it does for the spectra we will be working with.

Thinking of the lattice of notions as a hierarchy of how difficult it is to tell processes apart, we consider this as a kind of “price tag” to put on formulas depending on their syntactic complexity.
Higher syntactic complexity allows formula sets of higher expressiveness.

In this view, a trace formula is *cheaper* than a failure formula.
Using @exm-simple-spectrum:
The prices differ $\expr(\hmlobs{\tau}\hmlobs{\literal a}) = \varnothing \subset \set{⊗} = \expr(\hmlobs{\tau} \hmlands\set{\hmlneg\hmlobs{\literal{a}}})$, which captures that we need a strictly smaller part of the grammar to construct the trace formula.

The concept of notions of equivalence will allow us to conveniently handle big equivalence hierarchies.

### Strong Notions of Observability {#sec-strong-notions}

Now we can approach the *strong spectrum* by @glabbeek1990ltbt1.^[
  “Strong” means that we treat $\tau$ like any other action.
  This traditional naming alludes to the fact that weak notions, which wash away certain differences of internal $\tau$-behavior, are implied by their strong counterparts.
]
We will encode its notions as a $\natsext$-vector lattice as in @exm-nat-lattice.
To cover all common behavioral preorders, we use six dimensions, counting certain syntactic features of $\hml$ formulas:

1. Modal depth of *observations* ($\hmlobs{\alpha}\dots$).
2. Nesting depth of *conjunctions* ($\hmlands\set{\dots}$).
3. Maximal modal depth of *deepest positive conjuncts* in conjunctions.
4. Maximal modal depth of the *other positive conjuncts* in conjunctions.
5. Maximal modal depth of *negative conjuncts* in conjunctions.
6. Nesting depth of *negations* ($\hmlneg\dots$).

::: {#def-strong-spectrum}
#### Strong spectrum

We define the *strong notions of observability* using vectors of extended naturals
$$\notions^\literal{strong} ≔
\natsext^6,
$$
ordered by pointwise comparison of vector components.
The *family of strong observation languages* $\observationsvar[\literal{strong}]{N \in \notions^\literal{strong}}$ is given by the parameterized grammar starting from $φ^N$:{{<isb primrec Priced_HML formula_of_price>}}
$$
\begin{array}{rcll}
  φ^N & \grammardef & \hmltrue{} & \\
      & \grammaror  & \hmlobs{α}φ^{N - \textcolor{obsColor}{\unitvec{1}}} & \\
      & \grammaror  & \hmlands\set{\varphi^{(N-\textcolor{conjColor}{\unitvec{2}}) \sqcap (N_3, \infty, \infty, \infty, \infty, \infty)}, \\
      &             & \quad\;
                        ψ^{(N-\textcolor{conjColor}{\unitvec{2}}) \sqcap (\infty, \infty, \infty, \textcolor{mainPosColor}{N_3}, \infty, \infty)},
                        ψ^{(N-\textcolor{conjColor}{\unitvec{2}}) \sqcap (\infty, \infty, \infty, \textcolor{mainPosColor}{N_3}, \infty, \infty)}, \ldots} & \\
  ψ^N & \grammardef &
      φ^{(N \sqcap (\textcolor{otherPosColor}{N_4}, \infty, \infty, \infty, \infty, \infty))} & \\
      & \grammaror  &
      \hmlneg φ^{(N \sqcap (\textcolor{negObsColor}{N_5}, \infty, \infty, \infty, \infty, \infty)) - \textcolor{negsColor}{\unitvec{6}}} & \\
\end{array}
$$
The productions only exist if the respective recursive invocations are defined on the domain of notions.
For instance, $φ^N \leadsto \hmlobs{α}φ^{N - \unitvec{1}}$ is no valid production for $N=(0,1,0,0,0,0)$ because $(-1,1,0,0,0,0) \notin \notions^\literal{strong}$.

The number of $\psi$-conjuncts in $\hmlands\set{\dots}$ is free–in particular, there might be none or infinitely many.
:::

::: {#exm-formula-language}
#### Formula language

The smallest notion to cover the failure formula of @sec-incomparabilities would be $(2,1,0,0,1,1)$, that is, 
$$\hmlobs{τ}\hmlands\set{\hmlneg\hmlobs{\literal a}\hmltrue} \in \observationsvar[\literal{strong}]{(2,1,0,0,1,1)}.$$
This is because the formula has two levels of modal observations, where the inner one is negated.
The negation is wrapped in a conjunction with no positive conjuncts.
A visualization for how $\expr[\literal{strong}](\hmlobs{τ}\hmlands\set{\hmlneg\hmlobs{\literal a}\hmltrue}) = (2,1,0,0,1,1)$ (according to @def-expressiveness-price) comes together is given in the upcoming @fig-formula-pricing.
Formally, the reason is that the following derivation is optimal:
$$
\begin{array}{rcl}
\varphi^{(2,1,0,0,1,1)} & \leadsto & \hmlobs{τ}\varphi^{(1,1,0,0,1,1)} \\
                        & \leadsto & \hmlobs{τ}\hmlands\set{\psi^{(1,0,0,0,1,1)}} \\
                        & \leadsto & \hmlobs{τ}\hmlands\set{\hmlneg\hmlobs{\literal a}\varphi^{(0,0,0,0,1,0)}} \\
                        & \leadsto & \hmlobs{τ}\hmlands\set{\hmlneg\hmlobs{\literal a}\hmltrue}.
\end{array}
$$
:::

::: {#fig-formula-pricing}
```tikz
\begin{tikzpicture}
  \node(Obs1) {$\hmlobs\tau$};
  \node(Conj0)[right=1.7cm of Obs1.center] {$\land$};
  \node(Neg)[right=2.5cm of Conj0.center] {$\neg$};
  \node(ObsA)[right=1.7cm of Neg.center] {$\hmlobs{\literal a}$};
  \node(Top)[right=1.7cm of ObsA.center] {$\top$};

  \node(E1) [above left=6mm and 1mm of Obs1.center]{$e_{\textcolor{obsColor}{1}} = 2$};
  \node(E2) [above left=2mm and 1mm of Obs1.center]{$e_{\textcolor{conjColor}{2}} = 1$};
  \node(E5) [below right=2mm and 16mm of Conj0.center]{$e_{\textcolor{negObsColor}{5}} = 1$};
  \node(E6) [below left=2mm and 1mm of Obs1.center]{$e_{\textcolor{negsColor}{6}} = 1$};

  \draw[draw=obsColor] ([yshift=8mm]Obs1.center) circle[fill, radius=1pt] to ([yshift=8mm]Conj0.center) to ([yshift=8mm]ObsA.center) circle[fill, radius=1pt] to ([yshift=8mm]Top.center);
  \draw[draw=conjColor] ([yshift=4mm]Obs1.center) to ([yshift=4mm]Conj0.center) circle[fill, radius=1pt] to ([yshift=4mm]ObsA.center) to ([yshift=4mm]Top.center);
  \draw[draw=negObsColor] ([yshift=-2mm]Conj0) to[out=0,in=180] ([yshift=-4mm]Neg.center) to  ([yshift=-4mm]ObsA.center) circle[fill, radius=1pt] to ([yshift=-4mm]Top.center);
  \draw[draw=negsColor] ([yshift=-4mm]Obs1.center) to ([yshift=-4mm]Conj0.center) to[out=0,in=180] ([yshift=-8mm]Neg.center) circle[fill, radius=1pt] to ([yshift=-8mm]ObsA.center) to ([yshift=-8mm]Top.center);

  \draw[thick] (Obs1) to (Conj0) to (Neg) to (ObsA) to (Top);
\end{tikzpicture}
```

Pricing formula $\hmlobs{τ}\hmlands\set{\hmlneg\hmlobs{\literal a}\hmltrue}$ with syntactic expressiveness $(2,1,0,0,1,1)$.
:::

\noindent
If we reexamine the grammar of $\observations{F}$ in @def-failures-modal, we notice that the formulas it can produce almost match those of $\observationsvar[\literal{strong}]{(\infty,1,0,0,1,1)}$ of the strong spectrum in @def-strong-spectrum.
The latter generates the $\varphi_\notionname{F}$-grammar in @fig-strong-grammars-linear.
As @lem-spectrum-characterization will show, both languages are equally distinctive (@def-leq-distinctive).

An example for the pricing of a more complex tree-like formula is given in @fig-formula-pricing-complex.

::: {#fig-formula-pricing-complex}
```tikz

\begin{tikzpicture}
  \node(Obs1) {$\hmlobs\tau$};
  \node(Conj0)[right=1.7cm of Obs1.center] {$\land$};
  \node(ObsEC1)[above right=1cm and 2.7cm of Conj0.center] {$\hmlobs{ec_A}$};
  \node(ObsLC1)[right=1.7cm of ObsEC1.center] {$\hmlobs{lc_A}$};
  \node(Top1)[right=1.7cm of ObsLC1.center] {$\top$};
  \node(ObsEC2)[right=2.7cm of Conj0.center] {$\hmlobs{\tau}$};
  \node(Top2)[right=1.7cm of ObsEC2.center] {$\top$};
  \node(Neg)[below right=1cm and 2.7cm of Conj0.center] {$\neg$};
  \node(NegObsEC)[right=1.7cm of Neg.center] {$\hmlobs{ec_B}$};
  \node(Top3)[right=1.7cm of NegObsEC.center] {$\top$};

  \node(E1) [above left=10mm and 1mm of Obs1.center]{$e_{\textcolor{obsColor}{1}} = 3$};
  \node(E2) [above left=6mm and 1mm of Obs1.center]{$e_{\textcolor{conjColor}{2}} = 1$};
  \node(E3) [above right=3mm and 0mm of Conj0.center]{$e_{\textcolor{mainPosColor}{3}} = 2$};
  \node(E4) [above right=3mm and 20mm of Conj0.center]{$e_{\textcolor{otherPosColor}{4}} = 1$};
  \node(E5) [below right=2mm and 20mm of Conj0.center]{$e_{\textcolor{negObsColor}{5}} = 1$};
  \node(E6) [below left=2mm and 1mm of Obs1.center]{$e_{\textcolor{negsColor}{6}} = 1$};

  \draw[draw=obsColor] ([yshift=12mm]Obs1.center) circle[fill, radius=1pt] to ([yshift=12mm]Conj0.center) to[out=0,in=180] ([yshift=12mm]ObsEC1.center) circle[fill, radius=1pt] to ([yshift=12mm]ObsLC1.center) circle[fill, radius=1pt] to ([yshift=12mm]Top1.center);
  \draw[draw=conjColor] ([yshift=8mm]Obs1.center) to ([yshift=8mm]Conj0.center) circle[fill, radius=1pt] to[out=0,in=180] ([yshift=8mm]ObsEC1.center) to ([yshift=8mm]ObsLC1.center) to ([yshift=8mm]Top1.center);
  \draw[draw=mainPosColor] ([yshift=2mm]Conj0) to[out=3,in=180] ([yshift=4mm]ObsEC1.center) circle[fill, radius=1pt] to ([yshift=4mm]ObsLC1.center) circle[fill, radius=1pt] to ([yshift=4mm]Top1.center);
  \draw[draw=otherPosColor] ([yshift=2mm]Conj0) to[out=0,in=180] ([yshift=4mm]ObsEC2.center) circle[fill, radius=1pt] to ([yshift=4mm]Top2.center);
  \draw[draw=negObsColor] ([yshift=-2mm]Conj0) to[out=0,in=180] ([yshift=4mm]Neg.center) to  ([yshift=4mm]NegObsEC.center) circle[fill, radius=1pt] to ([yshift=4mm]Top3.center);
  \draw[draw=negsColor] ([yshift=-4mm]Obs1.center) to ([yshift=-4mm]Conj0.center) to[out=0,in=180] ([yshift=-4mm]Neg.center) circle[fill, radius=1pt] to ([yshift=-4mm]NegObsEC.center) to ([yshift=-4mm]Top3.center);

  \draw[thick] (Obs1) to (Conj0) to[out=0,in=180] (ObsEC1) to (ObsLC1) to (Top1);
  \draw[thick] (Conj0) to (ObsEC2) to (Top2);
  \draw[thick] (Conj0) to[out=0,in=180] (Neg) to (NegObsEC) to (Top3);
\end{tikzpicture}
```

Pricing formula $\hmlobs{\tau}\hmlands\{\hmlobs{ec_A}\hmlobs{lc_A}\hmltrue, \hmlobs{\tau}\hmltrue, \hmlneg\hmlobs{ec_B}\hmltrue\}$ with syntactic expressiveness $(3,1,2,1,1,1)$.
:::

::: {#rem-explicit-expr}
#### Explicit formula prices

In my papers [@bjn2022decidingAllBehavioralEqs; @bisping2023equivalenceEnergyGames; @bj2024silentStepSpectroscopyExpress], the syntactic expressiveness price of formulas $\expr$ is explicitly defined, instead of using a family of grammars.
In this thesis, $\expr$ is indirectly defined through @def-expressiveness-price.

The expressiveness price $\expr[\literal{strong}]$ of formulas in the strong spectrum (@def-strong-spectrum) can be recursively characterized as described in @bisping2023equivalenceEnergyGames (we will drop the “$\literal{strong}$” for readability):

```{=latex}
\medskip
\begin{adjustbox}{center,max width=1.2\textwidth}
```

$\begin{array}{rl}
  \expr(\hmltrue) \hspace{-3mm} &= \zerovec \\
  \expr(\hmlobs{\alpha}\varphi) \hspace{-3mm} &= \textcolor{obsColor}{\unitvec{1}} + \expr(\varphi) \\
  \expr(\hmlneg\varphi) \hspace{-3mm} &= \textcolor{negsColor}{\unitvec{6}} + \expr(\varphi) \\
  \textstyle\expr(\bigwedge\limits_{i \in I}\psi_i) \hspace{-3mm} &=
  \textcolor{conjColor}{\unitvec{2}} + \sup\Biggl(\big\{\!
  \begin{pmatrix}
    0\\
    0\\
    \textcolor{mainPosColor}{\sup_{i \in \mathit{Pos}}}\, (\expr(\psi_i))_{\textcolor{obsColor}{1}}\\
    \textcolor{otherPosColor}{\sup_{i \in \mathit{Pos} \setminus \mathit{R}}}\, (\expr(\psi_i))_{\textcolor{obsColor}{1}}\\
    \textcolor{negObsColor}{\sup_{i \in \mathit{Neg}}}\, (\expr(\psi_i))_{\textcolor{obsColor}{1}}\\
    0
  \end{pmatrix} \!\big\} \cup \set{ \expr(\psi_i) \mid i \in I }
  \Biggr)
  \\
  &
  \begin{array}{rl}
    \mathit{Neg} \hspace{-2mm} & \defeq \set{i \in I \mid \exists \varphi'_i \ldotp \psi_i = \hmlneg \varphi'_i }\\
    \mathit{Pos} \hspace{-2mm} & \defeq I \setminus \mathit{Neg}\\
    \mathit{R} \hspace{-2mm} & \defeq
    \begin{cases}
      \varnothing & \text{if } \mathit{Pos} = \varnothing\\
      \set{ r } & \text{for some $r \in \mathit{Pos}$ with $(\expr(\psi_r))_{\textcolor{obsColor}{1}}$ max.\ for $\mathit{Pos}$.}\!
    \end{cases}
  \end{array}
\end{array}$

```{=latex}
\end{adjustbox}
\smallskip
```

\noindent
Note that there is a minor divergence from @bisping2023equivalenceEnergyGames in that the present thesis prices $\expr(\hmltrue)$ at $\zerovec$ instead of $\unitvec{2}$.
This change is done to align the pricing to the one we will need for the weak spectrum in later chapters.

Clearly, the explicit pricing of formulas is more versatile for the implementation direction we are aiming at.
The grammar view, on the other hand, is particularly nice to see how our $\hml$ sublanguages will align to games.
:::

The strong spectrum of @def-strong-spectrum covers the notions of behavioral equivalence we have discussed so far.
(What grammars due to the coordinates look like is listed in @fig-strong-grammars-linear and @fig-strong-grammars-branching.)

::: {#lem-spectrum-characterization}
#### Spectrum characterization

Traces, simulation, bisimulation and failures are covered as follows:

1. The observation language $\observationsvar[\literal{strong}]{(\infty, 0, 0, 0, 0, 0)}$ exactly matches the characterization of traces $\observations{T}$ from @def-sim-trace-logics and thus characterizes trace preorder.{{<isb theorem Priced_Spectrum lts.traces_priced_characterization>}}
2. The observation language $\observationsvar[\literal{strong}]{(\infty, \infty, \infty, \infty, 0, 0)}$ exactly matches the characterization of simulation observations $\observations{S}$ from @def-sim-trace-logics and thus characterizes simulation.{{<isb theorem Priced_Spectrum lts.simulation_priced_characterization>}}
3. The observation language $\observationsvar[\literal{strong}]{(\infty, \infty, \infty, \infty,  \infty, \infty)}$ matches $\hml$ in distinctiveness and thus characterizes bisimilarity.
4. The observation language $\observationsvar[\literal{strong}]{(\infty, 1, 0, 0, 1, 1)}$ matches failure observations $\observations{F}$ of @def-failures-modal in distinctiveness.
:::
::: proof
- Claim (1) for traces is trivial.
- Claim (2) for simulation is trivial, given flattening of conjunctions.
- For claim (3) of bisimilarity,
  observe that $\observations{\floor{B}} \subseteq \observationsvar[\literal{strong}]{(\infty, \infty, \infty, \infty,  \infty, \infty)}$ by examining its grammar in @def-game-formulas.
  As $\observations{\floor{B}}$ already has complete $\hml$ distinctiveness by @lem-game-formula-hml, so must its superlogic $\observationsvar[\literal{strong}]{(\infty, \infty, \infty, \infty,  \infty, \infty)}$.
- For claim (4) of failures, we must note that $\observationsvar[\literal{strong}]{(\infty, 1, 0, 0, 1, 1)}$ also contains failure observations that end in conjunctions with a $\hmlneg \hmltrue$-conjunct.
  But these are trivially false and thus cannot add to distinctiveness.\qedhere
:::

So far, we have only established that the six-dimensional spectrum covers the notions that the diamond of @exm-simple-spectrum has already covered–in a more complicated way.
The extra dimensions will pay off in the next subsection.

### The Strong Linear-Time–Branching-Time Spectrum {#sec-full-spectrum}

Using the six dimensions of @def-strong-spectrum, we can assign coordinates to all other common notions of the strong linear-time--branching-time spectrum.

::: {#def-strong-ltbt-spectrum}
#### Strong linear-time–branching-time spectrum

Coordinates with respect to the notions of @def-strong-spectrum for the common notions of behavioral equivalence and preorder in the strong linear-time–branching-time spectrum are given in @fig-strong-ltbt-spectrum.^[When writing vectors in labels and figures, we omit the parentheses $(\dots)$ for readability.]

:::: {#fig-strong-ltbt-spectrum fig-pos="t"}

```tikz
\begin{tikzpicture}[auto,node distance=2.02cm,align=center]

  \node (B){bisimulation $\notionname{B}$\\$\textcolor{obsColor}{\infty}, \textcolor{conjColor}{\infty}, \textcolor{mainPosColor}{\infty}, \textcolor{otherPosColor}{\infty}, \textcolor{negObsColor}{\infty}, \textcolor{negsColor}{\infty}$};
  \node (S2)[below of=B, node distance=1.2cm]{$2$-nested simulation $\notionname{2S}$\\$\textcolor{obsColor}{\infty}, \textcolor{conjColor}{\infty}, \textcolor{mainPosColor}{\infty}, \textcolor{otherPosColor}{\infty}, \textcolor{negObsColor}{\infty}, \textcolor{negsColor}{1}$};
  \node (RS)[below left of=S2]{ready simulation $\notionname{RS}$\\$\textcolor{obsColor}{\infty}, \textcolor{conjColor}{\infty}, \textcolor{mainPosColor}{\infty}, \textcolor{otherPosColor}{\infty}, \textcolor{negObsColor}{1}, \textcolor{negsColor}{1}$};
  \node (RT)[below right of=RS]{ready trace $\notionname{RT}$\\$\textcolor{obsColor}{\infty}, \textcolor{conjColor}{\infty}, \textcolor{mainPosColor}{\infty}, \textcolor{otherPosColor}{1}, \textcolor{negObsColor}{1}, \textcolor{negsColor}{1}$};
  \node (FT)[below left of=RT]{failure trace $\notionname{FT}$\\$\textcolor{obsColor}{\infty}, \textcolor{conjColor}{\infty}, \textcolor{mainPosColor}{\infty}, 0, \textcolor{negObsColor}{1}, \textcolor{negsColor}{1}$};
  \node (R)[below right of=RT]{readiness $\notionname{R}$\\$\textcolor{obsColor}{\infty}, \textcolor{conjColor}{1}, \textcolor{mainPosColor}{1}, \textcolor{otherPosColor}{1}, \textcolor{negObsColor}{1}, \textcolor{negsColor}{1}$};
  \node (PF)[above right of=R]{possible future $\notionname{PF}$\\$\textcolor{obsColor}{\infty}, \textcolor{conjColor}{1}, \textcolor{mainPosColor}{\infty}, \textcolor{otherPosColor}{\infty}, \textcolor{negObsColor}{\infty}, \textcolor{negsColor}{1}$};
  \node (IF)[below right of=R]{impossible future $\notionname{IF}$\\$\textcolor{obsColor}{\infty}, \textcolor{conjColor}{1}, 0, 0, \textcolor{negObsColor}{\infty}, \textcolor{negsColor}{1}$};
  \node (S)[left of=FT, node distance=3cm]{simulation $\notionname{1S}$\\$\textcolor{obsColor}{\infty}, \textcolor{conjColor}{\infty}, \textcolor{mainPosColor}{\infty}, \textcolor{otherPosColor}{\infty}, 0, 0$};
  \node (RV)[below left of=R]{revivals $\notionname{RV}$\\$\textcolor{obsColor}{\infty}, \textcolor{conjColor}{1}, \textcolor{mainPosColor}{1}, 0, \textcolor{negObsColor}{1}, \textcolor{negsColor}{1}$};
  \node (F)[below right of=RV]{failure $\notionname{F}$\\$\textcolor{obsColor}{\infty}, \textcolor{conjColor}{1}, 0, 0, \textcolor{negObsColor}{1}, \textcolor{negsColor}{1}$};
  \node (T)[below left of=F]{trace $\notionname{T}$\\$\textcolor{obsColor}{\infty},0,0,0,0,0$};
  \node (E)[below of=T, node distance=1.2cm]{enabledness $\notionname{E}$\\$\textcolor{obsColor}{1},0,0,0,0,0$};
  \node (U)[below of=E, node distance=1.2cm]{universal $\notionname{U}$\\$0,0,0,0,0,0$};

  \path
  (B) edge (S2)
  (S2) edge (RS)
  (S2) edge (PF)
  (RS) edge (S)
  (RS) edge (RT)
  (RT) edge (R)
  (RT) edge (FT)
  (PF) edge (R)
  (PF) edge (IF)
  (S) edge (T)
  (FT) edge (RV)
  (R) edge (RV)
  (IF) edge (F)
  (RV) edge (F)
  (F) edge (T)
  (T) edge (E)
  (E) edge (U)
  ;
\end{tikzpicture}
```

Hierarchy of common equivalences/preorders ordered by observability coordinates.
::::
:::

The coordinates of @def-strong-ltbt-spectrum define a hierarchy of modal languages.
@fig-strong-grammars-linear and @fig-strong-grammars-branching list the grammars that are described through the coordinates in interplay with @def-strong-spectrum.
The defining aspects of each grammar are marked in $\textcolor{RoyalBlue}{\textrm{blue}}$.
The conjunction productions with “$\dots$” are to be read in the sense that they allow arbitrary many conjuncts; in particular, empty and infinitary conjunctions are possible.
If a non-terminal appears only once in the conjunction production, at most one such subformula is allowed.

:::{#fig-strong-grammars-linear fig-pos='t!'}

```tikz
\parbox{12cm}{
  \begin{align*}
  \intertext{
    Universal, $\notionname{U}$ at $(0,0,0,0,0,0)$:
  }
    \varphi_\notionname{U} \grammardef &
      \grammarsp \hmltrue \\
  \intertext{
    Enabledness, $\notionname{E}$ at $(\mathhl{1},0,0,0,0,0)$:
  }
    \varphi_\notionname{E} \grammardef &
      \grammarsp \mathhl{\hmlobs{α}\varphi_\notionname{U}}
      \grammaror \mathdl{\varphi_\notionname{U}} \\
  \intertext{
    Traces, $\notionname{T}$ at $(\mathhl{\infty},0,0,0,0,0)$:
  }
    \varphi_\notionname{T} \grammardef &
      \grammarsp \hmlobs{α}\mathhl{\varphi_\notionname{T}}
      \grammaror \varphi_\notionname{U} \\
  \intertext{
    Failures, $\notionname{F}$ at $(\infty,\mathhl{1},0,0,\mathhl{1},\mathhl{1})$:
  }
    \varphi_\notionname{F} \grammardef &
      \grammarsp \hmlobs{α}\varphi_\notionname{F}
      \grammaror \mathhl{\hmlands \set{ \psi_\notionname{F}, \psi_\notionname{F}, \ldots }} \\
    \psi_\notionname{F} \grammardef &
      \grammarsp \mathhl{\hmlneg\varphi_\notionname{E}}
      \grammaror \mathdl{\hmltrue} \\ 
  \intertext{
    Revivals, $\notionname{RV}$ at $(\infty,1,\mathhl{1},0,1,1)$:
  }
    \varphi_\notionname{RV} \grammardef &
      \grammarsp \hmlobs{α}\varphi_\notionname{RV}
      \grammaror \hmlands \set{ \mathhl{\varphi_\notionname{E}}, \psi_\notionname{F}, \psi_\notionname{F}, \ldots } \\
  \intertext{
    Readiness, $\notionname{R}$ at $(\infty,1,1,\mathhl{1},1,1)$:
  }
    \varphi_\notionname{R} \grammardef &
      \grammarsp \hmlobs{α}\varphi_\notionname{R}
      \grammaror \hmlands \set{ \psi_\notionname{R}, \psi_\notionname{R}, \ldots } \\
    \psi_\notionname{R} \grammardef &
      \grammarsp \mathhl{\varphi_\notionname{E}}
      \grammaror \psi_\notionname{F} \\
  \intertext{
    Failure trace, $\notionname{FT}$ at $(\infty,1,\mathhl{\infty},0,1,1)$:
  }
    \varphi_\notionname{FT} \grammardef &
      \grammarsp \hmlobs{α}\varphi_\notionname{FT}
      \grammaror \hmlands \set{ \mathhl{\varphi_\notionname{FT}}, \psi_\notionname{F}, \psi_\notionname{F}, \ldots } \\
  \intertext{
    Ready trace, $\notionname{RT}$ at $(\infty,1,\infty,\mathhl{1},1,1)$:
  }
    \varphi_\notionname{RT} \grammardef &
      \grammarsp \hmlobs{α}\varphi_\notionname{RT}
      \grammaror \hmlands \set{ \mathhl{\varphi_\notionname{RT}}, \psi_\notionname{R}, \psi_\notionname{R}, \ldots }
  \end{align*}
}
```

Grammars induced by coordinates for strong linear-time notions of equivalence.
:::

:::{#fig-strong-grammars-branching fig-pos='t!'}

```tikz
\parbox{12cm}{
  \begin{align*}
  \intertext{
    Impossible futures, $\notionname{IF}$ at $(\infty,1,0,0,\mathhl{\infty},1)$:
  }
    \varphi_\notionname{IF} \grammardef &
      \grammarsp \hmlobs{α}\varphi_\notionname{IF}
      \grammaror \hmlands \set{ \psi_\notionname{IF}, \psi_\notionname{IF}, \ldots } \\
    \psi_\notionname{IF} \grammardef &
      \grammarsp \mathhl{\hmlneg\varphi_\notionname{T}}
      \grammaror \mathdl{\hmltrue} \\
  \intertext{
    Possible futures, $\notionname{PF}$ at $(\infty,1,\mathhl{\infty},\mathhl{\infty},\infty,1)$:
  }
    \varphi_\notionname{PF} \grammardef &
      \grammarsp \hmlobs{α}\varphi_\notionname{PF}
      \grammaror \hmlands \set{ \psi_\notionname{PF}, \psi_\notionname{PF}, \ldots } \\
    \psi_\notionname{PF} \grammardef &
      \grammarsp \mathhl{\varphi_\notionname{T}}
      \grammaror \psi_\notionname{IF} \\
  \intertext{
    Simulation, $\notionname{1S}$ at $(\infty,\mathhl{\infty},\mathhl{\infty},\mathhl{\infty},0,0)$:
  }
    \varphi_\notionname{1S} \grammardef &
      \grammarsp \hmlobs{α}\varphi_\notionname{1S}
      \grammaror \mathhl{\hmlands \set{ \varphi_\notionname{1S}, \varphi_\notionname{1S}, \ldots }} \\
  \intertext{
    Ready simulation, $\notionname{RS}$ at $(\infty,\infty,\infty,\infty,\mathhl{1},\mathhl{1})$:
  }
    \varphi_\notionname{RS} \grammardef &
      \grammarsp \hmlobs{α}\varphi_\notionname{RS}
      \grammaror \hmlands \set{ \psi_\notionname{RS}, \psi_\notionname{RS}, \ldots } \\
    \psi_\notionname{RS} \grammardef &
      \grammarsp \mathhl{\psi_\notionname{F}}
      \grammaror \varphi_\notionname{RS} \\
  \intertext{
    2-nested simulation, $\notionname{2S}$ at $(\infty,\infty,\infty,\infty,\mathhl{\infty},1)$:
  }
    \varphi_\notionname{2S} \grammardef &
      \grammarsp \hmlobs{α}\varphi_\notionname{2S}
      \grammaror \hmlands \set{ \psi_\notionname{2S}, \psi_\notionname{2S}, \ldots } \\
    \psi_\notionname{2S} \grammardef &
      \grammarsp \mathhl{\hmlneg\varphi_\notionname{1S}}
      \grammaror \varphi_\notionname{2S} \\
  \intertext{
    Bisimulation, $\notionname{B}$ at $(\infty,\infty,\infty,\infty,\infty,\mathhl{\infty})$:
  }
    \varphi_\notionname{B} \grammardef &
      \grammarsp \hmlobs{α}\varphi_\notionname{B}
      \grammaror \hmlands \set{ \psi_\notionname{B}, \psi_\notionname{B}, \ldots } \\
    \psi_\notionname{B} \grammardef &
      \grammarsp \mathhl{\hmlneg\varphi_\notionname{B}}
      \grammaror \varphi_\notionname{B}
  \end{align*}
}
```

Grammars induced by coordinates for strong branching-time notions of equivalence.
:::

\indent
For the rest of the thesis, we will take the equivalences as defined by the coordinates as canonical.
But, of course, it is natural to ask whether the equivalences thus defined correspond to previous definitions in this thesis and the literature.

@lem-spectrum-characterization already establishes that the coordinates of traces, simulation, failures, and bisimulation match the common definitions.

@mattes2024expressivePowerHML proves in Isabelle/HOL that our coordinate system spectrum matches the distinctiveness of the modal characterizations by @glabbeek2001ltbtsiReport.^[
  To be precise, @mattes2024expressivePowerHML works with the version of the spectrum from @bisping2023equivalenceEnergyGames.
  The only real difference is that, there, $\hmltrue$ is priced at $1$ conjunction, while the present spectrum prices it at $\zerovec$, cf. @rem-explicit-expr.
]
This entails a lot of fine print, which we will not reproduce here.

The grammars already contain a trick to handle *equivalences of decorated traces*, which we should discuss as it will be mirrored in game rules later on:
The idea behind *failure traces* is that one observes a trace of actions and *at each step* a set of actions that are *disabled*.
*Ready traces* work similarly, but with disabled and enabled actions in between.

::: {#exm-failure-trace-distinguished}
#### Failure traces

Consider the following processes, which are slightly deeper variants of the situation we encountered with $\literal{Q}$ and troll process $\literal{T}$ in @exm-bisim-sim.
$$
\begin{aligned}
  \literal{Q'} \defeq\, & \ccsprefix{\tau} (\ccsprefix{\literal a} \literal a \ccschoice \ccsprefix{\literal b} \literal{b}) \\
  \literal{T'_{\tau a a}} \defeq\, & \literal{Q'} \ccschoice \ccsprefix{\tau}\ccsprefix{\literal a} \literal a \\
  \literal{T'_{\tau a}} \defeq\, & \literal{Q'} \ccschoice \ccsprefix{\tau}\literal a 
\end{aligned}
$$
$\literal{T'_{\tau a a}}$ and $\literal{T'_{\tau a}}$ are simulation equivalent.
But they are distinguished by the failure-trace observation $\hmlobs{\tau} \hmlands\set{\hmlobs{\literal a}\hmlobs{\literal{a}}, \hmlneg \hmlobs{\literal b}}$.
The intuition is that we can observe the trace $\tau \literal{a} \literal{a}$ together with the fact that $\literal b$ is impossible after a first step of $\literal{T'_{\tau a a}}$, but not of $\literal{T'_{\tau a}}$.

The formula pricing works out, that is, $\hmlobs{\tau} \hmlands\set{\hmlobs{\literal a}\hmlobs{\literal{a}}, \hmlneg \hmlobs{\literal b}} \in \observationsvar[\literal{strong}]{(3,1,2,0,1,1)} \subseteq \observations[\literal{strong}]{\literal{FT}}$.
The important point here is that we can allow *one* arbitrarily deep positive conjunct but prevent any other,
which would undermine the *trace-likeness* of the observation.
:::

@exm-failure-trace-distinguished shows how it pays off that the spectrum grammar (@def-strong-spectrum) has a more lenient pricing for one of the positive conjuncts.
We will sometimes refer to the deep positive conjunct of a conjunction as the *revival*, because revivals equivalence [@rrs2007responsivenessRevivals] is the first notion of equivalence with this feature.
It also matters for ready traces, as can be seen by the ready trace formula in @fig-formula-pricing-complex.

### Any Questions?

There are a few standard questions that come to mind for people who are familiar with the various spectra of equivalence when seeing @fig-strong-ltbt-spectrum.
The following remarks address these points.

::: {#rem-other-strong-notions}
#### Selection of notions

At the core, we treat the same notions as @glabbeek1990ltbt1.
But we feature a slightly more modern selection.

Our spectrum additionally includes strong versions of *impossible futures* [@vm2001impossible] and *revivals* [@rrs2007responsivenessRevivals; @roscoe2009revivalsHierarchy] as equivalences whose relevance has only been noted after the publication of @glabbeek2001ltbtsiReport.

On the other hand, we glimpse over completed trace, completed simulation, and possible worlds observations like @ke1999logicalProcessQuotients, who studied properties of “good” observation languages.
These notions would need a different HML grammar, featuring exhaustive conjunctions $\hmland{\alpha}{\actions}\varphi_\alpha$, where the $\varphi_\alpha$ are deactivated actions for completed traces, and more complex trees for possible worlds.
:::

::: {#rem-synonymous-coordinates}
#### Synonymous coordinates

For many of the logics in @fig-strong-ltbt-spectrum, there are multiple coordinates that characterize the same logic.
For instance, due to the second dimension (conjunctions) being set to $0$ for traces $\notionname{T}$, the higher dimensions do not matter and any coordinate $N = (\infty, 0, N_3, N_4, N_5, N_6)$ will lead to the same observation language $\observationsvar[\literal{strong}]{N} = \observations[\literal{strong}]{T}$.

Ruling out such equalities in the design of the lattice would be quite tedious.
Luckily, @def-spectrum only demands $N \leq M$ to imply $\observationsvar{N} \subseteq \observationsvar{M}$, and not the converse.

Indeed, @fig-strong-ltbt-spectrum always selects the least coordinate to characterize a sublogic, in order for domination of coordinates in the figure and entailment between behavioral preorders to coincide.

At the same time, some notions could be characterized by strictly smaller coordinates due to sublogics of matching expressiveness.
In particular, all $(\infty, \infty, N_3, N_4, \infty, \infty)$ would characterize bisimilarity due to the unbounded possibility of “hiding” positive conjuncts in double negations.
This observation will become relevant again later for varying abstractions of bisimilarity in the spectrum of weak equivalences in @sec-weak-spectrum-exposition.
:::

::: {#rem-other-coordinates}
#### Other coordinates

We have singled out a handful of coordinates.
Many other coordinates will still correspond to distinct equivalences.
For instance, we could consider $N^{\notionname{2T}} = (2,0,0,0,0,0)$, preordering states that cannot be distinguished by traces up to a length of $2$.
But it is difficult to make a case for such a “notion of equivalence,” which washes away differences of future behavior after exactly two steps.

Some kinds of depth-bounded families, however, are common in the literature to approximate bisimilarity and can also be placed in our spectrum:

- $k$-step bisimilarity: $(k,\infty,\infty,\infty,\infty,\infty)$ is a depth-$k$ approximation of bisimilarity that sometimes appears in its fixed point characterizations, for instance in @ails2007reactiveSystems [§ 4.3].
- $k$-stratified bisimilarity: $(\infty,k,\infty,\infty,\infty,\infty)$ would be what @milner1989comcon[§ 10.4] calls “stratification of bisimilarity,” also appearing as “$(k+1)$-nested trace equivalence” in @afgi2004nestedSemantics.
- $k$-nested similarity: $(\infty,\infty,\infty,\infty,\infty,k-1)$ for $k>1$ defines a spectrum of modal quantifier alternation depth between similarity and bisimilarity.
:::

::: {#rem-dimensions}
#### Alternate dimensions 

In principle, one can choose different dimensions to characterize the strong linear-time--branching-time spectrum.
(Indeed, @bjn2022decidingAllBehavioralEqs, @bisping2023equivalenceEnergyGames and this thesis all use slightly different dimensions.)

Naturally, one may ask whether the same spectrum can be characterized with fewer than six dimensions.
As some of the preceding examples also show, the dimensions we chose are not entirely orthogonal.

If we restrict our focus to a grid of ternary entries $\set{0,1,\infty}$, we can be sure to need at least five dimensions:
With four dimensions, the height of the lattice is nine, that is, the maximal number of nodes on increasing paths between $(0,0,0,0)$ and $(\infty, \infty, \infty, \infty)$.
But the hierarchy of @fig-strong-ltbt-spectrum has height ten!

With a grid of five ternary dimensions, we can recreate the hierarchy of @fig-strong-ltbt-spectrum, and “hard-code” the logics for coordinates, a bit as it happens in @exm-simple-spectrum.
On the other hand, this would align less nicely with syntactic features of Hennessy–Milner logic.
:::

::: {#rem-infinities}
#### (In-)finitary variants

One can introduce more dimensions to the spectrum with respect to the possibility of infinitary observations.
Our choice focuses on natural and most common versions of the equivalences, in particular:
similarity and bisimilarity with unbounded (infinitary) branching and trace-like notions with finitary depth.
Notions in @fig-strong-ltbt-spectrum correspond precisely to those without superscripts in the infinitary linear-time–branching-time spectrum of @glabbeek2001ltbtsiReport [Figure 9].
:::

### Non-Intersectionality

The strong spectrum of @def-strong-ltbt-spectrum is much richer than the diamond spectrum from @exm-simple-spectrum.
Still, its observation languages form no lattice.
For instance, the lines of simulation and failures join at ready simulation---and their coordinates as well $(\infty,\infty,\infty,\infty,0,0) \lub (\infty,1,0,0,1,1) = (\infty,\infty,\infty,\infty,1,1)$.
But $\observations[\literal{strong}]{S} \cup \observations[\literal{strong}]{F} \neq \observations[\literal{strong}]{RS}$ and this makes a difference:

::: {#exm-non-ready-sim}
#### Simulation + failures $\neq$ ready-simulation

Consider the $\ccs$ processes
$\ccsprefix{\literal{a}} (\ccsprefix{\literal{a}} \literal{b} \ccschoice \literal{a})$ and
$\ccsprefix{\literal{a}} \ccsprefix{\literal{a}} \literal{b} \ccschoice \ccsprefix{\literal{a}}\literal{a}$.
They cannot be told apart by $\observations[\literal{strong}]{S}$ or $\observations[\literal{strong}]{F}$ and thus are simulation and failure equivalent (and moreover even ready-trace equivalent).

Still, the formula $\hmlobs{\literal{a}}\hmlands\set{\hmlobs{\literal a}\hmlands\set{\hmlneg \hmlobs{\literal b}}, \hmlobs{\literal a}\hmlobs{\literal b}} \in \observations[\literal{strong}]{RS}$ distinguishes the first process from the second.
Therefore, the processes are not ready-simulation equivalent.
:::

What @exm-non-ready-sim shows is that one cannot prove two states to be ready-simulation-equivalent by showing that they are equated by simulation and failures:
$${\beq{S}} \cap {\beq{F}} \, \nsubseteq \, {\beq{RS}}.$$
The relationship between the characterized equivalences is *non-intersectional*.

In general, multiple preorders may relate two states without this entailing a stronger equivalence.
So the question “Which equivalence from a spectrum relates two states?” is too simple---one has to ask in *plural*: “Which equivalence**s** relate two processes?”

This plural motivates the *spectroscopy problem*.

## Spectroscopy {#sec-spectroscopy}

Now that we have a formal way of describing equivalence spectra, we can make formal the *spectroscopy problem*---the core topic of this thesis.
We will also collect first thoughts on its complexity.

### The Spectroscopy Problem {#sec-spectro-problem}

The problem has originally been introduced in @bjn2022decidingAllBehavioralEqs as the “abstract observation preorder problem” with respect to modal characterizations of the strong spectrum.
We here reintroduce it in a more generic form.

::: {#prob-spectroscopy-problem .problem .callout-problem .callout-tip}
#### Spectroscopy problem

In the context of a transition system $\system$ and a spectrum $(\notions, \leq, \observationsvar{N \in \notions})$, the *spectroscopy problem* asks:

Input
:  States $p$ and $q$.

Output
:  Maximal set of notions $\notions_{p,q} \subseteq \notions$, such that $p \bpreordvar{\observationsvar{N}} q$ for each $N \in \notions_{p,q}$.
:::

Intuitively, the problem is about finding all the ways in which processes can be related, beyond the black-and-white of the bisimilarity problem.
We aim to *split up* information on possible distinctions, analogously to a prism with light (@fig-prism).
Given that the equivalence hierarchies are commonly referred to as *spectra*, it is natural to borrow the name *spectroscopy* from physical experiments.

:::{#fig-prism .column-margin}
![](img/prism.jpg){.lightbox}

A prism revealing the spectrum of sun light.
:::

::: {#exm-trivial-spectroscopy}
#### Warm-up spectroscopy

In @exm-phil-traces, we have noticed that it is easy to distinguish $\literal{q_{ab}} \nbpreord{T} \literal{p_a}$ through the 1-symbol-trace $\literal{b}$.
In $\hml$, the difference is expressed as $\hmlobs{\literal{b}}\hmltrue$.

The solution to the strong spectroscopy problem on $\literal{q_{ab}}$ and $\literal{p_a}$ is
$$
\notions^{\literal{strong}}_{\literal{q_{ab}}, \literal{p_{a}}} = \set{N \in \notions^{\literal{strong}} \mid N_1 < 1}.
$$
All notions thus characterized correspond to universal equivalence $\notionname{U}$ in distinctiveness.
In other words, the states are not equivalent with respect to any notion where states are told apart at all.
They are *as different as possible*, in our metric.
:::

::: {#exm-spectroscopy-front}
#### The spectrum of trolled philosophers

For the “trolled philosophers” of @exm-bisim-sim, we have determined that the systems are simulation-preordered, but not bisimilar, that is, $\literal{Q} \bpreord{S} \literal{T}$, but $\literal{Q} \nbpreord{B} \literal{T}$.
The first fact implies $\literal{Q} \bpreord{T} \literal{T}$.

But what about other notions from the strong spectrum of @sec-full-spectrum?
Besides similarity, there might well be incomparable or finer notions that also preorder $\literal{Q}$ to $\literal{T}$!

The solution to the spectroscopy problem on $\literal{Q}$ and $\literal{T}$ is
$$\notions^{\literal{strong}}_{\literal{Q}, \literal{T}} = \set{N \in \notions^\literal{strong} \mid (2,2,0,0,2,2) \nleq N}.$$
A minimal formula to distinguish $\literal{Q}$ from $\literal{T}$ with coordinate $(2,2,0,0,2,2)$ would be $\hmlands\set{\hmlneg\hmlobs{\tau}\hmlands\set{\hmlneg\hmlobs{\literal{a}}\hmltrue}}$.
(The following chapters will reveal how to reliably arrive at this knowledge, in particular, the minimality.)

@fig-spectroscopy-front shows how the distinction is above the distinction spaces of most notions we named.

Because the coordinate of $2$-nested simulation, $\notionname{2S} = (\infty,\infty,\infty,\infty,\infty,1)$ is not above $(2,2,0,0,2,2)$, we arrive at $\literal{Q} \bpreord{2S} \literal{T}$, which implies *all* preorders of @fig-strong-ltbt-spectrum except for bisimilarity.

:::: {#fig-spectroscopy-front fig-pos='th'}

```tikz
\begin{tikzpicture}[]
  \begin{scope}[rotate=30, scale=1]
    \draw[step=1.0, xshift=-.7505cm, yshift=-1.3cm, opacity=0.4] (0,0) grid (3.5,3.5);
    \draw[draw=yellow, fill=yellow, opacity=0.7, fill opacity=0.3, text opacity=1, xshift=-.7505cm, yshift=-1.3cm]
      (-.05,-.05) rectangle (.05,4) node[pos=.65] {simulation};
    \draw[draw=red, fill=red, opacity=0.7, fill opacity=0.2, text opacity=1, xshift=-.7505cm, yshift=-1.3cm]
      (-.1,-.1) rectangle (.1,.1) node[below, align=center] {enabledness\\/trace};
    %
    \draw[step=1.0, opacity=0.4] (0,0) grid (3.5,3.5);
    \draw[draw=none, fill=pink, fill opacity=0.1, text opacity=1]
      (-.05,-.05) rectangle (4,4) node[pos=.55, align=center] {2-nested\\sim};
    \draw[draw=negObsColor, fill=negObsColor, opacity=0.7, fill opacity=0.2, text opacity=1]
      (-.05,-.05) rectangle (4,1.05) node[pos=.73, align=center] {(im)possible\\future};
    \draw[draw=orange, fill=orange, opacity=0.4, fill opacity=0.2, text opacity=1]
        (-.05,-.05) rectangle (1.05,4) node[pos=.73, align=center] {ready\\simulation};
    \draw[draw=green, fill=green, opacity=0.7, fill opacity=0.2, text opacity=1]
      (-.05,-.05) rectangle (1.05,1.05) node[below, align=center] {failure\\/ready};
    %
    \draw[step=1.0, xshift=.7505cm, yshift=1.3cm, opacity=0.4] (0,0) grid (3.5,3.5);
    \draw[thick, opacity=0.5, text opacity=.8, xshift=.7505cm, yshift=1.3cm] (-.25,2) -- (4,2) node[pos=1,right] {conjunctions = \textcolor{conjColor}{2}};
    \draw[thick, opacity=0.5, text opacity=.8, xshift=.7505cm, yshift=1.3cm] (2,-.25) -- (2,4) node[pos=1,left] {neg.\ conjunct depth = \textcolor{negObsColor}{2}};
    \draw[draw=none, fill=negsColor, fill opacity=0.1, text opacity=1, xshift=.7505cm, yshift=1.3cm]
      (-.05,-.05) rectangle (4,4) node[pos=.74, align=center] {bisimulation};
    %
    \draw[draw=red, fill=none, opacity=0.5, text opacity=1, line width=2pt, xshift=.7505cm, yshift=1.3cm]
      (1.95,2.5) -- (1.95, 1.95) node[right, align=left] {$\hmlands\set{\hmlneg\hmlobs{\tau}\hmlands\set{\hmlneg\hmlobs{\literal{a}}\hmltrue}}$} -- (2.5,1.95)
      (1.95, 1.95) -- (2.2, 2.4);
  \end{scope}
\end{tikzpicture}
```

Cross section of the strong spectrum showing the dimensions conjunctions, negative conjunct depth, and negation depth.
All preorders that are not hit by the red mark at $(2,2,2)$ hold in @exm-spectroscopy-front.
::::

Note that we have expressed $\notions^{\literal{strong}}_{\literal{Q}, \literal{T}}$ through a negation (“$(2,2,0,0,2,2) \nleq N$”).
The reason is that a positive description is usually unwieldy.
In this (comparably easy) case, we could for example list the half-spaces undercutting the cheapest distinction, and this would read:
$\notions^{\literal{strong}}_{\literal{Q}, \literal{T}} =
(\set{0,1} \times \natsext^5) \cup
(\natsext \times \set{0,1} \times \natsext^4) \cup
(\natsext^4 \times \set{0,1} \times \natsext) \cup
(\natsext^5 \times \set{0,1})$.
:::

Technically, it is convenient to not compute $\notions_{p,q}$ directly.
Rather we aim to construct the *Pareto front* of minimal notions that do not hold, $\Min(\notions \setminus \notions_{p,q})$.
The Pareto front serves as a unique representation, from which $\notions_{p,q}$ can be constructed as complement of the upward closure $\notions \setminus \upset \Min(\notions \setminus \notions_{p,q})$
(where ${\upset\! B} ≔ \set{b \mid \exists b' \in B \ldotp b' \leq b}$ is the upwards closure for $B$ subset of some partially ordered set).
Pareto fronts form *anti-chains* and appear naturally in optimization problems.

All spectra we are concerned with are well-quasi ordered, which means that each $\Min(\notions \setminus \notions_{p,q})$ must be finite in size [@kruskal1972wqo] and thus “more handy” than the full sets $\notions_{p,q}$ or $\notions \setminus \notions_{p,q}$.

So, effectively, we will be asking:
What are the minimal notions to distinguish $p$ from $q$---and then often talk about the converse: The most-fitting notions to preorder or equate the states.
Everything else is implied.

:::{#rem-finite-spectroscopy}
#### Infinitely many notions

The spectrum as formulated in @def-strong-spectrum contains infinitely many notions.
This would be a problem in a naive solution to @prob-spectroscopy-problem that relies on deciding equivalences individually, but will be no problem for us.
Where we, however, assume finiteness for algorithms, is in the state-space size of $\system$.
:::

### Spectroscopy as Abstract Subtraction {#sec-abstract-subtraction}

Another way of viewing the spectroscopy problem is that we aim to compute an abstracted kind of *difference* between programs.

::: {#def-observations}
#### Observations and difference

On a transition system $\system$, the possible observations of a state, $\semanticsobs{\cdot} \colon \states \to \powerset{\hml}$, are defined as:
$$\semanticsobs{p} ≔ \set{φ ∈ \hml \mid p ∈ \semantics{φ}}.$$
The *difference* between $p$ and $q$ is defined as:
$$\difference{p}{q} ≔ \semanticsobs{p} \setminus \semanticsobs{q}.$$
:::

$\difference{p}{q}$ expresses the set of observations one could make of $p$ that one cannot make of $q$.
This set will be empty when the states are bisimilar, or infinite, otherwise.

With this notation, we could rephrase how preorders derive from $\hml$ subsets in @def-distinctions:

::: {#prp-behavioraleq}
Two states $p$ and $q$ are preordered with respect to a sublogic $\observationsvar{} ⊆ \hml$:
$$p \bpreordvar{\observationsvar{}} q ⟺ \difference{p}{q} \cap \observationsvar{} = \varnothing.$$
:::

The spectroscopy problem then is about computing some abstraction $\Delta_A$ such that
$N \in \Delta_A(p,q)$ precisely if $\difference{p}{q} \cap \observationsvar{N} \neq \varnothing$.
$\notions_{p,q}$ plays the role of $\Delta_A(p,q)$.

### Complexities {#sec-equivalence-complexities}

What complexities to expect when deciding spectroscopy problems on finite systems?
Details depend, of course, on the specific spectrum and flavor of Hennessy–Milner logic we are concerned with.
Still, solving the spectroscopy problem cannot be easier than solving the covered individual equivalence problems.

To get a first idea, let us examine the complexities of common equivalence checking problems in the strong spectrum.
The rule of thumb is that trace-like equivalences are $\complexityname{PSPACE}$-complete and bisimilarities are $\complexityname{P}$-complete [@hs1996complexityEquivalences;@kanellakisSmolka1983threeProbsEq;@bgs1992bisimPComplete].

Bisimilarity finds itself in a *valley* of tractability,
if we look at a cross section through the equivalence spectrum as in @fig-complexity-slope.
The best known bisimilarity algorithms for finite-state transition systems take $\bigo{\relsize{\step{}} \log \relsize{\states}}$ time.
They usually employ partition refinement [e.g. @valmari2009bisimMin], deriving from @paigetarjan1987partitionrefinement.

::: {#fig-complexity-slope}
```tikz
\begin{tikzpicture}[]
  \begin{axis}[
        title = {},
        width = 10cm,
        height = 5cm,
        symbolic x coords = {ID,GI,B,S,T,E,U},
        xtick = data,
        ytick = {0, 1, 2, 3, 4, 5},
        yticklabels = {
          $\bigo{1}$,
          $\bigo{\relsize{\step{}}}$,
          $\bigo{\relsize{\step{}} \log \relsize{\states}}$,
          $\bigo{\relsize{\step{}} \relsize{\states}}$,
          $2^{\bigo{(\log n)^3}}$,
          $\complexityname{PSPACE}$,
        }
    ]
    \addplot+ [smooth] coordinates {(ID,0) (GI,4) (B,2) (S,3) (T,5) (E,1) (U,0)};
    \draw[draw=gray] (axis cs:{[normalized]1.9},-0.1) rectangle (axis cs:{[normalized]6.1},5.1);
  \end{axis}
\end{tikzpicture}
```
Bisimilarity's complexity valley.
:::

For coarser simulation-like equivalences, the best known algorithms need $\bigo{\relsize{\step{}} \relsize{\states}}$ time [@rt2010efficientSimulation].^[Or $\bigo{\relsize{\step{}} \relsize{\smash{\relqotient{S}{\beq{S}}}}}$ to name the bound as @rt2010efficientSimulation present it.]

The finer graph-isomorphism equivalence (@def-graph-isomorphism) again is harder with the best known solution [@babai2016graphIsomorphismQuasiPoly] in quasi-polynomial time $2^{\bigo{(\log n)^3}}$.

There are few strict hardness results at this level of granularity.
So, better time complexities for graph isomorphism, bisimilarity, and similarity are conceivable (albeit improbable).
@gmv2023lowerboundsBisimPartitionRefinement show that at least partition-refinement algorithms for bisimilarity cannot do better than $\bigo{\relsize{\step{}} \log \relsize{\states}}$.
In a recent preprint, @groote2024quadraticlowerboundsimulation establish that similarity is strictly more complex than bisimilarity.

The trivial equivalences at the end of the cross section, identity $\notionname{ID}$ and universal equivalence $\notionname{U}$, can be solved directly.
Enabledness equivalence $\notionname{E}$ can as well be computed quite quickly by just comparing outgoing transitions.

In this thesis, we solve the spectroscopy problem for the strong and weak spectrum.
So, we must be at least as complex as the equivalences between bisimilarity and universal equivalence, boxed in @fig-complexity-slope.
Consequently, the spectroscopy problem for the standard equivalence spectra is $\complexityname{PSPACE}$-hard.

## Discussion

In this chapter, we have formalized how to handle *spectra of equivalence* (@idea-hierarchy), and instantiated the approach to the strong spectrum of @glabbeek2001ltbtsiReport.
From there, we have introduced the *spectroscopy problem*, which asks for notions to preorder compared states (@idea-spectroscopy).

{{< paragraph_heading "The shifted problem." >}}
By formulating the problem in terms of a lattice over $\natsext$-vectors, the family of qualitative strong preorder/equivalence problems becomes a single quantitative problem:
The spectroscopy problem for the strong spectrum.
As we will see, the perspective of one quantitative problem is more insightful than the view of loosely-related, isolated equivalence problems.

We have already laid the groundwork to shift the semantic question of equivalence into a syntactic question of the shape of distinguishing formulas.

{{< paragraph_heading "Prior publications." >}}
The core ideas of this section have already been explored in @bjn2022decidingAllBehavioralEqs and @bisping2023equivalenceEnergyGames for the strong spectrum.
However, in my prior work the expressiveness prices played a more crucial role.
Here, we instead opted for a parameterized grammar to define notions and their observations $\observationsvar{N}$.
In this grammar, we count $\hmltrue$ as part of the $\zerovec$-notion.
These are mostly superficial changes to streamline the following presentation.
We have shown that traces, failures, simulation and bisimulation equivalence as defined by the notion coordinates match their textbook definitions.
@mattes2024expressivePowerHML addresses all notions in Isabelle/HOL.

{{< paragraph_heading "What's next?" >}}
So far, we have a problem and confidence that its solution conveys information about equivalences of the strong spectrum.
@sec-equivalence-complexities has established that spectroscopy complexity must be at least $\complexityname{PSPACE}$ on the strong spectrum.

However, there is a polynomial-time-easy fragment of the spectrum around bisimilarity and (ready) similarity.
In Part II, comprising the next two chapters, we will first solve the *spectroscopy problem for this $\complexityname{P}$-easy slice* and then extend to the whole strong spectrum.
After that, we will also consider the weak spectrum in Part III.
